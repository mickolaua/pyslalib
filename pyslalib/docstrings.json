{"sla_addet": "\"\"\"\n*     - - - - - -\n*      A D D E T\n*     - - - - - -\n*\n*  Add the E-terms (elliptic component of annual aberration)\n*  to a pre IAU 1976 mean place to conform to the old\n*  catalogue convention (double precision)\n*\n*  Given:\n*     RM,DM     dp     RA,Dec (radians) without E-terms\n*     EQ        dp     Besselian epoch of mean equator and equinox\n*\n*  Returned:\n*     RC,DC     dp     RA,Dec (radians) with E-terms included\n*\n*  Note:\n*\n*     Most star positions from pre-1984 optical catalogues (or\n*     derived from astrometry using such stars) embody the\n*     E-terms.  If it is necessary to convert a formal mean\n*     place (for example a pulsar timing position) to one\n*     consistent with such a star catalogue, then the RA,Dec\n*     should be adjusted using this routine.\n*\n*  Reference:\n*     Explanatory Supplement to the Astronomical Ephemeris,\n*     section 2D, page 48.\n*\n*  Called:  sla_ETRMS, sla_DCS2C, sla_DCC2S, sla_DRANRM, sla_DRANGE\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\addet.f\n\"\"\"", "sla_afin": "\"\"\"\n*     - - - - -\n*      A F I N\n*     - - - - -\n*\n*  Sexagesimal character string to angle (single precision)\n*\n*  Given:\n*     STRING  c*(*)   string containing deg, arcmin, arcsec fields\n*     IPTR      i     pointer to start of decode (1st = 1)\n*\n*  Returned:\n*     IPTR      i     advanced past the decoded angle\n*     A         r     angle in radians\n*     J         i     status:  0 = OK\n*                             +1 = default, A unchanged\n*                             -1 = bad degrees      )\n*                             -2 = bad arcminutes   )  (note 3)\n*                             -3 = bad arcseconds   )\n*\n*  Example:\n*\n*    argument    before                           after\n*\n*    STRING      '-57 17 44.806  12 34 56.7'      unchanged\n*    IPTR        1                                16 (points to 12...)\n*    A           ?                                -1.00000\n*    J           ?                                0\n*\n*    A further call to sla_AFIN, without adjustment of IPTR, will\n*    decode the second angle, 12deg 34min 56.7sec.\n*\n*  Notes:\n*\n*     1)  The first three \"fields\" in STRING are degrees, arcminutes,\n*         arcseconds, separated by spaces or commas.  The degrees field\n*         may be signed, but not the others.  The decoding is carried\n*         out by the DFLTIN routine and is free-format.\n*\n*     2)  Successive fields may be absent, defaulting to zero.  For\n*         zero status, the only combinations allowed are degrees alone,\n*         degrees and arcminutes, and all three fields present.  If all\n*         three fields are omitted, a status of +1 is returned and A is\n*         unchanged.  In all other cases A is changed.\n*\n*     3)  Range checking:\n*\n*           The degrees field is not range checked.  However, it is\n*           expected to be integral unless the other two fields are\n*           absent.\n*\n*           The arcminutes field is expected to be 0-59, and integral if\n*           the arcseconds field is present.  If the arcseconds field\n*           is absent, the arcminutes is expected to be 0-59.9999...\n*\n*           The arcseconds field is expected to be 0-59.9999...\n*\n*     4)  Decoding continues even when a check has failed.  Under these\n*         circumstances the field takes the supplied value, defaulting\n*         to zero, and the result A is computed and returned.\n*\n*     5)  Further fields after the three expected ones are not treated\n*         as an error.  The pointer IPTR is left in the correct state\n*         for further decoding with the present routine or with DFLTIN\n*         etc.  See the example, above.\n*\n*     6)  If STRING contains hours, minutes, seconds instead of degrees\n*         etc, or if the required units are turns (or days) instead of\n*         radians, the result A should be multiplied as follows:\n*\n*           for        to obtain    multiply\n*           STRING     A in         A by\n*\n*           d ' \"      radians      1       =  1.0\n*           d ' \"      turns        1/2pi   =  0.1591549430918953358\n*           h m s      radians      15      =  15.0\n*           h m s      days         15/2pi  =  2.3873241463784300365\n*\n*  Called:  sla_DAFIN\n*\n*  P.T.Wallace   Starlink   13 September 1990\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\afin.f\n\"\"\"", "sla_airmas": "\"\"\"\n*     - - - - - - -\n*      A I R M A S\n*     - - - - - - -\n*\n*  Air mass at given zenith distance (double precision)\n*\n*  Given:\n*     ZD     d     Observed zenith distance (radians)\n*\n*  The result is an estimate of the air mass, in units of that\n*  at the zenith.\n*\n*  Notes:\n*\n*  1)  The \"observed\" zenith distance referred to above means \"as\n*      affected by refraction\".\n*\n*  2)  Uses Hardie's (1962) polynomial fit to Bemporad's data for\n*      the relative air mass, X, in units of thickness at the zenith\n*      as tabulated by Schoenberg (1929). This is adequate for all\n*      normal needs as it is accurate to better than 0.1% up to X =\n*      6.8 and better than 1% up to X = 10. Bemporad's tabulated\n*      values are unlikely to be trustworthy to such accuracy\n*      because of variations in density, pressure and other\n*      conditions in the atmosphere from those assumed in his work.\n*\n*  3)  The sign of the ZD is ignored.\n*\n*  4)  At zenith distances greater than about ZD = 87 degrees the\n*      air mass is held constant to avoid arithmetic overflows.\n*\n*  References:\n*     Hardie, R.H., 1962, in \"Astronomical Techniques\"\n*        ed. W.A. Hiltner, University of Chicago Press, p180.\n*     Schoenberg, E., 1929, Hdb. d. Ap.,\n*        Berlin, Julius Springer, 2, 268.\n*\n*  Original code by P.W.Hill, St Andrews\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\airmas.f\n\"\"\"", "sla_altaz": "\"\"\"\n*     - - - - - -\n*      A L T A Z\n*     - - - - - -\n*\n*  Positions, velocities and accelerations for an altazimuth\n*  telescope mount.\n*\n*  (double precision)\n*\n*  Given:\n*     HA      d     hour angle\n*     DEC     d     declination\n*     PHI     d     observatory latitude\n*\n*  Returned:\n*     AZ      d     azimuth\n*     AZD     d        \"    velocity\n*     AZDD    d        \"    acceleration\n*     EL      d     elevation\n*     ELD     d         \"     velocity\n*     ELDD    d         \"     acceleration\n*     PA      d     parallactic angle\n*     PAD     d         \"      \"   velocity\n*     PADD    d         \"      \"   acceleration\n*\n*  Notes:\n*\n*  1)  Natural units are used throughout.  HA, DEC, PHI, AZ, EL\n*      and ZD are in radians.  The velocities and accelerations\n*      assume constant declination and constant rate of change of\n*      hour angle (as for tracking a star);  the units of AZD, ELD\n*      and PAD are radians per radian of HA, while the units of AZDD,\n*      ELDD and PADD are radians per radian of HA squared.  To\n*      convert into practical degree- and second-based units:\n*\n*        angles * 360/2pi -> degrees\n*        velocities * (2pi/86400)*(360/2pi) -> degree/sec\n*        accelerations * ((2pi/86400)**2)*(360/2pi) -> degree/sec/sec\n*\n*      Note that the seconds here are sidereal rather than SI.  One\n*      sidereal second is about 0.99727 SI seconds.\n*\n*      The velocity and acceleration factors assume the sidereal\n*      tracking case.  Their respective numerical values are (exactly)\n*      1/240 and (approximately) 1/3300236.9.\n*\n*  2)  Azimuth is returned in the range 0-2pi;  north is zero,\n*      and east is +pi/2.  Elevation and parallactic angle are\n*      returned in the range +/-pi.  Parallactic angle is +ve for\n*      a star west of the meridian and is the angle NP-star-zenith.\n*\n*  3)  The latitude is geodetic as opposed to geocentric.  The\n*      hour angle and declination are topocentric.  Refraction and\n*      deficiencies in the telescope mounting are ignored.  The\n*      purpose of the routine is to give the general form of the\n*      quantities.  The details of a real telescope could profoundly\n*      change the results, especially close to the zenith.\n*\n*  4)  No range checking of arguments is carried out.\n*\n*  5)  In applications which involve many such calculations, rather\n*      than calling the present routine it will be more efficient to\n*      use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude, and (for tracking a star)\n*      sine and cosine of declination.\n*\n*  This revision:  29 October 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\altaz.f\n\"\"\"", "sla_amp": "\"\"\"\n*     - - - -\n*      A M P\n*     - - - -\n*\n*  Convert star RA,Dec from geocentric apparent to mean place\n*\n*  The mean coordinate system is the post IAU 1976 system,\n*  loosely called FK5.\n*\n*  Given:\n*     RA       d      apparent RA (radians)\n*     DA       d      apparent Dec (radians)\n*     DATE     d      TDB for apparent place (JD-2400000.5)\n*     EQ       d      equinox:  Julian epoch of mean place\n*\n*  Returned:\n*     RM       d      mean RA (radians)\n*     DM       d      mean Dec (radians)\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Notes:\n*\n*  1)  The distinction between the required TDB and TT is always\n*      negligible.  Moreover, for all but the most critical\n*      applications UTC is adequate.\n*\n*  2)  Iterative techniques are used for the aberration and light\n*      deflection corrections so that the routines sla_AMP (or\n*      sla_AMPQK) and sla_MAP (or sla_MAPQK) are accurate inverses;\n*      even at the edge of the Sun's disc the discrepancy is only\n*      about 1 nanoarcsecond.\n*\n*  3)  Where multiple apparent places are to be converted to mean\n*      places, for a fixed date and equinox, it is more efficient to\n*      use the sla_MAPPA routine to compute the required parameters\n*      once, followed by one call to sla_AMPQK per star.\n*\n*  4)  The accuracy is sub-milliarcsecond, limited by the\n*      precession-nutation model (IAU 1976 precession, Shirai &\n*      Fukushima 2001 forced nutation and precession corrections).\n*\n*  5)  The accuracy is further limited by the routine sla_EVP, called\n*      by sla_MAPPA, which computes the Earth position and velocity\n*      using the methods of Stumpff.  The maximum error is about\n*      0.3 mas.\n*\n*  Called:  sla_MAPPA, sla_AMPQK\n*\n*  P.T.Wallace   Starlink   17 September 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\amp.f\n\"\"\"", "sla_ampqk": "\"\"\"\n*     - - - - - -\n*      A M P Q K\n*     - - - - - -\n*\n*  Convert star RA,Dec from geocentric apparent to mean place\n*\n*  The mean coordinate system is the post IAU 1976 system,\n*  loosely called FK5.\n*\n*  Use of this routine is appropriate when efficiency is important\n*  and where many star positions are all to be transformed for\n*  one epoch and equinox.  The star-independent parameters can be\n*  obtained by calling the sla_MAPPA routine.\n*\n*  Given:\n*     RA       d      apparent RA (radians)\n*     DA       d      apparent Dec (radians)\n*\n*     AMPRMS   d(21)  star-independent mean-to-apparent parameters:\n*\n*       (1)      time interval for proper motion (Julian years)\n*       (2-4)    barycentric position of the Earth (AU)\n*       (5-7)    heliocentric direction of the Earth (unit vector)\n*       (8)      (grav rad Sun)*2/(Sun-Earth distance)\n*       (9-11)   ABV: barycentric Earth velocity in units of c\n*       (12)     sqrt(1-v**2) where v=modulus(ABV)\n*       (13-21)  precession/nutation (3,3) matrix\n*\n*  Returned:\n*     RM       d      mean RA (radians)\n*     DM       d      mean Dec (radians)\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Note:\n*\n*     Iterative techniques are used for the aberration and\n*     light deflection corrections so that the routines\n*     sla_AMP (or sla_AMPQK) and sla_MAP (or sla_MAPQK) are\n*     accurate inverses;  even at the edge of the Sun's disc\n*     the discrepancy is only about 1 nanoarcsecond.\n*\n*  Called:  sla_DCS2C, sla_DIMXV, sla_DVDV, sla_DVN, sla_DCC2S,\n*           sla_DRANRM\n*\n*  P.T.Wallace   Starlink   7 May 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ampqk.f\n\"\"\"", "sla_aop": "\"\"\"\n*     - - - -\n*      A O P\n*     - - - -\n*\n*  Apparent to observed place, for sources distant from the solar\n*  system.\n*\n*  Given:\n*     RAP    d      geocentric apparent right ascension\n*     DAP    d      geocentric apparent declination\n*     DATE   d      UTC date/time (Modified Julian Date, JD-2400000.5)\n*     DUT    d      delta UT:  UT1-UTC (UTC seconds)\n*     ELONGM d      mean longitude of the observer (radians, east +ve)\n*     PHIM   d      mean geodetic latitude of the observer (radians)\n*     HM     d      observer's height above sea level (metres)\n*     XP     d      polar motion x-coordinate (radians)\n*     YP     d      polar motion y-coordinate (radians)\n*     TDK    d      local ambient temperature (K; std=273.15D0)\n*     PMB    d      local atmospheric pressure (mb; std=1013.25D0)\n*     RH     d      local relative humidity (in the range 0D0-1D0)\n*     WL     d      effective wavelength (micron, e.g. 0.55D0)\n*     TLR    d      tropospheric lapse rate (K/metre, e.g. 0.0065D0)\n*\n*  Returned:\n*     AOB    d      observed azimuth (radians: N=0,E=90)\n*     ZOB    d      observed zenith distance (radians)\n*     HOB    d      observed Hour Angle (radians)\n*     DOB    d      observed Declination (radians)\n*     ROB    d      observed Right Ascension (radians)\n*\n*  Notes:\n*\n*   1)  This routine returns zenith distance rather than elevation\n*       in order to reflect the fact that no allowance is made for\n*       depression of the horizon.\n*\n*   2)  The accuracy of the result is limited by the corrections for\n*       refraction.  Providing the meteorological parameters are\n*       known accurately and there are no gross local effects, the\n*       predicted apparent RA,Dec should be within about 0.1 arcsec\n*       for a zenith distance of less than 70 degrees.  Even at a\n*       topocentric zenith distance of 90 degrees, the accuracy in\n*       elevation should be better than 1 arcmin;  useful results\n*       are available for a further 3 degrees, beyond which the\n*       sla_REFRO routine returns a fixed value of the refraction.\n*       The complementary routines sla_AOP (or sla_AOPQK) and sla_OAP\n*       (or sla_OAPQK) are self-consistent to better than 1 micro-\n*       arcsecond all over the celestial sphere.\n*\n*   3)  It is advisable to take great care with units, as even\n*       unlikely values of the input parameters are accepted and\n*       processed in accordance with the models used.\n*\n*   4)  \"Apparent\" place means the geocentric apparent right ascension\n*       and declination, which is obtained from a catalogue mean place\n*       by allowing for space motion, parallax, precession, nutation,\n*       annual aberration, and the Sun's gravitational lens effect.  For\n*       star positions in the FK5 system (i.e. J2000), these effects can\n*       be applied by means of the sla_MAP etc routines.  Starting from\n*       other mean place systems, additional transformations will be\n*       needed;  for example, FK4 (i.e. B1950) mean places would first\n*       have to be converted to FK5, which can be done with the\n*       sla_FK425 etc routines.\n*\n*   5)  \"Observed\" Az,El means the position that would be seen by a\n*       perfect theodolite located at the observer.  This is obtained\n*       from the geocentric apparent RA,Dec by allowing for Earth\n*       orientation and diurnal aberration, rotating from equator\n*       to horizon coordinates, and then adjusting for refraction.\n*       The HA,Dec is obtained by rotating back into equatorial\n*       coordinates, using the geodetic latitude corrected for polar\n*       motion, and is the position that would be seen by a perfect\n*       equatorial located at the observer and with its polar axis\n*       aligned to the Earth's axis of rotation (n.b. not to the\n*       refracted pole).  Finally, the RA is obtained by subtracting\n*       the HA from the local apparent ST.\n*\n*   6)  To predict the required setting of a real telescope, the\n*       observed place produced by this routine would have to be\n*       adjusted for the tilt of the azimuth or polar axis of the\n*       mounting (with appropriate corrections for mount flexures),\n*       for non-perpendicularity between the mounting axes, for the\n*       position of the rotator axis and the pointing axis relative\n*       to it, for tube flexure, for gear and encoder errors, and\n*       finally for encoder zero points.  Some telescopes would, of\n*       course, exhibit other properties which would need to be\n*       accounted for at the appropriate point in the sequence.\n*\n*   7)  This routine takes time to execute, due mainly to the\n*       rigorous integration used to evaluate the refraction.\n*       For processing multiple stars for one location and time,\n*       call sla_AOPPA once followed by one call per star to sla_AOPQK.\n*       Where a range of times within a limited period of a few hours\n*       is involved, and the highest precision is not required, call\n*       sla_AOPPA once, followed by a call to sla_AOPPAT each time the\n*       time changes, followed by one call per star to sla_AOPQK.\n*\n*   8)  The DATE argument is UTC expressed as an MJD.  This is,\n*       strictly speaking, wrong, because of leap seconds.  However,\n*       as long as the delta UT and the UTC are consistent there\n*       are no difficulties, except during a leap second.  In this\n*       case, the start of the 61st second of the final minute should\n*       begin a new MJD day and the old pre-leap delta UT should\n*       continue to be used.  As the 61st second completes, the MJD\n*       should revert to the start of the day as, simultaneously,\n*       the delta UTC changes by one second to its post-leap new value.\n*\n*   9)  The delta UT (UT1-UTC) is tabulated in IERS circulars and\n*       elsewhere.  It increases by exactly one second at the end of\n*       each UTC leap second, introduced in order to keep delta UT\n*       within +/- 0.9 seconds.\n*\n*  10)  IMPORTANT -- TAKE CARE WITH THE LONGITUDE SIGN CONVENTION.\n*       The longitude required by the present routine is east-positive,\n*       in accordance with geographical convention (and right-handed).\n*       In particular, note that the longitudes returned by the\n*       sla_OBS routine are west-positive, following astronomical\n*       usage, and must be reversed in sign before use in the present\n*       routine.\n*\n*  11)  The polar coordinates XP,YP can be obtained from IERS\n*       circulars and equivalent publications.  The maximum amplitude\n*       is about 0.3 arcseconds.  If XP,YP values are unavailable,\n*       use XP=YP=0D0.  See page B60 of the 1988 Astronomical Almanac\n*       for a definition of the two angles.\n*\n*  12)  The height above sea level of the observing station, HM,\n*       can be obtained from the Astronomical Almanac (Section J\n*       in the 1988 edition), or via the routine sla_OBS.  If P,\n*       the pressure in millibars, is available, an adequate\n*       estimate of HM can be obtained from the expression\n*\n*             HM ~ -29.3D0*TSL*LOG(P/1013.25D0).\n*\n*       where TSL is the approximate sea-level air temperature in K\n*       (see Astrophysical Quantities, C.W.Allen, 3rd edition,\n*       section 52).  Similarly, if the pressure P is not known,\n*       it can be estimated from the height of the observing\n*       station, HM, as follows:\n*\n*             P ~ 1013.25D0*EXP(-HM/(29.3D0*TSL)).\n*\n*       Note, however, that the refraction is nearly proportional to the\n*       pressure and that an accurate P value is important for precise\n*       work.\n*\n*  13)  The azimuths etc produced by the present routine are with\n*       respect to the celestial pole.  Corrections to the terrestrial\n*       pole can be computed using sla_POLMO.\n*\n*  Called:  sla_AOPPA, sla_AOPQK\n*\n*  Last revision:   2 December 2005\n*\n*  Copyright P.T.Wallace.   All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\aop.f\n\"\"\"", "sla_aoppa": "\"\"\"\n*     - - - - - -\n*      A O P P A\n*     - - - - - -\n*\n*  Precompute apparent to observed place parameters required by\n*  sla_AOPQK and sla_OAPQK.\n*\n*  Given:\n*     DATE   d      UTC date/time (modified Julian Date, JD-2400000.5)\n*     DUT    d      delta UT:  UT1-UTC (UTC seconds)\n*     ELONGM d      mean longitude of the observer (radians, east +ve)\n*     PHIM   d      mean geodetic latitude of the observer (radians)\n*     HM     d      observer's height above sea level (metres)\n*     XP     d      polar motion x-coordinate (radians)\n*     YP     d      polar motion y-coordinate (radians)\n*     TDK    d      local ambient temperature (K; std=273.15D0)\n*     PMB    d      local atmospheric pressure (mb; std=1013.25D0)\n*     RH     d      local relative humidity (in the range 0D0-1D0)\n*     WL     d      effective wavelength (micron, e.g. 0.55D0)\n*     TLR    d      tropospheric lapse rate (K/metre, e.g. 0.0065D0)\n*\n*  Returned:\n*     AOPRMS d(14)  star-independent apparent-to-observed parameters:\n*\n*       (1)      geodetic latitude (radians)\n*       (2,3)    sine and cosine of geodetic latitude\n*       (4)      magnitude of diurnal aberration vector\n*       (5)      height (HM)\n*       (6)      ambient temperature (TDK)\n*       (7)      pressure (PMB)\n*       (8)      relative humidity (RH)\n*       (9)      wavelength (WL)\n*       (10)     lapse rate (TLR)\n*       (11,12)  refraction constants A and B (radians)\n*       (13)     longitude + eqn of equinoxes + sidereal DUT (radians)\n*       (14)     local apparent sidereal time (radians)\n*\n*  Notes:\n*\n*   1)  It is advisable to take great care with units, as even\n*       unlikely values of the input parameters are accepted and\n*       processed in accordance with the models used.\n*\n*   2)  The DATE argument is UTC expressed as an MJD.  This is,\n*       strictly speaking, improper, because of leap seconds.  However,\n*       as long as the delta UT and the UTC are consistent there\n*       are no difficulties, except during a leap second.  In this\n*       case, the start of the 61st second of the final minute should\n*       begin a new MJD day and the old pre-leap delta UT should\n*       continue to be used.  As the 61st second completes, the MJD\n*       should revert to the start of the day as, simultaneously,\n*       the delta UTC changes by one second to its post-leap new value.\n*\n*   3)  The delta UT (UT1-UTC) is tabulated in IERS circulars and\n*       elsewhere.  It increases by exactly one second at the end of\n*       each UTC leap second, introduced in order to keep delta UT\n*       within +/- 0.9 seconds.\n*\n*   4)  IMPORTANT -- TAKE CARE WITH THE LONGITUDE SIGN CONVENTION.\n*       The longitude required by the present routine is east-positive,\n*       in accordance with geographical convention (and right-handed).\n*       In particular, note that the longitudes returned by the\n*       sla_OBS routine are west-positive, following astronomical\n*       usage, and must be reversed in sign before use in the present\n*       routine.\n*\n*   5)  The polar coordinates XP,YP can be obtained from IERS\n*       circulars and equivalent publications.  The maximum amplitude\n*       is about 0.3 arcseconds.  If XP,YP values are unavailable,\n*       use XP=YP=0D0.  See page B60 of the 1988 Astronomical Almanac\n*       for a definition of the two angles.\n*\n*   6)  The height above sea level of the observing station, HM,\n*       can be obtained from the Astronomical Almanac (Section J\n*       in the 1988 edition), or via the routine sla_OBS.  If P,\n*       the pressure in millibars, is available, an adequate\n*       estimate of HM can be obtained from the expression\n*\n*             HM ~ -29.3D0*TSL*LOG(P/1013.25D0).\n*\n*       where TSL is the approximate sea-level air temperature in K\n*       (see Astrophysical Quantities, C.W.Allen, 3rd edition,\n*       section 52).  Similarly, if the pressure P is not known,\n*       it can be estimated from the height of the observing\n*       station, HM, as follows:\n*\n*             P ~ 1013.25D0*EXP(-HM/(29.3D0*TSL)).\n*\n*       Note, however, that the refraction is nearly proportional to the\n*       pressure and that an accurate P value is important for precise\n*       work.\n*\n*   7)  Repeated, computationally-expensive, calls to sla_AOPPA for\n*       times that are very close together can be avoided by calling\n*       sla_AOPPA just once and then using sla_AOPPAT for the subsequent\n*       times.  Fresh calls to sla_AOPPA will be needed only when\n*       changes in the precession have grown to unacceptable levels or\n*       when anything affecting the refraction has changed.\n*\n*  Called:  sla_GEOC, sla_REFCO, sla_EQEQX, sla_AOPPAT\n*\n*  Last revision:   2 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\aoppa.f\n\"\"\"", "sla_aoppat": "\"\"\"\n*     - - - - - - -\n*      A O P P A T\n*     - - - - - - -\n*\n*  Recompute the sidereal time in the apparent to observed place\n*  star-independent parameter block.\n*\n*  Given:\n*     DATE   d      UTC date/time (modified Julian Date, JD-2400000.5)\n*                   (see AOPPA source for comments on leap seconds)\n*\n*     AOPRMS d(14)  star-independent apparent-to-observed parameters\n*\n*       (1-12)   not required\n*       (13)     longitude + eqn of equinoxes + sidereal DUT\n*       (14)     not required\n*\n*  Returned:\n*     AOPRMS d(14)  star-independent apparent-to-observed parameters:\n*\n*       (1-13)   not changed\n*       (14)     local apparent sidereal time (radians)\n*\n*  For more information, see sla_AOPPA.\n*\n*  Called:  sla_GMST\n*\n*  P.T.Wallace   Starlink   1 July 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\aoppat.f\n\"\"\"", "sla_aopqk": "\"\"\"\n*     - - - - - -\n*      A O P Q K\n*     - - - - - -\n*\n*  Quick apparent to observed place (but see note 8, below, for\n*  remarks about speed).\n*\n*  Given:\n*     RAP    d      geocentric apparent right ascension\n*     DAP    d      geocentric apparent declination\n*     AOPRMS d(14)  star-independent apparent-to-observed parameters:\n*\n*       (1)      geodetic latitude (radians)\n*       (2,3)    sine and cosine of geodetic latitude\n*       (4)      magnitude of diurnal aberration vector\n*       (5)      height (HM)\n*       (6)      ambient temperature (T)\n*       (7)      pressure (P)\n*       (8)      relative humidity (RH)\n*       (9)      wavelength (WL)\n*       (10)     lapse rate (TLR)\n*       (11,12)  refraction constants A and B (radians)\n*       (13)     longitude + eqn of equinoxes + sidereal DUT (radians)\n*       (14)     local apparent sidereal time (radians)\n*\n*  Returned:\n*     AOB    d      observed azimuth (radians: N=0,E=90)\n*     ZOB    d      observed zenith distance (radians)\n*     HOB    d      observed Hour Angle (radians)\n*     DOB    d      observed Declination (radians)\n*     ROB    d      observed Right Ascension (radians)\n*\n*  Notes:\n*\n*   1)  This routine returns zenith distance rather than elevation\n*       in order to reflect the fact that no allowance is made for\n*       depression of the horizon.\n*\n*   2)  The accuracy of the result is limited by the corrections for\n*       refraction.  Providing the meteorological parameters are\n*       known accurately and there are no gross local effects, the\n*       observed RA,Dec predicted by this routine should be within\n*       about 0.1 arcsec for a zenith distance of less than 70 degrees.\n*       Even at a topocentric zenith distance of 90 degrees, the\n*       accuracy in elevation should be better than 1 arcmin;  useful\n*       results are available for a further 3 degrees, beyond which\n*       the sla_REFRO routine returns a fixed value of the refraction.\n*       The complementary routines sla_AOP (or sla_AOPQK) and sla_OaAP\n*       (or sla_OAPQK) are self-consistent to better than 1 micro-\n*       arcsecond all over the celestial sphere.\n*\n*   3)  It is advisable to take great care with units, as even\n*       unlikely values of the input parameters are accepted and\n*       processed in accordance with the models used.\n*\n*   4)  \"Apparent\" place means the geocentric apparent right ascension\n*       and declination, which is obtained from a catalogue mean place\n*       by allowing for space motion, parallax, precession, nutation,\n*       annual aberration, and the Sun's gravitational lens effect.  For\n*       star positions in the FK5 system (i.e. J2000), these effects can\n*       be applied by means of the sla_MAP etc routines.  Starting from\n*       other mean place systems, additional transformations will be\n*       needed;  for example, FK4 (i.e. B1950) mean places would first\n*       have to be converted to FK5, which can be done with the\n*       sla_FK425 etc routines.\n*\n*   5)  \"Observed\" Az,El means the position that would be seen by a\n*       perfect theodolite located at the observer.  This is obtained\n*       from the geocentric apparent RA,Dec by allowing for Earth\n*       orientation and diurnal aberration, rotating from equator\n*       to horizon coordinates, and then adjusting for refraction.\n*       The HA,Dec is obtained by rotating back into equatorial\n*       coordinates, using the geodetic latitude corrected for polar\n*       motion, and is the position that would be seen by a perfect\n*       equatorial located at the observer and with its polar axis\n*       aligned to the Earth's axis of rotation (n.b. not to the\n*       refracted pole).  Finally, the RA is obtained by subtracting\n*       the HA from the local apparent ST.\n*\n*   6)  To predict the required setting of a real telescope, the\n*       observed place produced by this routine would have to be\n*       adjusted for the tilt of the azimuth or polar axis of the\n*       mounting (with appropriate corrections for mount flexures),\n*       for non-perpendicularity between the mounting axes, for the\n*       position of the rotator axis and the pointing axis relative\n*       to it, for tube flexure, for gear and encoder errors, and\n*       finally for encoder zero points.  Some telescopes would, of\n*       course, exhibit other properties which would need to be\n*       accounted for at the appropriate point in the sequence.\n*\n*   7)  The star-independent apparent-to-observed-place parameters\n*       in AOPRMS may be computed by means of the sla_AOPPA routine.\n*       If nothing has changed significantly except the time, the\n*       sla_AOPPAT routine may be used to perform the requisite\n*       partial recomputation of AOPRMS.\n*\n*   8)  At zenith distances beyond about 76 degrees, the need for\n*       special care with the corrections for refraction causes a\n*       marked increase in execution time.  Moreover, the effect\n*       gets worse with increasing zenith distance.  Adroit\n*       programming in the calling application may allow the\n*       problem to be reduced.  Prepare an alternative AOPRMS array,\n*       computed for zero air-pressure;  this will disable the\n*       refraction corrections and cause rapid execution.  Using\n*       this AOPRMS array, a preliminary call to the present routine\n*       will, depending on the application, produce a rough position\n*       which may be enough to establish whether the full, slow\n*       calculation (using the real AOPRMS array) is worthwhile.\n*       For example, there would be no need for the full calculation\n*       if the preliminary call had already established that the\n*       source was well below the elevation limits for a particular\n*       telescope.\n*\n*  9)   The azimuths etc produced by the present routine are with\n*       respect to the celestial pole.  Corrections to the terrestrial\n*       pole can be computed using sla_POLMO.\n*\n*  Called:  sla_DCS2C, sla_REFZ, sla_REFRO, sla_DCC2S, sla_DRANRM\n*\n*  P.T.Wallace   Starlink   24 October 2003\n*\n*  Copyright (C) 2003 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\aopqk.f\n\"\"\"", "sla_atmdsp": "\"\"\"\n*     - - - - - - -\n*      A T M D S P\n*     - - - - - - -\n*\n*  Apply atmospheric-dispersion adjustments to refraction coefficients.\n*\n*  Given:\n*     TDK       d       ambient temperature, K\n*     PMB       d       ambient pressure, millibars\n*     RH        d       ambient relative humidity, 0-1\n*     WL1       d       reference wavelength, micrometre (0.4D0 recommended)\n*     A1        d       refraction coefficient A for wavelength WL1 (radians)\n*     B1        d       refraction coefficient B for wavelength WL1 (radians)\n*     WL2       d       wavelength for which adjusted A,B required\n*\n*  Returned:\n*     A2        d       refraction coefficient A for wavelength WL2 (radians)\n*     B2        d       refraction coefficient B for wavelength WL2 (radians)\n*\n*  Notes:\n*\n*  1  To use this routine, first call sla_REFCO specifying WL1 as the\n*     wavelength.  This yields refraction coefficients A1,B1, correct\n*     for that wavelength.  Subsequently, calls to sla_ATMDSP specifying\n*     different wavelengths will produce new, slightly adjusted\n*     refraction coefficients which apply to the specified wavelength.\n*\n*  2  Most of the atmospheric dispersion happens between 0.7 micrometre\n*     and the UV atmospheric cutoff, and the effect increases strongly\n*     towards the UV end.  For this reason a blue reference wavelength\n*     is recommended, for example 0.4 micrometres.\n*\n*  3  The accuracy, for this set of conditions:\n*\n*        height above sea level    2000 m\n*                      latitude    29 deg\n*                      pressure    793 mb\n*                   temperature    17 degC\n*                      humidity    50%\n*                    lapse rate    0.0065 degC/m\n*          reference wavelength    0.4 micrometre\n*                star elevation    15 deg\n*\n*     is about 2.5 mas RMS between 0.3 and 1.0 micrometres, and stays\n*     within 4 mas for the whole range longward of 0.3 micrometres\n*     (compared with a total dispersion from 0.3 to 20.0 micrometres\n*     of about 11 arcsec).  These errors are typical for ordinary\n*     conditions and the given elevation;  in extreme conditions values\n*     a few times this size may occur, while at higher elevations the\n*     errors become much smaller.\n*\n*  4  If either wavelength exceeds 100 micrometres, the radio case\n*     is assumed and the returned refraction coefficients are the\n*     same as the given ones.  Note that radio refraction coefficients\n*     cannot be turned into optical values using this routine, nor\n*     vice versa.\n*\n*  5  The algorithm consists of calculation of the refractivity of the\n*     air at the observer for the two wavelengths, using the methods\n*     of the sla_REFRO routine, and then scaling of the two refraction\n*     coefficients according to classical refraction theory.  This\n*     amounts to scaling the A coefficient in proportion to (n-1) and\n*     the B coefficient almost in the same ratio (see R.M.Green,\n*     \"Spherical Astronomy\", Cambridge University Press, 1985).\n*\n*  Last revision   2 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\atmdsp.f\n\"\"\"", "sla__atms": "\"\"\"\n*     - - - - -\n*      A T M S\n*     - - - - -\n*\n*  Internal routine used by REFRO\n*\n*  Refractive index and derivative with respect to height for the\n*  stratosphere.\n*\n*  Given:\n*    RT      d    height of tropopause from centre of the Earth (metre)\n*    TT      d    temperature at the tropopause (K)\n*    DNT     d    refractive index at the tropopause\n*    GAMAL   d    constant of the atmospheric model = G*MD/R\n*    R       d    current distance from the centre of the Earth (metre)\n*\n*  Returned:\n*    DN      d    refractive index at R\n*    RDNDR   d    R * rate the refractive index is changing at R\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\atms.f\n\"\"\"", "sla__atmt": "\"\"\"\n*     - - - - -\n*      A T M T\n*     - - - - -\n*\n*  Internal routine used by REFRO\n*\n*  Refractive index and derivative with respect to height for the\n*  troposphere.\n*\n*  Given:\n*    R0      d    height of observer from centre of the Earth (metre)\n*    T0      d    temperature at the observer (K)\n*    ALPHA   d    alpha          )\n*    GAMM2   d    gamma minus 2  ) see HMNAO paper\n*    DELM2   d    delta minus 2  )\n*    C1      d    useful term  )\n*    C2      d    useful term  )\n*    C3      d    useful term  ) see source\n*    C4      d    useful term  ) of sla_REFRO\n*    C5      d    useful term  )\n*    C6      d    useful term  )\n*    R       d    current distance from the centre of the Earth (metre)\n*\n*  Returned:\n*    T       d    temperature at R (K)\n*    DN      d    refractive index at R\n*    RDNDR   d    R * rate the refractive index is changing at R\n*\n*  Note that in the optical case C5 and C6 are zero.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\atmt.f\n\"\"\"", "sla_av2m": "\"\"\"\n*     - - - - -\n*      A V 2 M\n*     - - - - -\n*\n*  Form the rotation matrix corresponding to a given axial vector.\n*\n*  (single precision)\n*\n*  A rotation matrix describes a rotation about some arbitrary axis,\n*  called the Euler axis.  The \"axial vector\" supplied to this routine\n*  has the same direction as the Euler axis, and its magnitude is the\n*  amount of rotation in radians.\n*\n*  Given:\n*    AXVEC  r(3)     axial vector (radians)\n*\n*  Returned:\n*    RMAT   r(3,3)   rotation matrix\n*\n*  If AXVEC is null, the unit matrix is returned.\n*\n*  The reference frame rotates clockwise as seen looking along\n*  the axial vector from the origin.\n*\n*  Last revision:   26 November 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\av2m.f\n\"\"\"", "sla_bear": "\"\"\"\n*     - - - - -\n*      B E A R\n*     - - - - -\n*\n*  Bearing (position angle) of one point on a sphere relative to another\n*  (single precision)\n*\n*  Given:\n*     A1,B1    r    spherical coordinates of one point\n*     A2,B2    r    spherical coordinates of the other point\n*\n*  (The spherical coordinates are RA,Dec, Long,Lat etc, in radians.)\n*\n*  The result is the bearing (position angle), in radians, of point\n*  A2,B2 as seen from point A1,B1.  It is in the range +/- pi.  If\n*  A2,B2 is due east of A1,B1 the bearing is +pi/2.  Zero is returned\n*  if the two points are coincident.\n*\n*  P.T.Wallace   Starlink   23 March 1991\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\bear.f\n\"\"\"", "sla_caf2r": "\"\"\"\n*     - - - - - -\n*      C A F 2 R\n*     - - - - - -\n*\n*  Convert degrees, arcminutes, arcseconds to radians\n*  (single precision)\n*\n*  Given:\n*     IDEG        int       degrees\n*     IAMIN       int       arcminutes\n*     ASEC        real      arcseconds\n*\n*  Returned:\n*     RAD         real      angle in radians\n*     J           int       status:  0 = OK\n*                                    1 = IDEG outside range 0-359\n*                                    2 = IAMIN outside range 0-59\n*                                    3 = ASEC outside range 0-59.999...\n*\n*  Notes:\n*\n*  1)  The result is computed even if any of the range checks\n*      fail.\n*\n*  2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\caf2r.f\n\"\"\"", "sla_caldj": "\"\"\"\n*     - - - - - -\n*      C A L D J\n*     - - - - - -\n*\n*  Gregorian Calendar to Modified Julian Date\n*\n*  (Includes century default feature:  use sla_CLDJ for years\n*   before 100AD.)\n*\n*  Given:\n*     IY,IM,ID     int    year, month, day in Gregorian calendar\n*\n*  Returned:\n*     DJM          dp     modified Julian Date (JD-2400000.5) for 0 hrs\n*     J            int    status:\n*                           0 = OK\n*                           1 = bad year   (MJD not computed)\n*                           2 = bad month  (MJD not computed)\n*                           3 = bad day    (MJD computed)\n*\n*  Acceptable years are 00-49, interpreted as 2000-2049,\n*                       50-99,     \"       \"  1950-1999,\n*                       100 upwards, interpreted literally.\n*\n*  Called:  sla_CLDJ\n*\n*  P.T.Wallace   Starlink   November 1985\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\caldj.f\n\"\"\"", "sla_calyd": "\"\"\"\n*     - - - - - -\n*      C A L Y D\n*     - - - - - -\n*\n*  Gregorian calendar date to year and day in year (in a Julian\n*  calendar aligned to the 20th/21st century Gregorian calendar).\n*\n*  (Includes century default feature:  use sla_CLYD for years\n*   before 100AD.)\n*\n*  Given:\n*     IY,IM,ID   int    year, month, day in Gregorian calendar\n*                       (year may optionally omit the century)\n*  Returned:\n*     NY         int    year (re-aligned Julian calendar)\n*     ND         int    day in year (1 = January 1st)\n*     J          int    status:\n*                         0 = OK\n*                         1 = bad year (before -4711)\n*                         2 = bad month\n*                         3 = bad day (but conversion performed)\n*\n*  Notes:\n*\n*  1  This routine exists to support the low-precision routines\n*     sla_EARTH, sla_MOON and sla_ECOR.\n*\n*  2  Between 1900 March 1 and 2100 February 28 it returns answers\n*     which are consistent with the ordinary Gregorian calendar.\n*     Outside this range there will be a discrepancy which increases\n*     by one day for every non-leap century year.\n*\n*  3  Years in the range 50-99 are interpreted as 1950-1999, and\n*     years in the range 00-49 are interpreted as 2000-2049.\n*\n*  Called:  sla_CLYD\n*\n*  P.T.Wallace   Starlink   23 November 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\calyd.f\n\"\"\"", "sla_cc2s": "\"\"\"\n*     - - - - -\n*      C C 2 S\n*     - - - - -\n*\n*  Cartesian to spherical coordinates (single precision)\n*\n*  Given:\n*     V     r(3)   x,y,z vector\n*\n*  Returned:\n*     A,B   r      spherical coordinates in radians\n*\n*  The spherical coordinates are longitude (+ve anticlockwise looking\n*  from the +ve latitude pole) and latitude.  The Cartesian coordinates\n*  are right handed, with the x axis at zero longitude and latitude, and\n*  the z axis at the +ve latitude pole.\n*\n*  If V is null, zero A and B are returned.  At either pole, zero A is\n*  returned.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cc2s.f\n\"\"\"", "sla_cc62s": "\"\"\"\n*     - - - - - -\n*      C C 6 2 S\n*     - - - - - -\n*\n*  Conversion of position & velocity in Cartesian coordinates\n*  to spherical coordinates (single precision)\n*\n*  Given:\n*     V      r(6)   Cartesian position & velocity vector\n*\n*  Returned:\n*     A      r      longitude (radians)\n*     B      r      latitude (radians)\n*     R      r      radial coordinate\n*     AD     r      longitude derivative (radians per unit time)\n*     BD     r      latitude derivative (radians per unit time)\n*     RD     r      radial derivative\n*\n*  P.T.Wallace   Starlink   28 April 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cc62s.f\n\"\"\"", "sla_cd2tf": "\"\"\"\n*     - - - - - -\n*      C D 2 T F\n*     - - - - - -\n*\n*  Convert an interval in days into hours, minutes, seconds\n*\n*  (single precision)\n*\n*  Given:\n*     NDP       int      number of decimal places of seconds\n*     DAYS      real     interval in days\n*\n*  Returned:\n*     SIGN      char     '+' or '-'\n*     IHMSF     int(4)   hours, minutes, seconds, fraction\n*\n*  Notes:\n*\n*     1)  NDP less than zero is interpreted as zero.\n*\n*     2)  The largest useful value for NDP is determined by the size of\n*         DAYS, the format of REAL floating-point numbers on the target\n*         machine, and the risk of overflowing IHMSF(4).  On some\n*         architectures, for DAYS up to 1.0, the available floating-\n*         point precision corresponds roughly to NDP=3.  This is well\n*         below the ultimate limit of NDP=9 set by the capacity of a\n*         typical 32-bit IHMSF(4).\n*\n*     3)  The absolute value of DAYS may exceed 1.0.  In cases where it\n*         does not, it is up to the caller to test for and handle the\n*         case where DAYS is very nearly 1.0 and rounds up to 24 hours,\n*         by testing for IHMSF(1)=24 and setting IHMSF(1-4) to zero.\n*\n*  Called:  sla_DD2TF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cd2tf.f\n\"\"\"", "sla_cldj": "\"\"\"\n*     - - - - -\n*      C L D J\n*     - - - - -\n*\n*  Gregorian Calendar to Modified Julian Date\n*\n*  Given:\n*     IY,IM,ID     int    year, month, day in Gregorian calendar\n*\n*  Returned:\n*     DJM          dp     modified Julian Date (JD-2400000.5) for 0 hrs\n*     J            int    status:\n*                           0 = OK\n*                           1 = bad year   (MJD not computed)\n*                           2 = bad month  (MJD not computed)\n*                           3 = bad day    (MJD computed)\n*\n*  The year must be -4699 (i.e. 4700BC) or later.\n*\n*  The algorithm is adapted from Hatcher 1984 (QJRAS 25, 53-55).\n*\n*  Last revision:   27 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cldj.f\n\"\"\"", "sla_clyd": "\"\"\"\n*     - - - - -\n*      C L Y D\n*     - - - - -\n*\n*  Gregorian calendar to year and day in year (in a Julian calendar\n*  aligned to the 20th/21st century Gregorian calendar).\n*\n*  Given:\n*     IY,IM,ID   i    year, month, day in Gregorian calendar\n*\n*  Returned:\n*     NY         i    year (re-aligned Julian calendar)\n*     ND         i    day in year (1 = January 1st)\n*     JSTAT      i    status:\n*                       0 = OK\n*                       1 = bad year (before -4711)\n*                       2 = bad month\n*                       3 = bad day (but conversion performed)\n*\n*  Notes:\n*\n*  1  This routine exists to support the low-precision routines\n*     sla_EARTH, sla_MOON and sla_ECOR.\n*\n*  2  Between 1900 March 1 and 2100 February 28 it returns answers\n*     which are consistent with the ordinary Gregorian calendar.\n*     Outside this range there will be a discrepancy which increases\n*     by one day for every non-leap century year.\n*\n*  3  The essence of the algorithm is first to express the Gregorian\n*     date as a Julian Day Number and then to convert this back to\n*     a Julian calendar date, with day-in-year instead of month and\n*     day.  See 12.92-1 and 12.95-1 in the reference.\n*\n*  Reference:  Explanatory Supplement to the Astronomical Almanac,\n*              ed P.K.Seidelmann, University Science Books (1992),\n*              p604-606.\n*\n*  P.T.Wallace   Starlink   26 November 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\clyd.f\n\"\"\"", "sla_combn": "\"\"\"\n*     - - - - - -\n*      C O M B N\n*     - - - - - -\n*\n*  Generate the next combination, a subset of a specified size chosen\n*  from a specified number of items.\n*\n*  Given:\n*     NSEL     i        number of items (subset size)\n*     NCAND    i        number of candidates (set size)\n*\n*  Given and returned:\n*     LIST     i(NSEL)  latest combination, LIST(1)=0 to initialize\n*\n*  Returned:\n*     J        i        status: -1 = illegal NSEL or NCAND\n*                                0 = OK\n*                               +1 = no more combinations available\n*\n*  Notes:\n*\n*  1) NSEL and NCAND must both be at least 1, and NSEL must be less\n*     than or equal to NCAND.\n*\n*  2) This routine returns, in the LIST array, a subset of NSEL integers\n*     chosen from the range 1 to NCAND inclusive, in ascending order.\n*     Before calling the routine for the first time, the caller must set\n*     the first element of the LIST array to zero (any value less than 1\n*     will do) to cause initialization.\n*\n*  2) The first combination to be generated is:\n*\n*        LIST(1)=1, LIST(2)=2, ..., LIST(NSEL)=NSEL\n*\n*     This is also the combination returned for the \"finished\" (J=1)\n*     case.\n*\n*     The final permutation to be generated is:\n*\n*        LIST(1)=NCAND, LIST(2)=NCAND-1, ..., LIST(NSEL)=NCAND-NSEL+1\n*\n*  3) If the \"finished\" (J=1) status is ignored, the routine\n*     continues to deliver combinations, the pattern repeating\n*     every NCAND!/(NSEL!*(NCAND-NSEL)!) calls.\n*\n*  4) The algorithm is by R.F.Warren-Smith (private communication).\n*\n*  P.T.Wallace   Starlink   25 August 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\combn.f\n\"\"\"", "sla_cr2af": "\"\"\"\n*     - - - - - -\n*      C R 2 A F\n*     - - - - - -\n*\n*  Convert an angle in radians into degrees, arcminutes, arcseconds\n*  (single precision)\n*\n*  Given:\n*     NDP       int      number of decimal places of arcseconds\n*     ANGLE     real     angle in radians\n*\n*  Returned:\n*     SIGN      char     '+' or '-'\n*     IDMSF     int(4)   degrees, arcminutes, arcseconds, fraction\n*\n*  Notes:\n*\n*     1)  NDP less than zero is interpreted as zero.\n*\n*     2)  The largest useful value for NDP is determined by the size of\n*         ANGLE, the format of REAL floating-point numbers on the target\n*         machine, and the risk of overflowing IDMSF(4).  On some\n*         architectures, for ANGLE up to 2pi, the available floating-\n*         point precision corresponds roughly to NDP=3.  This is well\n*         below the ultimate limit of NDP=9 set by the capacity of a\n*         typical 32-bit IDMSF(4).\n*\n*     3)  The absolute value of ANGLE may exceed 2pi.  In cases where it\n*         does not, it is up to the caller to test for and handle the\n*         case where ANGLE is very nearly 2pi and rounds up to 360 deg,\n*         by testing for IDMSF(1)=360 and setting IDMSF(1-4) to zero.\n*\n*  Called:  sla_CD2TF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cr2af.f\n\"\"\"", "sla_cr2tf": "\"\"\"\n*     - - - - - -\n*      C R 2 T F\n*     - - - - - -\n*\n*  Convert an angle in radians into hours, minutes, seconds\n*  (single precision)\n*\n*  Given:\n*     NDP       int      number of decimal places of seconds\n*     ANGLE     real     angle in radians\n*\n*  Returned:\n*     SIGN      char     '+' or '-'\n*     IHMSF     int(4)   hours, minutes, seconds, fraction\n*\n*  Notes:\n*\n*  1)  NDP less than zero is interpreted as zero.\n*\n*  2)  The largest useful value for NDP is determined by the size of\n*      ANGLE, the format of REAL floating-point numbers on the target\n*      machine, and the risk of overflowing IHMSF(4).  On some\n*      architectures, for ANGLE up to 2pi, the available floating-point\n*      precision corresponds roughly to NDP=3.  This is well below\n*      the ultimate limit of NDP=9 set by the capacity of a typical\n*      32-bit IHMSF(4).\n*\n*  3)  The absolute value of ANGLE may exceed 2pi.  In cases where it\n*      does not, it is up to the caller to test for and handle the\n*      case where ANGLE is very nearly 2pi and rounds up to 24 hours,\n*      by testing for IHMSF(1)=24 and setting IHMSF(1-4) to zero.\n*\n*  Called:  sla_CD2TF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cr2tf.f\n\"\"\"", "sla_cs2c": "\"\"\"\n*     - - - - -\n*      C S 2 C\n*     - - - - -\n*\n*  Spherical coordinates to direction cosines (single precision)\n*\n*  Given:\n*     A,B      real      spherical coordinates in radians\n*                           (RA,Dec), (long,lat) etc.\n*\n*  Returned:\n*     V        real(3)   x,y,z unit vector\n*\n*  The spherical coordinates are longitude (+ve anticlockwise looking\n*  from the +ve latitude pole) and latitude.  The Cartesian coordinates\n*  are right handed, with the x axis at zero longitude and latitude, and\n*  the z axis at the +ve latitude pole.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cs2c.f\n\"\"\"", "sla_cs2c6": "\"\"\"\n*     - - - - - -\n*      C S 2 C 6\n*     - - - - - -\n*\n*  Conversion of position & velocity in spherical coordinates\n*  to Cartesian coordinates (single precision)\n*\n*  Given:\n*     A     r      longitude (radians)\n*     B     r      latitude (radians)\n*     R     r      radial coordinate\n*     AD    r      longitude derivative (radians per unit time)\n*     BD    r      latitude derivative (radians per unit time)\n*     RD    r      radial derivative\n*\n*  Returned:\n*     V     r(6)   Cartesian position & velocity vector\n*\n*  Last revision:   11 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\cs2c6.f\n\"\"\"", "sla_ctf2d": "\"\"\"\n*     - - - - - -\n*      C T F 2 D\n*     - - - - - -\n*\n*  Convert hours, minutes, seconds to days (single precision)\n*\n*  Given:\n*     IHOUR       int       hours\n*     IMIN        int       minutes\n*     SEC         real      seconds\n*\n*  Returned:\n*     DAYS        real      interval in days\n*     J           int       status:  0 = OK\n*                                    1 = IHOUR outside range 0-23\n*                                    2 = IMIN outside range 0-59\n*                                    3 = SEC outside range 0-59.999...\n*\n*  Notes:\n*\n*  1)  The result is computed even if any of the range checks\n*      fail.\n*\n*  2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   November 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ctf2d.f\n\"\"\"", "sla_ctf2r": "\"\"\"\n*     - - - - - -\n*      C T F 2 R\n*     - - - - - -\n*\n*  Convert hours, minutes, seconds to radians (single precision)\n*\n*  Given:\n*     IHOUR       int       hours\n*     IMIN        int       minutes\n*     SEC         real      seconds\n*\n*  Returned:\n*     RAD         real      angle in radians\n*     J           int       status:  0 = OK\n*                                    1 = IHOUR outside range 0-23\n*                                    2 = IMIN outside range 0-59\n*                                    3 = SEC outside range 0-59.999...\n*\n*  Called:\n*     sla_CTF2D\n*\n*  Notes:\n*\n*  1)  The result is computed even if any of the range checks\n*      fail.\n*\n*  2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   November 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ctf2r.f\n\"\"\"", "sla_daf2r": "\"\"\"\n*     - - - - - -\n*      D A F 2 R\n*     - - - - - -\n*\n*  Convert degrees, arcminutes, arcseconds to radians\n*  (double precision)\n*\n*  Given:\n*     IDEG        int       degrees\n*     IAMIN       int       arcminutes\n*     ASEC        dp        arcseconds\n*\n*  Returned:\n*     RAD         dp        angle in radians\n*     J           int       status:  0 = OK\n*                                    1 = IDEG outside range 0-359\n*                                    2 = IAMIN outside range 0-59\n*                                    3 = ASEC outside range 0-59.999...\n*\n*  Notes:\n*     1)  The result is computed even if any of the range checks\n*         fail.\n*     2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\daf2r.f\n\"\"\"", "sla_dafin": "\"\"\"\n*     - - - - - -\n*      D A F I N\n*     - - - - - -\n*\n*  Sexagesimal character string to angle (double precision)\n*\n*  Given:\n*     STRING  c*(*)   string containing deg, arcmin, arcsec fields\n*     IPTR      i     pointer to start of decode (1st = 1)\n*\n*  Returned:\n*     IPTR      i     advanced past the decoded angle\n*     A         d     angle in radians\n*     J         i     status:  0 = OK\n*                             +1 = default, A unchanged\n*                             -1 = bad degrees      )\n*                             -2 = bad arcminutes   )  (note 3)\n*                             -3 = bad arcseconds   )\n*\n*  Example:\n*\n*    argument    before                           after\n*\n*    STRING      '-57 17 44.806  12 34 56.7'      unchanged\n*    IPTR        1                                16 (points to 12...)\n*    A           ?                                -1.00000D0\n*    J           ?                                0\n*\n*    A further call to sla_DAFIN, without adjustment of IPTR, will\n*    decode the second angle, 12deg 34min 56.7sec.\n*\n*  Notes:\n*\n*     1)  The first three \"fields\" in STRING are degrees, arcminutes,\n*         arcseconds, separated by spaces or commas.  The degrees field\n*         may be signed, but not the others.  The decoding is carried\n*         out by the DFLTIN routine and is free-format.\n*\n*     2)  Successive fields may be absent, defaulting to zero.  For\n*         zero status, the only combinations allowed are degrees alone,\n*         degrees and arcminutes, and all three fields present.  If all\n*         three fields are omitted, a status of +1 is returned and A is\n*         unchanged.  In all other cases A is changed.\n*\n*     3)  Range checking:\n*\n*           The degrees field is not range checked.  However, it is\n*           expected to be integral unless the other two fields are absent.\n*\n*           The arcminutes field is expected to be 0-59, and integral if\n*           the arcseconds field is present.  If the arcseconds field\n*           is absent, the arcminutes is expected to be 0-59.9999...\n*\n*           The arcseconds field is expected to be 0-59.9999...\n*\n*     4)  Decoding continues even when a check has failed.  Under these\n*         circumstances the field takes the supplied value, defaulting\n*         to zero, and the result A is computed and returned.\n*\n*     5)  Further fields after the three expected ones are not treated\n*         as an error.  The pointer IPTR is left in the correct state\n*         for further decoding with the present routine or with DFLTIN\n*         etc. See the example, above.\n*\n*     6)  If STRING contains hours, minutes, seconds instead of degrees\n*         etc, or if the required units are turns (or days) instead of\n*         radians, the result A should be multiplied as follows:\n*\n*           for        to obtain    multiply\n*           STRING     A in         A by\n*\n*           d ' \"      radians      1       =  1D0\n*           d ' \"      turns        1/2pi   =  0.1591549430918953358D0\n*           h m s      radians      15      =  15D0\n*           h m s      days         15/2pi  =  2.3873241463784300365D0\n*\n*  Called:  sla_DFLTIN\n*\n*  P.T.Wallace   Starlink   1 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dafin.f\n\"\"\"", "sla_dat": "\"\"\"\n*     - - - -\n*      D A T\n*     - - - -\n*\n*  Increment to be applied to Coordinated Universal Time UTC to give\n*  International Atomic Time TAI (double precision)\n*\n*  Given:\n*     UTC      d      UTC date as a modified JD (JD-2400000.5)\n*\n*  Result:  TAI-UTC in seconds\n*\n*  Notes:\n*\n*  1  The UTC is specified to be a date rather than a time to indicate\n*     that care needs to be taken not to specify an instant which lies\n*     within a leap second.  Though in most cases UTC can include the\n*     fractional part, correct behaviour on the day of a leap second\n*     can only be guaranteed up to the end of the second 23:59:59.\n*\n*  2  For epochs from 1961 January 1 onwards, the expressions from the\n*     file ftp://maia.usno.navy.mil/ser7/tai-utc.dat are used.\n*\n*  3  The 5ms time step at 1961 January 1 is taken from 2.58.1 (p87) of\n*     the 1992 Explanatory Supplement.\n*\n*  4  UTC began at 1960 January 1.0 (JD 2436934.5) and it is improper\n*     to call the routine with an earlier epoch.  However, if this\n*     is attempted, the TAI-UTC expression for the year 1960 is used.\n*\n*\n*     :-----------------------------------------:\n*     :                                         :\n*     :                IMPORTANT                :\n*     :                                         :\n*     :  This routine must be updated on each   :\n*     :     occasion that a leap second is      :\n*     :                announced                :\n*     :                                         :\n*     :  Latest leap second:  2016 December 31  :\n*     :                                         :\n*     :-----------------------------------------:\n*\n*  Last revision:   03 October 2016\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the\n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dat.f\n\"\"\"", "sla_dav2m": "\"\"\"\n*     - - - - - -\n*      D A V 2 M\n*     - - - - - -\n*\n*  Form the rotation matrix corresponding to a given axial vector.\n*  (double precision)\n*\n*  A rotation matrix describes a rotation about some arbitrary axis,\n*  called the Euler axis.  The \"axial vector\" supplied to this routine\n*  has the same direction as the Euler axis, and its magnitude is the\n*  amount of rotation in radians.\n*\n*  Given:\n*    AXVEC  d(3)     axial vector (radians)\n*\n*  Returned:\n*    RMAT   d(3,3)   rotation matrix\n*\n*  If AXVEC is null, the unit matrix is returned.\n*\n*  The reference frame rotates clockwise as seen looking along\n*  the axial vector from the origin.\n*\n*  Last revision:   26 November 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dav2m.f\n\"\"\"", "sla_dbear": "\"\"\"\n*     - - - - - -\n*      D B E A R\n*     - - - - - -\n*\n*  Bearing (position angle) of one point on a sphere relative to another\n*  (double precision)\n*\n*  Given:\n*     A1,B1    d    spherical coordinates of one point\n*     A2,B2    d    spherical coordinates of the other point\n*\n*  (The spherical coordinates are RA,Dec, Long,Lat etc, in radians.)\n*\n*  The result is the bearing (position angle), in radians, of point\n*  A2,B2 as seen from point A1,B1.  It is in the range +/- pi.  If\n*  A2,B2 is due east of A1,B1 the bearing is +pi/2.  Zero is returned\n*  if the two points are coincident.\n*\n*  P.T.Wallace   Starlink   23 March 1991\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dbear.f\n\"\"\"", "sla_dbjin": "\"\"\"\n*     - - - - - -\n*      D B J I N\n*     - - - - - -\n*\n*  Convert free-format input into double precision floating point,\n*  using DFLTIN but with special syntax extensions.\n*\n*  The purpose of the syntax extensions is to help cope with mixed\n*  FK4 and FK5 data.  In addition to the syntax accepted by DFLTIN,\n*  the following two extensions are recognized by DBJIN:\n*\n*     1)  A valid non-null field preceded by the character 'B'\n*         (or 'b') is accepted.\n*\n*     2)  A valid non-null field preceded by the character 'J'\n*         (or 'j') is accepted.\n*\n*  The calling program is notified of the incidence of either of these\n*  extensions through an supplementary status argument.  The rest of\n*  the arguments are as for DFLTIN.\n*\n*  Given:\n*     STRING      char       string containing field to be decoded\n*     NSTRT       int        pointer to 1st character of field in string\n*\n*  Returned:\n*     NSTRT       int        incremented\n*     DRESLT      double     result\n*     J1          int        DFLTIN status: -1 = -OK\n*                                            0 = +OK\n*                                           +1 = null field\n*                                           +2 = error\n*     J2          int        syntax flag:  0 = normal DFLTIN syntax\n*                                         +1 = 'B' or 'b'\n*                                         +2 = 'J' or 'j'\n*\n*  Called:  sla_DFLTIN\n*\n*  For details of the basic syntax, see sla_DFLTIN.\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dbjin.f\n\"\"\"", "sla_dc62s": "\"\"\"\n*     - - - - - -\n*      D C 6 2 S\n*     - - - - - -\n*\n*  Conversion of position & velocity in Cartesian coordinates\n*  to spherical coordinates (double precision)\n*\n*  Given:\n*     V      d(6)   Cartesian position & velocity vector\n*\n*  Returned:\n*     A      d      longitude (radians)\n*     B      d      latitude (radians)\n*     R      d      radial coordinate\n*     AD     d      longitude derivative (radians per unit time)\n*     BD     d      latitude derivative (radians per unit time)\n*     RD     d      radial derivative\n*\n*  P.T.Wallace   Starlink   28 April 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dc62s.f\n\"\"\"", "sla_dcc2s": "\"\"\"\n*     - - - - - -\n*      D C C 2 S\n*     - - - - - -\n*\n*  Cartesian to spherical coordinates (double precision)\n*\n*  Given:\n*     V     d(3)   x,y,z vector\n*\n*  Returned:\n*     A,B   d      spherical coordinates in radians\n*\n*  The spherical coordinates are longitude (+ve anticlockwise looking\n*  from the +ve latitude pole) and latitude.  The Cartesian coordinates\n*  are right handed, with the x axis at zero longitude and latitude, and\n*  the z axis at the +ve latitude pole.\n*\n*  If V is null, zero A and B are returned.  At either pole, zero A is\n*  returned.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dcc2s.f\n\"\"\"", "sla_dcmpf": "\"\"\"\n*     - - - - - -\n*      D C M P F\n*     - - - - - -\n*\n*  Decompose an [X,Y] linear fit into its constituent parameters:\n*  zero points, scales, nonperpendicularity and orientation.\n*\n*  Given:\n*     COEFFS  d(6)      transformation coefficients (see note)\n*\n*  Returned:\n*     XZ       d        x zero point\n*     YZ       d        y zero point\n*     XS       d        x scale\n*     YS       d        y scale\n*     PERP     d        nonperpendicularity (radians)\n*     ORIENT   d        orientation (radians)\n*\n*  Called:  sla_DRANGE\n*\n*  The model relates two sets of [X,Y] coordinates as follows.\n*  Naming the elements of COEFFS:\n*\n*     COEFFS(1) = A\n*     COEFFS(2) = B\n*     COEFFS(3) = C\n*     COEFFS(4) = D\n*     COEFFS(5) = E\n*     COEFFS(6) = F\n*\n*  the model transforms coordinates [X1,Y1] into coordinates\n*  [X2,Y2] as follows:\n*\n*     X2 = A + B*X1 + C*Y1\n*     Y2 = D + E*X1 + F*Y1\n*\n*  The transformation can be decomposed into four steps:\n*\n*     1)  Zero points:\n*\n*             x' = XZ + X1\n*             y' = YZ + Y1\n*\n*     2)  Scales:\n*\n*             x'' = XS*x'\n*             y'' = YS*y'\n*\n*     3)  Nonperpendicularity:\n*\n*             x''' = cos(PERP/2)*x'' + sin(PERP/2)*y''\n*             y''' = sin(PERP/2)*x'' + cos(PERP/2)*y''\n*\n*     4)  Orientation:\n*\n*             X2 = cos(ORIENT)*x''' + sin(ORIENT)*y'''\n*             Y2 =-sin(ORIENT)*y''' + cos(ORIENT)*y'''\n*\n*  See also sla_FITXY, sla_PXY, sla_INVF, sla_XY2XY\n*\n*  P.T.Wallace   Starlink   19 December 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dcmpf.f\n\"\"\"", "sla_dcs2c": "\"\"\"\n*     - - - - - -\n*      D C S 2 C\n*     - - - - - -\n*\n*  Spherical coordinates to direction cosines (double precision)\n*\n*  Given:\n*     A,B       d      spherical coordinates in radians\n*                         (RA,Dec), (long,lat) etc.\n*\n*  Returned:\n*     V         d(3)   x,y,z unit vector\n*\n*  The spherical coordinates are longitude (+ve anticlockwise looking\n*  from the +ve latitude pole) and latitude.  The Cartesian coordinates\n*  are right handed, with the x axis at zero longitude and latitude, and\n*  the z axis at the +ve latitude pole.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dcs2c.f\n\"\"\"", "sla_dd2tf": "\"\"\"\n*     - - - - - -\n*      D D 2 T F\n*     - - - - - -\n*\n*  Convert an interval in days into hours, minutes, seconds\n*  (double precision)\n*\n*  Given:\n*     NDP      i      number of decimal places of seconds\n*     DAYS     d      interval in days\n*\n*  Returned:\n*     SIGN     c      '+' or '-'\n*     IHMSF    i(4)   hours, minutes, seconds, fraction\n*\n*  Notes:\n*\n*     1)  NDP less than zero is interpreted as zero.\n*\n*     2)  The largest useful value for NDP is determined by the size\n*         of DAYS, the format of DOUBLE PRECISION floating-point numbers\n*         on the target machine, and the risk of overflowing IHMSF(4).\n*         On some architectures, for DAYS up to 1D0, the available\n*         floating-point precision corresponds roughly to NDP=12.\n*         However, the practical limit is NDP=9, set by the capacity of\n*         a typical 32-bit IHMSF(4).\n*\n*     3)  The absolute value of DAYS may exceed 1D0.  In cases where it\n*         does not, it is up to the caller to test for and handle the\n*         case where DAYS is very nearly 1D0 and rounds up to 24 hours,\n*         by testing for IHMSF(1)=24 and setting IHMSF(1-4) to zero.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dd2tf.f\n\"\"\"", "sla_de2h": "\"\"\"\n*     - - - - -\n*      D E 2 H\n*     - - - - -\n*\n*  Equatorial to horizon coordinates:  HA,Dec to Az,El\n*\n*  (double precision)\n*\n*  Given:\n*     HA      d     hour angle\n*     DEC     d     declination\n*     PHI     d     observatory latitude\n*\n*  Returned:\n*     AZ      d     azimuth\n*     EL      d     elevation\n*\n*  Notes:\n*\n*  1)  All the arguments are angles in radians.\n*\n*  2)  Azimuth is returned in the range 0-2pi;  north is zero,\n*      and east is +pi/2.  Elevation is returned in the range\n*      +/-pi/2.\n*\n*  3)  The latitude must be geodetic.  In critical applications,\n*      corrections for polar motion should be applied.\n*\n*  4)  In some applications it will be important to specify the\n*      correct type of hour angle and declination in order to\n*      produce the required type of azimuth and elevation.  In\n*      particular, it may be important to distinguish between\n*      elevation as affected by refraction, which would\n*      require the \"observed\" HA,Dec, and the elevation\n*      in vacuo, which would require the \"topocentric\" HA,Dec.\n*      If the effects of diurnal aberration can be neglected, the\n*      \"apparent\" HA,Dec may be used instead of the topocentric\n*      HA,Dec.\n*\n*  5)  No range checking of arguments is carried out.\n*\n*  6)  In applications which involve many such calculations, rather\n*      than calling the present routine it will be more efficient to\n*      use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude, and (for tracking a star)\n*      sine and cosine of declination.\n*\n*  P.T.Wallace   Starlink   9 July 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\de2h.f\n\"\"\"", "sla_deuler": "\"\"\"\n*     - - - - - - -\n*      D E U L E R\n*     - - - - - - -\n*\n*  Form a rotation matrix from the Euler angles - three successive\n*  rotations about specified Cartesian axes (double precision)\n*\n*  Given:\n*    ORDER   c*(*)   specifies about which axes the rotations occur\n*    PHI     d       1st rotation (radians)\n*    THETA   d       2nd rotation (   \"   )\n*    PSI     d       3rd rotation (   \"   )\n*\n*  Returned:\n*    RMAT    d(3,3)  rotation matrix\n*\n*  A rotation is positive when the reference frame rotates\n*  anticlockwise as seen looking towards the origin from the\n*  positive region of the specified axis.\n*\n*  The characters of ORDER define which axes the three successive\n*  rotations are about.  A typical value is 'ZXZ', indicating that\n*  RMAT is to become the direction cosine matrix corresponding to\n*  rotations of the reference frame through PHI radians about the\n*  old Z-axis, followed by THETA radians about the resulting X-axis,\n*  then PSI radians about the resulting Z-axis.\n*\n*  The axis names can be any of the following, in any order or\n*  combination:  X, Y, Z, uppercase or lowercase, 1, 2, 3.  Normal\n*  axis labelling/numbering conventions apply;  the xyz (=123)\n*  triad is right-handed.  Thus, the 'ZXZ' example given above\n*  could be written 'zxz' or '313' (or even 'ZxZ' or '3xZ').  ORDER\n*  is terminated by length or by the first unrecognized character.\n*\n*  Fewer than three rotations are acceptable, in which case the later\n*  angle arguments are ignored.  If all rotations are zero, the\n*  identity matrix is produced.\n*\n*  P.T.Wallace   Starlink   23 May 1997\n*\n*  Copyright (C) 1997 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\deuler.f\n\"\"\"", "sla_dfltin": "\"\"\"\n*     - - - - - - -\n*      D F L T I N\n*     - - - - - - -\n*\n*  Convert free-format input into double precision floating point\n*\n*  Given:\n*     STRING     c     string containing number to be decoded\n*     NSTRT      i     pointer to where decoding is to start\n*     DRESLT     d     current value of result\n*\n*  Returned:\n*     NSTRT      i      advanced to next number\n*     DRESLT     d      result\n*     JFLAG      i      status: -1 = -OK, 0 = +OK, 1 = null, 2 = error\n*\n*  Notes:\n*\n*     1     The reason DFLTIN has separate OK status values for +\n*           and - is to enable minus zero to be detected.   This is\n*           of crucial importance when decoding mixed-radix numbers.\n*           For example, an angle expressed as deg, arcmin, arcsec\n*           may have a leading minus sign but a zero degrees field.\n*\n*     2     A TAB is interpreted as a space, and lowercase characters\n*           are interpreted as uppercase.\n*\n*     3     The basic format is the sequence of fields #^.^@#^, where\n*           # is a sign character + or -, ^ means a string of decimal\n*           digits, and @, which indicates an exponent, means D or E.\n*           Various combinations of these fields can be omitted, and\n*           embedded blanks are permissible in certain places.\n*\n*     4     Spaces:\n*\n*             .  Leading spaces are ignored.\n*\n*             .  Embedded spaces are allowed only after +, -, D or E,\n*                and after the decomal point if the first sequence of\n*                digits is absent.\n*\n*             .  Trailing spaces are ignored;  the first signifies\n*                end of decoding and subsequent ones are skipped.\n*\n*     5     Delimiters:\n*\n*             .  Any character other than +,-,0-9,.,D,E or space may be\n*                used to signal the end of the number and terminate\n*                decoding.\n*\n*             .  Comma is recognized by DFLTIN as a special case;  it\n*                is skipped, leaving the pointer on the next character.\n*                See 13, below.\n*\n*     6     Both signs are optional.  The default is +.\n*\n*     7     The mantissa ^.^ defaults to 1.\n*\n*     8     The exponent @#^ defaults to D0.\n*\n*     9     The strings of decimal digits may be of any length.\n*\n*     10    The decimal point is optional for whole numbers.\n*\n*     11    A \"null result\" occurs when the string of characters being\n*           decoded does not begin with +,-,0-9,.,D or E, or consists\n*           entirely of spaces.  When this condition is detected, JFLAG\n*           is set to 1 and DRESLT is left untouched.\n*\n*     12    NSTRT = 1 for the first character in the string.\n*\n*     13    On return from DFLTIN, NSTRT is set ready for the next\n*           decode - following trailing blanks and any comma.  If a\n*           delimiter other than comma is being used, NSTRT must be\n*           incremented before the next call to DFLTIN, otherwise\n*           all subsequent calls will return a null result.\n*\n*     14    Errors (JFLAG=2) occur when:\n*\n*             .  a +, -, D or E is left unsatisfied;  or\n*\n*             .  the decimal point is present without at least\n*                one decimal digit before or after it;  or\n*\n*             .  an exponent more than 100 has been presented.\n*\n*     15    When an error has been detected, NSTRT is left\n*           pointing to the character following the last\n*           one used before the error came to light.  This\n*           may be after the point at which a more sophisticated\n*           program could have detected the error.  For example,\n*           DFLTIN does not detect that '1D999' is unacceptable\n*           (on a computer where this is so) until the entire number\n*           has been decoded.\n*\n*     16    Certain highly unlikely combinations of mantissa &\n*           exponent can cause arithmetic faults during the\n*           decode, in some cases despite the fact that they\n*           together could be construed as a valid number.\n*\n*     17    Decoding is left to right, one pass.\n*\n*     18    See also FLOTIN and INTIN\n*\n*  Called:  sla__IDCHF\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dfltin.f\n\"\"\"", "sla_dh2e": "\"\"\"\n*     - - - - -\n*      D E 2 H\n*     - - - - -\n*\n*  Horizon to equatorial coordinates:  Az,El to HA,Dec\n*\n*  (double precision)\n*\n*  Given:\n*     AZ      d     azimuth\n*     EL      d     elevation\n*     PHI     d     observatory latitude\n*\n*  Returned:\n*     HA      d     hour angle\n*     DEC     d     declination\n*\n*  Notes:\n*\n*  1)  All the arguments are angles in radians.\n*\n*  2)  The sign convention for azimuth is north zero, east +pi/2.\n*\n*  3)  HA is returned in the range +/-pi.  Declination is returned\n*      in the range +/-pi/2.\n*\n*  4)  The latitude is (in principle) geodetic.  In critical\n*      applications, corrections for polar motion should be applied.\n*\n*  5)  In some applications it will be important to specify the\n*      correct type of elevation in order to produce the required\n*      type of HA,Dec.  In particular, it may be important to\n*      distinguish between the elevation as affected by refraction,\n*      which will yield the \"observed\" HA,Dec, and the elevation\n*      in vacuo, which will yield the \"topocentric\" HA,Dec.  If the\n*      effects of diurnal aberration can be neglected, the\n*      topocentric HA,Dec may be used as an approximation to the\n*      \"apparent\" HA,Dec.\n*\n*  6)  No range checking of arguments is done.\n*\n*  7)  In applications which involve many such calculations, rather\n*      than calling the present routine it will be more efficient to\n*      use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude.\n*\n*  P.T.Wallace   Starlink   21 February 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dh2e.f\n\"\"\"", "sla_dimxv": "\"\"\"\n*     - - - - - -\n*      D I M X V\n*     - - - - - -\n*\n*  Performs the 3-D backward unitary transformation:\n*\n*     vector VB = (inverse of matrix DM) * vector VA\n*\n*  (double precision)\n*\n*  (n.b.  the matrix must be unitary, as this routine assumes that\n*   the inverse and transpose are identical)\n*\n*  Given:\n*     DM       dp(3,3)    matrix\n*     VA       dp(3)      vector\n*\n*  Returned:\n*     VB       dp(3)      result vector\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dimxv.f\n\"\"\"", "sla_djcal": "\"\"\"\n*     - - - - - -\n*      D J C A L\n*     - - - - - -\n*\n*  Modified Julian Date to Gregorian Calendar, expressed\n*  in a form convenient for formatting messages (namely\n*  rounded to a specified precision, and with the fields\n*  stored in a single array)\n*\n*  Given:\n*     NDP      i      number of decimal places of days in fraction\n*     DJM      d      modified Julian Date (JD-2400000.5)\n*\n*  Returned:\n*     IYMDF    i(4)   year, month, day, fraction in Gregorian\n*                     calendar\n*     J        i      status:  nonzero = out of range\n*\n*  Any date after 4701BC March 1 is accepted.\n*\n*  NDP should be 4 or less if internal overflows are to be avoided\n*  on machines which use 32-bit integers.\n*\n*  The algorithm is adapted from Hatcher 1984 (QJRAS 25, 53-55).\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\djcal.f\n\"\"\"", "sla_djcl": "\"\"\"\n*     - - - - -\n*      D J C L\n*     - - - - -\n*\n*  Modified Julian Date to Gregorian year, month, day,\n*  and fraction of a day.\n*\n*  Given:\n*     DJM      dp     modified Julian Date (JD-2400000.5)\n*\n*  Returned:\n*     IY       int    year\n*     IM       int    month\n*     ID       int    day\n*     FD       dp     fraction of day\n*     J        int    status:\n*                       0 = OK\n*                      -1 = unacceptable date (before 4701BC March 1)\n*\n*  The algorithm is adapted from Hatcher 1984 (QJRAS 25, 53-55).\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\djcl.f\n\"\"\"", "sla_dm2av": "\"\"\"\n*     - - - - - -\n*      D M 2 A V\n*     - - - - - -\n*\n*  From a rotation matrix, determine the corresponding axial vector.\n*  (double precision)\n*\n*  A rotation matrix describes a rotation about some arbitrary axis,\n*  called the Euler axis.  The \"axial vector\" returned by this routine\n*  has the same direction as the Euler axis, and its magnitude is the\n*  amount of rotation in radians.  (The magnitude and direction can be\n*  separated by means of the routine sla_DVN.)\n*\n*  Given:\n*    RMAT   d(3,3)   rotation matrix\n*\n*  Returned:\n*    AXVEC  d(3)     axial vector (radians)\n*\n*  The reference frame rotates clockwise as seen looking along\n*  the axial vector from the origin.\n*\n*  If RMAT is null, so is the result.\n*\n*  Last revision:   26 November 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dm2av.f\n\"\"\"", "sla_dmat": "\"\"\"\n*     - - - - -\n*      D M A T\n*     - - - - -\n*\n*  Matrix inversion & solution of simultaneous equations\n*  (double precision)\n*\n*  For the set of n simultaneous equations in n unknowns:\n*     A.Y = X\n*\n*  where:\n*     A is a non-singular N x N matrix\n*     Y is the vector of N unknowns\n*     X is the known vector\n*\n*  DMATRX computes:\n*     the inverse of matrix A\n*     the determinant of matrix A\n*     the vector of N unknowns\n*\n*  Arguments:\n*\n*     symbol  type   dimension           before              after\n*\n*       N      i                    no. of unknowns       unchanged\n*       A      d      (N,N)             matrix             inverse\n*       Y      d       (N)            known vector      solution vector\n*       D      d                           -             determinant\n*     * JF     i                           -           singularity flag\n*       IW     i       (N)                 -              workspace\n*\n*  * JF is the singularity flag.  If the matrix is non-singular, JF=0\n*    is returned.  If the matrix is singular, JF=-1 & D=0D0 are\n*    returned.  In the latter case, the contents of array A on return\n*    are undefined.\n*\n*  Algorithm:\n*     Gaussian elimination with partial pivoting.\n*\n*  Speed:\n*     Very fast.\n*\n*  Accuracy:\n*     Fairly accurate - errors 1 to 4 times those of routines optimized\n*     for accuracy.\n*\n*  P.T.Wallace   Starlink   4 December 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dmat.f\n\"\"\"", "sla_dmoon": "\"\"\"\n*     - - - - - -\n*      D M O O N\n*     - - - - - -\n*\n*  Approximate geocentric position and velocity of the Moon\n*  (double precision)\n*\n*  Given:\n*     DATE       D       TDB (loosely ET) as a Modified Julian Date\n*                                                    (JD-2400000.5)\n*\n*  Returned:\n*     PV         D(6)    Moon x,y,z,xdot,ydot,zdot, mean equator and\n*                                         equinox of date (AU, AU/s)\n*\n*  Notes:\n*\n*  1  This routine is a full implementation of the algorithm\n*     published by Meeus (see reference).\n*\n*  2  Meeus quotes accuracies of 10 arcsec in longitude, 3 arcsec in\n*     latitude and 0.2 arcsec in HP (equivalent to about 20 km in\n*     distance).  Comparison with JPL DE200 over the interval\n*     1960-2025 gives RMS errors of 3.7 arcsec and 83 mas/hour in\n*     longitude, 2.3 arcsec and 48 mas/hour in latitude, 11 km\n*     and 81 mm/s in distance.  The maximum errors over the same\n*     interval are 18 arcsec and 0.50 arcsec/hour in longitude,\n*     11 arcsec and 0.24 arcsec/hour in latitude, 40 km and 0.29 m/s\n*     in distance.\n*\n*  3  The original algorithm is expressed in terms of the obsolete\n*     timescale Ephemeris Time.  Either TDB or TT can be used, but\n*     not UT without incurring significant errors (30 arcsec at\n*     the present time) due to the Moon's 0.5 arcsec/sec movement.\n*\n*  4  The algorithm is based on pre IAU 1976 standards.  However,\n*     the result has been moved onto the new (FK5) equinox, an\n*     adjustment which is in any case much smaller than the\n*     intrinsic accuracy of the procedure.\n*\n*  5  Velocity is obtained by a complete analytical differentiation\n*     of the Meeus model.\n*\n*  Reference:\n*     Meeus, l'Astronomie, June 1984, p348.\n*\n*  P.T.Wallace   Starlink   22 January 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dmoon.f\n\"\"\"", "sla_dmxm": "\"\"\"\n*     - - - - -\n*      D M X M\n*     - - - - -\n*\n*  Product of two 3x3 matrices:\n*\n*      matrix C  =  matrix A  x  matrix B\n*\n*  (double precision)\n*\n*  Given:\n*      A      dp(3,3)        matrix\n*      B      dp(3,3)        matrix\n*\n*  Returned:\n*      C      dp(3,3)        matrix result\n*\n*  To comply with the ANSI Fortran 77 standard, A, B and C must\n*  be different arrays.  However, the routine is coded so as to\n*  work properly on many platforms even if this rule is violated.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dmxm.f\n\"\"\"", "sla_dmxv": "\"\"\"\n*     - - - - -\n*      D M X V\n*     - - - - -\n*\n*  Performs the 3-D forward unitary transformation:\n*\n*     vector VB = matrix DM * vector VA\n*\n*  (double precision)\n*\n*  Given:\n*     DM       dp(3,3)    matrix\n*     VA       dp(3)      vector\n*\n*  Returned:\n*     VB       dp(3)      result vector\n*\n*  To comply with the ANSI Fortran 77 standard, VA and VB must be\n*  different arrays.  However, the routine is coded so as to work\n*  properly on many platforms even if this rule is violated.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dmxv.f\n\"\"\"", "sla_dpav": "\"\"\"\n*     - - - - -\n*      D P A V\n*     - - - - -\n*\n*  Position angle of one celestial direction with respect to another.\n*\n*  (double precision)\n*\n*  Given:\n*     V1    d(3)    direction cosines of one point\n*     V2    d(3)    direction cosines of the other point\n*\n*  (The coordinate frames correspond to RA,Dec, Long,Lat etc.)\n*\n*  The result is the bearing (position angle), in radians, of point\n*  V2 with respect to point V1.  It is in the range +/- pi.  The\n*  sense is such that if V2 is a small distance east of V1, the\n*  bearing is about +pi/2.  Zero is returned if the two points\n*  are coincident.\n*\n*  V1 and V2 need not be unit vectors.\n*\n*  The routine sla_DBEAR performs an equivalent function except\n*  that the points are specified in the form of spherical\n*  coordinates.\n*\n*  Last revision:   16 March 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dpav.f\n\"\"\"", "sla_dr2af": "\"\"\"\n*     - - - - - -\n*      D R 2 A F\n*     - - - - - -\n*\n*  Convert an angle in radians to degrees, arcminutes, arcseconds\n*  (double precision)\n*\n*  Given:\n*     NDP      i      number of decimal places of arcseconds\n*     ANGLE    d      angle in radians\n*\n*  Returned:\n*     SIGN     c      '+' or '-'\n*     IDMSF    i(4)   degrees, arcminutes, arcseconds, fraction\n*\n*  Notes:\n*\n*     1)  NDP less than zero is interpreted as zero.\n*\n*     2)  The largest useful value for NDP is determined by the size\n*         of ANGLE, the format of DOUBLE PRECISION floating-point\n*         numbers on the target machine, and the risk of overflowing\n*         IDMSF(4).  On some architectures, for ANGLE up to 2pi, the\n*         available floating-point precision corresponds roughly to\n*         NDP=12.  However, the practical limit is NDP=9, set by the\n*         capacity of a typical 32-bit IDMSF(4).\n*\n*     3)  The absolute value of ANGLE may exceed 2pi.  In cases where it\n*         does not, it is up to the caller to test for and handle the\n*         case where ANGLE is very nearly 2pi and rounds up to 360 deg,\n*         by testing for IDMSF(1)=360 and setting IDMSF(1-4) to zero.\n*\n*  Called:  sla_DD2TF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dr2af.f\n\"\"\"", "sla_dr2tf": "\"\"\"\n*     - - - - - -\n*      D R 2 T F\n*     - - - - - -\n*\n*  Convert an angle in radians to hours, minutes, seconds\n*  (double precision)\n*\n*  Given:\n*     NDP      i      number of decimal places of seconds\n*     ANGLE    d      angle in radians\n*\n*  Returned:\n*     SIGN     c      '+' or '-'\n*     IHMSF    i(4)   hours, minutes, seconds, fraction\n*\n*  Notes:\n*\n*     1)  NDP less than zero is interpreted as zero.\n*\n*     2)  The largest useful value for NDP is determined by the size\n*         of ANGLE, the format of DOUBLE PRECISION floating-point\n*         numbers on the target machine, and the risk of overflowing\n*         IHMSF(4).  On some architectures, for ANGLE up to 2pi, the\n*         available floating-point precision corresponds roughly to\n*         NDP=12.  However, the practical limit is NDP=9, set by the\n*         capacity of a typical 32-bit IHMSF(4).\n*\n*     3)  The absolute value of ANGLE may exceed 2pi.  In cases where it\n*         does not, it is up to the caller to test for and handle the\n*         case where ANGLE is very nearly 2pi and rounds up to 24 hours,\n*         by testing for IHMSF(1)=24 and setting IHMSF(1-4) to zero.\n*\n*  Called:  sla_DD2TF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dr2tf.f\n\"\"\"", "sla_drange": "\"\"\"\n*     - - - - - - -\n*      D R A N G E\n*     - - - - - - -\n*\n*  Normalize angle into range +/- pi  (double precision)\n*\n*  Given:\n*     ANGLE     dp      the angle in radians\n*\n*  The result (double precision) is ANGLE expressed in the range +/- pi.\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\drange.f\n\"\"\"", "sla_dranrm": "\"\"\"\n*     - - - - - - -\n*      D R A N R M\n*     - - - - - - -\n*\n*  Normalize angle into range 0-2 pi  (double precision)\n*\n*  Given:\n*     ANGLE     dp      the angle in radians\n*\n*  The result is ANGLE expressed in the range 0-2 pi.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dranrm.f\n\"\"\"", "sla_ds2c6": "\"\"\"\n*     - - - - - -\n*      D S 2 C 6\n*     - - - - - -\n*\n*  Conversion of position & velocity in spherical coordinates\n*  to Cartesian coordinates\n*\n*  (double precision)\n*\n*  Given:\n*     A     dp      longitude (radians)\n*     B     dp      latitude (radians)\n*     R     dp      radial coordinate\n*     AD    dp      longitude derivative (radians per unit time)\n*     BD    dp      latitude derivative (radians per unit time)\n*     RD    dp      radial derivative\n*\n*  Returned:\n*     V     dp(6)   Cartesian position & velocity vector\n*\n*  P.T.Wallace   Starlink   10 July 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ds2c6.f\n\"\"\"", "sla_ds2tp": "\"\"\"\n*     - - - - - -\n*      D S 2 T P\n*     - - - - - -\n*\n*  Projection of spherical coordinates onto tangent plane:\n*  \"gnomonic\" projection - \"standard coordinates\" (double precision)\n*\n*  Given:\n*     RA,DEC      dp   spherical coordinates of point to be projected\n*     RAZ,DECZ    dp   spherical coordinates of tangent point\n*\n*  Returned:\n*     XI,ETA      dp   rectangular coordinates on tangent plane\n*     J           int  status:   0 = OK, star on tangent plane\n*                                1 = error, star too far from axis\n*                                2 = error, antistar on tangent plane\n*                                3 = error, antistar too far from axis\n*\n*  P.T.Wallace   Starlink   18 July 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ds2tp.f\n\"\"\"", "sla_dsep": "\"\"\"\n*     - - - - -\n*      D S E P\n*     - - - - -\n*\n*  Angle between two points on a sphere.\n*\n*  (double precision)\n*\n*  Given:\n*     A1,B1    d     spherical coordinates of one point\n*     A2,B2    d     spherical coordinates of the other point\n*\n*  (The spherical coordinates are [RA,Dec], [Long,Lat] etc, in radians.)\n*\n*  The result is the angle, in radians, between the two points.  It\n*  is always positive.\n*\n*  Called:  sla_DCS2C, sla_DSEPV\n*\n*  Last revision:   7 May 2000\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dsep.f\n\"\"\"", "sla_dsepv": "\"\"\"\n*     - - - - - -\n*      D S E P V\n*     - - - - - -\n*\n*  Angle between two vectors.\n*\n*  (double precision)\n*\n*  Given:\n*     V1      d(3)    first vector\n*     V2      d(3)    second vector\n*\n*  The result is the angle, in radians, between the two vectors.  It\n*  is always positive.\n*\n*  Notes:\n*\n*  1  There is no requirement for the vectors to be unit length.\n*\n*  2  If either vector is null, zero is returned.\n*\n*  3  The simplest formulation would use dot product alone.  However,\n*     this would reduce the accuracy for angles near zero and pi.  The\n*     algorithm uses both cross product and dot product, which maintains\n*     accuracy for all sizes of angle.\n*\n*  Called:  sla_DVXV, sla_DVN, sla_DVDV\n*\n*  Last revision:   14 June 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dsepv.f\n\"\"\"", "sla_dt": "\"\"\"\n*     - - -\n*      D T\n*     - - -\n*\n*  Estimate the offset between dynamical time and Universal Time\n*  for a given historical epoch.\n*\n*  Given:\n*     EPOCH       d        (Julian) epoch (e.g. 1850D0)\n*\n*  The result is a rough estimate of ET-UT (after 1984, TT-UT) at\n*  the given epoch, in seconds.\n*\n*  Notes:\n*\n*  1  Depending on the epoch, one of three parabolic approximations\n*     is used:\n*\n*      before 979    Stephenson & Morrison's 390 BC to AD 948 model\n*      979 to 1708   Stephenson & Morrison's 948 to 1600 model\n*      after 1708    McCarthy & Babcock's post-1650 model\n*\n*     The breakpoints are chosen to ensure continuity:  they occur\n*     at places where the adjacent models give the same answer as\n*     each other.\n*\n*  2  The accuracy is modest, with errors of up to 20 sec during\n*     the interval since 1650, rising to perhaps 30 min by 1000 BC.\n*     Comparatively accurate values from AD 1600 are tabulated in\n*     the Astronomical Almanac (see section K8 of the 1995 AA).\n*\n*  3  The use of double-precision for both argument and result is\n*     purely for compatibility with other SLALIB time routines.\n*\n*  4  The models used are based on a lunar tidal acceleration value\n*     of -26.00 arcsec per century.\n*\n*  Reference:  Explanatory Supplement to the Astronomical Almanac,\n*              ed P.K.Seidelmann, University Science Books (1992),\n*              section 2.553, p83.  This contains references to\n*              the Stephenson & Morrison and McCarthy & Babcock\n*              papers.\n*\n*  P.T.Wallace   Starlink   1 March 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dt.f\n\"\"\"", "sla_dtf2d": "\"\"\"\n*     - - - - - -\n*      D T F 2 D\n*     - - - - - -\n*\n*  Convert hours, minutes, seconds to days (double precision)\n*\n*  Given:\n*     IHOUR       int       hours\n*     IMIN        int       minutes\n*     SEC         dp        seconds\n*\n*  Returned:\n*     DAYS        dp        interval in days\n*     J           int       status:  0 = OK\n*                                    1 = IHOUR outside range 0-23\n*                                    2 = IMIN outside range 0-59\n*                                    3 = SEC outside range 0-59.999...\n*\n*  Notes:\n*\n*     1)  The result is computed even if any of the range checks fail.\n*\n*     2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   July 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtf2d.f\n\"\"\"", "sla_dtf2r": "\"\"\"\n*     - - - - - -\n*      D T F 2 R\n*     - - - - - -\n*\n*  Convert hours, minutes, seconds to radians (double precision)\n*\n*  Given:\n*     IHOUR       int       hours\n*     IMIN        int       minutes\n*     SEC         dp        seconds\n*\n*  Returned:\n*     RAD         dp        angle in radians\n*     J           int       status:  0 = OK\n*                                    1 = IHOUR outside range 0-23\n*                                    2 = IMIN outside range 0-59\n*                                    3 = SEC outside range 0-59.999...\n*\n*  Called:\n*     sla_DTF2D\n*\n*  Notes:\n*\n*     1)  The result is computed even if any of the range checks fail.\n*\n*     2)  The sign must be dealt with outside this routine.\n*\n*  P.T.Wallace   Starlink   July 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtf2r.f\n\"\"\"", "sla_dtp2s": "\"\"\"\n*     - - - - - -\n*      D T P 2 S\n*     - - - - - -\n*\n*  Transform tangent plane coordinates into spherical\n*  (double precision)\n*\n*  Given:\n*     XI,ETA      dp   tangent plane rectangular coordinates\n*     RAZ,DECZ    dp   spherical coordinates of tangent point\n*\n*  Returned:\n*     RA,DEC      dp   spherical coordinates (0-2pi,+/-pi/2)\n*\n*  Called:        sla_DRANRM\n*\n*  P.T.Wallace   Starlink   24 July 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtp2s.f\n\"\"\"", "sla_dtp2v": "\"\"\"\n*     - - - - - -\n*      D T P 2 V\n*     - - - - - -\n*\n*  Given the tangent-plane coordinates of a star and the direction\n*  cosines of the tangent point, determine the direction cosines\n*  of the star.\n*\n*  (double precision)\n*\n*  Given:\n*     XI,ETA    d       tangent plane coordinates of star\n*     V0        d(3)    direction cosines of tangent point\n*\n*  Returned:\n*     V         d(3)    direction cosines of star\n*\n*  Notes:\n*\n*  1  If vector V0 is not of unit length, the returned vector V will\n*     be wrong.\n*\n*  2  If vector V0 points at a pole, the returned vector V will be\n*     based on the arbitrary assumption that the RA of the tangent\n*     point is zero.\n*\n*  3  This routine is the Cartesian equivalent of the routine sla_DTP2S.\n*\n*  P.T.Wallace   Starlink   11 February 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtp2v.f\n\"\"\"", "sla_dtps2c": "\"\"\"\n*     - - - - - - -\n*      D T P S 2 C\n*     - - - - - - -\n*\n*  From the tangent plane coordinates of a star of known RA,Dec,\n*  determine the RA,Dec of the tangent point.\n*\n*  (double precision)\n*\n*  Given:\n*     XI,ETA      d    tangent plane rectangular coordinates\n*     RA,DEC      d    spherical coordinates\n*\n*  Returned:\n*     RAZ1,DECZ1  d    spherical coordinates of tangent point, solution 1\n*     RAZ2,DECZ2  d    spherical coordinates of tangent point, solution 2\n*     N           i    number of solutions:\n*                        0 = no solutions returned (note 2)\n*                        1 = only the first solution is useful (note 3)\n*                        2 = both solutions are useful (note 3)\n*\n*  Notes:\n*\n*  1  The RAZ1 and RAZ2 values are returned in the range 0-2pi.\n*\n*  2  Cases where there is no solution can only arise near the poles.\n*     For example, it is clearly impossible for a star at the pole\n*     itself to have a non-zero XI value, and hence it is\n*     meaningless to ask where the tangent point would have to be\n*     to bring about this combination of XI and DEC.\n*\n*  3  Also near the poles, cases can arise where there are two useful\n*     solutions.  The argument N indicates whether the second of the\n*     two solutions returned is useful.  N=1 indicates only one useful\n*     solution, the usual case;  under these circumstances, the second\n*     solution corresponds to the \"over-the-pole\" case, and this is\n*     reflected in the values of RAZ2 and DECZ2 which are returned.\n*\n*  4  The DECZ1 and DECZ2 values are returned in the range +/-pi, but\n*     in the usual, non-pole-crossing, case, the range is +/-pi/2.\n*\n*  5  This routine is the spherical equivalent of the routine sla_DTPV2C.\n*\n*  Called:  sla_DRANRM\n*\n*  P.T.Wallace   Starlink   5 June 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtps2c.f\n\"\"\"", "sla_dtpv2c": "\"\"\"\n*     - - - - - - -\n*      D T P V 2 C\n*     - - - - - - -\n*\n*  Given the tangent-plane coordinates of a star and its direction\n*  cosines, determine the direction cosines of the tangent-point.\n*\n*  (double precision)\n*\n*  Given:\n*     XI,ETA    d       tangent plane coordinates of star\n*     V         d(3)    direction cosines of star\n*\n*  Returned:\n*     V01       d(3)    direction cosines of tangent point, solution 1\n*     V02       d(3)    direction cosines of tangent point, solution 2\n*     N         i       number of solutions:\n*                         0 = no solutions returned (note 2)\n*                         1 = only the first solution is useful (note 3)\n*                         2 = both solutions are useful (note 3)\n*\n*  Notes:\n*\n*  1  The vector V must be of unit length or the result will be wrong.\n*\n*  2  Cases where there is no solution can only arise near the poles.\n*     For example, it is clearly impossible for a star at the pole\n*     itself to have a non-zero XI value, and hence it is meaningless\n*     to ask where the tangent point would have to be.\n*\n*  3  Also near the poles, cases can arise where there are two useful\n*     solutions.  The argument N indicates whether the second of the\n*     two solutions returned is useful.  N=1 indicates only one useful\n*     solution, the usual case;  under these circumstances, the second\n*     solution can be regarded as valid if the vector V02 is interpreted\n*     as the \"over-the-pole\" case.\n*\n*  4  This routine is the Cartesian equivalent of the routine sla_DTPS2C.\n*\n*  P.T.Wallace   Starlink   5 June 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtpv2c.f\n\"\"\"", "sla_dtt": "\"\"\"\n*     - - - -\n*      D T T\n*     - - - -\n*\n*  Increment to be applied to Coordinated Universal Time UTC to give\n*  Terrestrial Time TT (formerly Ephemeris Time ET)\n*\n*  (double precision)\n*\n*  Given:\n*     UTC      d      UTC date as a modified JD (JD-2400000.5)\n*\n*  Result:  TT-UTC in seconds\n*\n*  Notes:\n*\n*  1  The UTC is specified to be a date rather than a time to indicate\n*     that care needs to be taken not to specify an instant which lies\n*     within a leap second.  Though in most cases UTC can include the\n*     fractional part, correct behaviour on the day of a leap second\n*     can only be guaranteed up to the end of the second 23:59:59.\n*\n*  2  Pre 1972 January 1 a fixed value of 10 + ET-TAI is returned.\n*\n*  3  See also the routine sla_DT, which roughly estimates ET-UT for\n*     historical epochs.\n*\n*  Called:  sla_DAT\n*\n*  P.T.Wallace   Starlink   6 December 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dtt.f\n\"\"\"", "sla_dv2tp": "\"\"\"\n*     - - - - - -\n*      D V 2 T P\n*     - - - - - -\n*\n*  Given the direction cosines of a star and of the tangent point,\n*  determine the star's tangent-plane coordinates.\n*\n*  (double precision)\n*\n*  Given:\n*     V         d(3)    direction cosines of star\n*     V0        d(3)    direction cosines of tangent point\n*\n*  Returned:\n*     XI,ETA    d       tangent plane coordinates of star\n*     J         i       status:   0 = OK\n*                                 1 = error, star too far from axis\n*                                 2 = error, antistar on tangent plane\n*                                 3 = error, antistar too far from axis\n*\n*  Notes:\n*\n*  1  If vector V0 is not of unit length, or if vector V is of zero\n*     length, the results will be wrong.\n*\n*  2  If V0 points at a pole, the returned XI,ETA will be based on the\n*     arbitrary assumption that the RA of the tangent point is zero.\n*\n*  3  This routine is the Cartesian equivalent of the routine sla_DS2TP.\n*\n*  P.T.Wallace   Starlink   27 November 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dv2tp.f\n\"\"\"", "sla_dvdv": "\"\"\"\n*     - - - - -\n*      D V D V\n*     - - - - -\n*\n*  Scalar product of two 3-vectors  (double precision)\n*\n*  Given:\n*      VA      dp(3)     first vector\n*      VB      dp(3)     second vector\n*\n*  The result is the scalar product VA.VB (double precision)\n*\n*  P.T.Wallace   Starlink   November 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dvdv.f\n\"\"\"", "sla_dvn": "\"\"\"\n*     - - - -\n*      D V N\n*     - - - -\n*\n*  Normalizes a 3-vector also giving the modulus (double precision)\n*\n*  Given:\n*     V       d(3)      vector\n*\n*  Returned:\n*     UV      d(3)      unit vector in direction of V\n*     VM      d         modulus of V\n*\n*  Notes:\n*\n*  1  If the modulus of V is zero, UV is set to zero as well.\n*\n*  2  To comply with the ANSI Fortran 77 standard, V and UV must be\n*     different arrays.  However, the routine is coded so as to work\n*     properly on most platforms even if this rule is violated.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dvn.f\n\"\"\"", "sla_dvxv": "\"\"\"\n*     - - - - -\n*      D V X V\n*     - - - - -\n*\n*  Vector product of two 3-vectors  (double precision)\n*\n*  Given:\n*      VA      dp(3)     first vector\n*      VB      dp(3)     second vector\n*\n*  Returned:\n*      VC      dp(3)     vector result\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\dvxv.f\n\"\"\"", "sla_e2h": "\"\"\"\n*     - - - -\n*      E 2 H\n*     - - - -\n*\n*  Equatorial to horizon coordinates:  HA,Dec to Az,El\n*\n*  (single precision)\n*\n*  Given:\n*     HA      r     hour angle\n*     DEC     r     declination\n*     PHI     r     observatory latitude\n*\n*  Returned:\n*     AZ      r     azimuth\n*     EL      r     elevation\n*\n*  Notes:\n*\n*  1)  All the arguments are angles in radians.\n*\n*  2)  Azimuth is returned in the range 0-2pi;  north is zero,\n*      and east is +pi/2.  Elevation is returned in the range\n*      +/-pi/2.\n*\n*  3)  The latitude must be geodetic.  In critical applications,\n*      corrections for polar motion should be applied.\n*\n*  4)  In some applications it will be important to specify the\n*      correct type of hour angle and declination in order to\n*      produce the required type of azimuth and elevation.  In\n*      particular, it may be important to distinguish between\n*      elevation as affected by refraction, which would\n*      require the \"observed\" HA,Dec, and the elevation\n*      in vacuo, which would require the \"topocentric\" HA,Dec.\n*      If the effects of diurnal aberration can be neglected, the\n*      \"apparent\" HA,Dec may be used instead of the topocentric\n*      HA,Dec.\n*\n*  5)  No range checking of arguments is carried out.\n*\n*  6)  In applications which involve many such calculations, rather\n*      than calling the present routine it will be more efficient to\n*      use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude, and (for tracking a star)\n*      sine and cosine of declination.\n*\n*  P.T.Wallace   Starlink   9 July 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\e2h.f\n\"\"\"", "sla_earth": "\"\"\"\n*     - - - - - -\n*      E A R T H\n*     - - - - - -\n*\n*  Approximate heliocentric position and velocity of the Earth\n*\n*  Given:\n*     IY       I       year\n*     ID       I       day in year (1 = Jan 1st)\n*     FD       R       fraction of day\n*\n*  Returned:\n*     PV       R(6)    Earth position & velocity vector\n*\n*  Notes:\n*\n*  1  The date and time is TDB (loosely ET) in a Julian calendar\n*     which has been aligned to the ordinary Gregorian\n*     calendar for the interval 1900 March 1 to 2100 February 28.\n*     The year and day can be obtained by calling sla_CALYD or\n*     sla_CLYD.\n*\n*  2  The Earth heliocentric 6-vector is mean equator and equinox\n*     of date.  Position part, PV(1-3), is in AU;  velocity part,\n*     PV(4-6), is in AU/sec.\n*\n*  3  Max/RMS errors 1950-2050:\n*       13/5 E-5 AU = 19200/7600 km in position\n*       47/26 E-10 AU/s = 0.0070/0.0039 km/s in speed\n*\n*  4  More accurate results are obtainable with the routines sla_EVP\n*     and sla_EPV.\n*\n*  Last revision:   5 April 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\earth.f\n\"\"\"", "sla_ecleq": "\"\"\"\n*     - - - - - -\n*      E C L E Q\n*     - - - - - -\n*\n*  Transformation from ecliptic coordinates to\n*  J2000.0 equatorial coordinates (double precision)\n*\n*  Given:\n*     DL,DB       dp      ecliptic longitude and latitude\n*                           (mean of date, IAU 1980 theory, radians)\n*     DATE        dp      TDB (loosely ET) as Modified Julian Date\n*                                              (JD-2400000.5)\n*  Returned:\n*     DR,DD       dp      J2000.0 mean RA,Dec (radians)\n*\n*  Called:\n*     sla_DCS2C, sla_ECMAT, sla_DIMXV, sla_PREC, sla_EPJ, sla_DCC2S,\n*     sla_DRANRM, sla_DRANGE\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ecleq.f\n\"\"\"", "sla_ecmat": "\"\"\"\n*     - - - - - -\n*      E C M A T\n*     - - - - - -\n*\n*  Form the equatorial to ecliptic rotation matrix - IAU 1980 theory\n*  (double precision)\n*\n*  Given:\n*     DATE     dp         TDB (loosely ET) as Modified Julian Date\n*                                            (JD-2400000.5)\n*  Returned:\n*     RMAT     dp(3,3)    matrix\n*\n*  Reference:\n*     Murray,C.A., Vectorial Astrometry, section 4.3.\n*\n*  Note:\n*    The matrix is in the sense   V(ecl)  =  RMAT * V(equ);  the\n*    equator, equinox and ecliptic are mean of date.\n*\n*  Called:  sla_DEULER\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ecmat.f\n\"\"\"", "sla_ecor": "\"\"\"\n*     - - - - -\n*      E C O R\n*     - - - - -\n*\n*  Component of Earth orbit velocity and heliocentric\n*  light time in a given direction (single precision)\n*\n*  Given:\n*     RM,DM    real    mean RA, Dec of date (radians)\n*     IY       int     year\n*     ID       int     day in year (1 = Jan 1st)\n*     FD       real    fraction of day\n*\n*  Returned:\n*     RV       real    component of Earth orbital velocity (km/sec)\n*     TL       real    component of heliocentric light time (sec)\n*\n*  Notes:\n*\n*  1  The date and time is TDB (loosely ET) in a Julian calendar\n*     which has been aligned to the ordinary Gregorian\n*     calendar for the interval 1900 March 1 to 2100 February 28.\n*     The year and day can be obtained by calling sla_CALYD or\n*     sla_CLYD.\n*\n*  2  Sign convention:\n*\n*     The velocity component is +ve when the Earth is receding from\n*     the given point on the sky.  The light time component is +ve\n*     when the Earth lies between the Sun and the given point on\n*     the sky.\n*\n*  3  Accuracy:\n*\n*     The velocity component is usually within 0.004 km/s of the\n*     correct value and is never in error by more than 0.007 km/s.\n*     The error in light time correction is about 0.03s at worst,\n*     but is usually better than 0.01s. For applications requiring\n*     higher accuracy, see the sla_EVP and sla_EPV routines.\n*\n*  Called:  sla_EARTH, sla_CS2C, sla_VDV\n*\n*  Last revision:   5 April 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ecor.f\n\"\"\"", "sla_eg50": "\"\"\"\n*     - - - - -\n*      E G 5 0\n*     - - - - -\n*\n*  Transformation from B1950.0 'FK4' equatorial coordinates to\n*  IAU 1958 galactic coordinates (double precision)\n*\n*  Given:\n*     DR,DD       dp       B1950.0 'FK4' RA,Dec\n*\n*  Returned:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DMXV, sla_DCC2S, sla_SUBET, sla_DRANRM, sla_DRANGE\n*\n*  Note:\n*     The equatorial coordinates are B1950.0 'FK4'.  Use the\n*     routine sla_EQGAL if conversion from J2000.0 coordinates\n*     is required.\n*\n*  Reference:\n*     Blaauw et al, Mon.Not.R.Astron.Soc.,121,123 (1960)\n*\n*  P.T.Wallace   Starlink   5 September 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\eg50.f\n\"\"\"", "sla_el2ue": "\"\"\"\n*     - - - - - -\n*      E L 2 U E\n*     - - - - - -\n*\n*  Transform conventional osculating orbital elements into \"universal\"\n*  form.\n*\n*  Given:\n*     DATE    d      epoch (TT MJD) of osculation (Note 3)\n*     JFORM   i      choice of element set (1-3, Note 6)\n*     EPOCH   d      epoch (TT MJD) of the elements\n*     ORBINC  d      inclination (radians)\n*     ANODE   d      longitude of the ascending node (radians)\n*     PERIH   d      longitude or argument of perihelion (radians)\n*     AORQ    d      mean distance or perihelion distance (AU)\n*     E       d      eccentricity\n*     AORL    d      mean anomaly or longitude (radians, JFORM=1,2 only)\n*     DM      d      daily motion (radians, JFORM=1 only)\n*\n*  Returned:\n*     U       d(13)  universal orbital elements (Note 1)\n*\n*               (1)  combined mass (M+m)\n*               (2)  total energy of the orbit (alpha)\n*               (3)  reference (osculating) epoch (t0)\n*             (4-6)  position at reference epoch (r0)\n*             (7-9)  velocity at reference epoch (v0)\n*              (10)  heliocentric distance at reference epoch\n*              (11)  r0.v0\n*              (12)  date (t)\n*              (13)  universal eccentric anomaly (psi) of date, approx\n*\n*     JSTAT   i      status:  0 = OK\n*                            -1 = illegal JFORM\n*                            -2 = illegal E\n*                            -3 = illegal AORQ\n*                            -4 = illegal DM\n*                            -5 = numerical error\n*\n*  Called:  sla_UE2PV, sla_PV2UE\n*\n*  Notes\n*\n*  1  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  2  The companion routine is sla_UE2PV.  This takes the set of numbers\n*     that the present routine outputs and uses them to derive the\n*     object's position and velocity.  A single prediction requires one\n*     call to the present routine followed by one call to sla_UE2PV;\n*     for convenience, the two calls are packaged as the routine\n*     sla_PLANEL.  Multiple predictions may be made by again calling the\n*     present routine once, but then calling sla_UE2PV multiple times,\n*     which is faster than multiple calls to sla_PLANEL.\n*\n*  3  DATE is the epoch of osculation.  It is in the TT timescale\n*     (formerly Ephemeris Time, ET) and is a Modified Julian Date\n*     (JD-2400000.5).\n*\n*  4  The supplied orbital elements are with respect to the J2000\n*     ecliptic and equinox.  The position and velocity parameters\n*     returned in the array U are with respect to the mean equator and\n*     equinox of epoch J2000, and are for the perihelion prior to the\n*     specified epoch.\n*\n*  5  The universal elements returned in the array U are in canonical\n*     units (solar masses, AU and canonical days).\n*\n*  6  Three different element-format options are available:\n*\n*     Option JFORM=1, suitable for the major planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = longitude of perihelion, curly pi (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e (range 0 to <1)\n*     AORL   = mean longitude L (radians)\n*     DM     = daily motion (radians)\n*\n*     Option JFORM=2, suitable for minor planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e (range 0 to <1)\n*     AORL   = mean anomaly M (radians)\n*\n*     Option JFORM=3, suitable for comets:\n*\n*     EPOCH  = epoch of perihelion (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = perihelion distance, q (AU)\n*     E      = eccentricity, e (range 0 to 10)\n*\n*  7  Unused elements (DM for JFORM=2, AORL and DM for JFORM=3) are\n*     not accessed.\n*\n*  8  The algorithm was originally adapted from the EPHSLA program of\n*     D.H.P.Jones (private communication, 1996).  The method is based\n*     on Stumpff's Universal Variables.\n*\n*  Reference:  Everhart & Pitkin, Am.J.Phys. 51, 712 (1983).\n*\n*  Last revision:   8 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\el2ue.f\n\"\"\"", "sla_epb": "\"\"\"\n*     - - - -\n*      E P B\n*     - - - -\n*\n*  Conversion of Modified Julian Date to Besselian Epoch\n*  (double precision)\n*\n*  Given:\n*     DATE     dp       Modified Julian Date (JD - 2400000.5)\n*\n*  The result is the Besselian Epoch.\n*\n*  Reference:\n*     Lieske,J.H., 1979. Astron.Astrophys.,73,282.\n*\n*  P.T.Wallace   Starlink   February 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epb.f\n\"\"\"", "sla_epb2d": "\"\"\"\n*     - - - - - -\n*      E P B 2 D\n*     - - - - - -\n*\n*  Conversion of Besselian Epoch to Modified Julian Date\n*  (double precision)\n*\n*  Given:\n*     EPB      dp       Besselian Epoch\n*\n*  The result is the Modified Julian Date (JD - 2400000.5).\n*\n*  Reference:\n*     Lieske,J.H., 1979. Astron.Astrophys.,73,282.\n*\n*  P.T.Wallace   Starlink   February 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epb2d.f\n\"\"\"", "sla_epco": "\"\"\"\n*     - - - - -\n*      E P C O\n*     - - - - -\n*\n*  Convert an epoch into the appropriate form - 'B' or 'J'\n*\n*  Given:\n*     K0    char    form of result:  'B'=Besselian, 'J'=Julian\n*     K     char    form of given epoch:  'B' or 'J'\n*     E     dp      epoch\n*\n*  Called:  sla_EPB, sla_EPJ2D, sla_EPJ, sla_EPB2D\n*\n*  Notes:\n*\n*     1) The result is always either equal to or very close to\n*        the given epoch E.  The routine is required only in\n*        applications where punctilious treatment of heterogeneous\n*        mixtures of star positions is necessary.\n*\n*     2) K0 and K are not validated.  They are interpreted as follows:\n*\n*        o  If K0 and K are the same the result is E.\n*        o  If K0 is 'B' or 'b' and K isn't, the conversion is J to B.\n*        o  In all other cases, the conversion is B to J.\n*\n*        Note that K0 and K won't match if their cases differ.\n*\n*  P.T.Wallace   Starlink   5 September 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epco.f\n\"\"\"", "sla_epj": "\"\"\"\n*     - - - -\n*      E P J\n*     - - - -\n*\n*  Conversion of Modified Julian Date to Julian Epoch (double precision)\n*\n*  Given:\n*     DATE     dp       Modified Julian Date (JD - 2400000.5)\n*\n*  The result is the Julian Epoch.\n*\n*  Reference:\n*     Lieske,J.H., 1979. Astron.Astrophys.,73,282.\n*\n*  P.T.Wallace   Starlink   February 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epj.f\n\"\"\"", "sla_epj2d": "\"\"\"\n*     - - - - - -\n*      E P J 2 D\n*     - - - - - -\n*\n*  Conversion of Julian Epoch to Modified Julian Date (double precision)\n*\n*  Given:\n*     EPJ      dp       Julian Epoch\n*\n*  The result is the Modified Julian Date (JD - 2400000.5).\n*\n*  Reference:\n*     Lieske,J.H., 1979. Astron.Astrophys.,73,282.\n*\n*  P.T.Wallace   Starlink   February 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epj2d.f\n\"\"\"", "sla_epv": "\"\"\"\n*  - - - -\n*   E P V\n*  - - - -\n*\n*  Earth position and velocity, heliocentric and barycentric, with\n*  respect to the Barycentric Celestial Reference System.\n*\n*  Given:\n*     DATE      d         date, TDB Modified Julian Date (Note 1)\n*\n*  Returned:\n*     PH        d(3)      heliocentric Earth position (AU)\n*     VH        d(3)      heliocentric Earth velocity (AU,AU/day)\n*     PB        d(3)      barycentric Earth position (AU)\n*     VB        d(3)      barycentric Earth velocity (AU/day)\n*\n*  Notes:\n*\n*  1) The date is TDB as an MJD (=JD-2400000.5).  TT can be used instead\n*     of TDB in most applications.\n*\n*  2) On return, the arrays PH, VH, PV, PB contain the following:\n*\n*        PH(1)    x       }\n*        PH(2)    y       } heliocentric position, AU\n*        PH(3)    z       }\n*\n*        VH(1)    xdot    }\n*        VH(2)    ydot    } heliocentric velocity, AU/d\n*        VH(3)    zdot    }\n*\n*        PB(1)    x       }\n*        PB(2)    y       } barycentric position, AU\n*        PB(3)    z       }\n*\n*        VB(1)    xdot    }\n*        VB(2)    ydot    } barycentric velocity, AU/d\n*        VB(3)    zdot    }\n*\n*     The vectors are with respect to the Barycentric Celestial\n*     Reference System (BCRS); velocities are in AU per TDB day.\n*\n*  3) The routine is a SIMPLIFIED SOLUTION from the planetary theory\n*     VSOP2000 (X. Moisson, P. Bretagnon, 2001, Celes. Mechanics &\n*     Dyn. Astron., 80, 3/4, 205-213) and is an adaptation of original\n*     Fortran code supplied by P. Bretagnon (private comm., 2000).\n*\n*  4) Comparisons over the time span 1900-2100 with this simplified\n*     solution and the JPL DE405 ephemeris give the following results:\n*\n*                                RMS    max\n*           Heliocentric:\n*              position error    3.7   11.2   km\n*              velocity error    1.4    5.0   mm/s\n*\n*           Barycentric:\n*              position error    4.6   13.4   km\n*              velocity error    1.4    4.9   mm/s\n*\n*     The results deteriorate outside this time span.\n*\n*  5) The routine sla_EVP is faster but less accurate.  The present\n*     routine targets the case where high accuracy is more important\n*     than CPU time, yet the extra complication of reading a pre-\n*     computed ephemeris is not justified.\n*\n*  Last revision:   7 April 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\epv.f\n\"\"\"", "sla_eqecl": "\"\"\"\n*     - - - - - -\n*      E Q E C L\n*     - - - - - -\n*\n*  Transformation from J2000.0 equatorial coordinates to\n*  ecliptic coordinates (double precision)\n*\n*  Given:\n*     DR,DD       dp      J2000.0 mean RA,Dec (radians)\n*     DATE        dp      TDB (loosely ET) as Modified Julian Date\n*                                              (JD-2400000.5)\n*  Returned:\n*     DL,DB       dp      ecliptic longitude and latitude\n*                         (mean of date, IAU 1980 theory, radians)\n*\n*  Called:\n*     sla_DCS2C, sla_PREC, sla_EPJ, sla_DMXV, sla_ECMAT, sla_DCC2S,\n*     sla_DRANRM, sla_DRANGE\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\eqecl.f\n\"\"\"", "sla_eqeqx": "\"\"\"\n*     - - - - - -\n*      E Q E Q X\n*     - - - - - -\n*\n*  Equation of the equinoxes  (IAU 1994, double precision)\n*\n*  Given:\n*     DATE    dp      TDB (loosely ET) as Modified Julian Date\n*                                          (JD-2400000.5)\n*\n*  The result is the equation of the equinoxes (double precision)\n*  in radians:\n*\n*     Greenwich apparent ST = GMST + sla_EQEQX\n*\n*  References:  IAU Resolution C7, Recommendation 3 (1994)\n*               Capitaine, N. & Gontier, A.-M., Astron. Astrophys.,\n*               275, 645-650 (1993)\n*\n*  Called:  sla_NUTC\n*\n*  Patrick Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\eqeqx.f\n\"\"\"", "sla_eqgal": "\"\"\"\n*     - - - - - -\n*      E Q G A L\n*     - - - - - -\n*\n*  Transformation from J2000.0 equatorial coordinates to\n*  IAU 1958 galactic coordinates (double precision)\n*\n*  Given:\n*     DR,DD       dp       J2000.0 RA,Dec\n*\n*  Returned:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DMXV, sla_DCC2S, sla_DRANRM, sla_DRANGE\n*\n*  Note:\n*     The equatorial coordinates are J2000.0.  Use the routine\n*     sla_EG50 if conversion from B1950.0 'FK4' coordinates is\n*     required.\n*\n*  Reference:\n*     Blaauw et al, Mon.Not.R.Astron.Soc.,121,123 (1960)\n*\n*  P.T.Wallace   Starlink   21 September 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\eqgal.f\n\"\"\"", "sla_etrms": "\"\"\"\n*     - - - - - -\n*      E T R M S\n*     - - - - - -\n*\n*  Compute the E-terms (elliptic component of annual aberration)\n*  vector (double precision)\n*\n*  Given:\n*     EP      dp      Besselian epoch\n*\n*  Returned:\n*     EV      dp(3)   E-terms as (dx,dy,dz)\n*\n*  Note the use of the J2000 aberration constant (20.49552 arcsec).\n*  This is a reflection of the fact that the E-terms embodied in\n*  existing star catalogues were computed from a variety of\n*  aberration constants.  Rather than adopting one of the old\n*  constants the latest value is used here.\n*\n*  References:\n*     1  Smith, C.A. et al., 1989.  Astr.J. 97, 265.\n*     2  Yallop, B.D. et al., 1989.  Astr.J. 97, 274.\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\etrms.f\n\"\"\"", "sla_euler": "\"\"\"\n*     - - - - - -\n*      E U L E R\n*     - - - - - -\n*\n*  Form a rotation matrix from the Euler angles - three successive\n*  rotations about specified Cartesian axes (single precision)\n*\n*  Given:\n*    ORDER  c*(*)    specifies about which axes the rotations occur\n*    PHI    r        1st rotation (radians)\n*    THETA  r        2nd rotation (   \"   )\n*    PSI    r        3rd rotation (   \"   )\n*\n*  Returned:\n*    RMAT   r(3,3)   rotation matrix\n*\n*  A rotation is positive when the reference frame rotates\n*  anticlockwise as seen looking towards the origin from the\n*  positive region of the specified axis.\n*\n*  The characters of ORDER define which axes the three successive\n*  rotations are about.  A typical value is 'ZXZ', indicating that\n*  RMAT is to become the direction cosine matrix corresponding to\n*  rotations of the reference frame through PHI radians about the\n*  old Z-axis, followed by THETA radians about the resulting X-axis,\n*  then PSI radians about the resulting Z-axis.\n*\n*  The axis names can be any of the following, in any order or\n*  combination:  X, Y, Z, uppercase or lowercase, 1, 2, 3.  Normal\n*  axis labelling/numbering conventions apply;  the xyz (=123)\n*  triad is right-handed.  Thus, the 'ZXZ' example given above\n*  could be written 'zxz' or '313' (or even 'ZxZ' or '3xZ').  ORDER\n*  is terminated by length or by the first unrecognized character.\n*\n*  Fewer than three rotations are acceptable, in which case the later\n*  angle arguments are ignored.  If all rotations are zero, the\n*  identity matrix is produced.\n*\n*  Called:  sla_DEULER\n*\n*  P.T.Wallace   Starlink   23 May 1997\n*\n*  Copyright (C) 1997 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\euler.f\n\"\"\"", "sla_evp": "\"\"\"\n*     - - - -\n*      E V P\n*     - - - -\n*\n*  Barycentric and heliocentric velocity and position of the Earth\n*\n*  All arguments are double precision\n*\n*  Given:\n*\n*     DATE          TDB (loosely ET) as a Modified Julian Date\n*                                         (JD-2400000.5)\n*\n*     DEQX          Julian Epoch (e.g. 2000.0D0) of mean equator and\n*                   equinox of the vectors returned.  If DEQX .LE. 0D0,\n*                   all vectors are referred to the mean equator and\n*                   equinox (FK5) of epoch DATE.\n*\n*  Returned (all 3D Cartesian vectors):\n*\n*     DVB,DPB       barycentric velocity, position (AU/s, AU)\n*     DVH,DPH       heliocentric velocity, position (AU/s, AU)\n*\n*  Called:  sla_EPJ, sla_PREC\n*\n*  Notes:\n*\n*  1  This routine is accurate enough for many purposes but faster and\n*     more compact than the sla_EPV routine.  The maximum deviations\n*     from the JPL DE96 ephemeris are as follows:\n*\n*       barycentric velocity         0.42  m/s\n*       barycentric position         6900  km\n*\n*       heliocentric velocity        0.42  m/s\n*       heliocentric position        1600  km\n*\n*  2  The routine is adapted from the BARVEL and BARCOR subroutines of\n*     Stumpff (1980).  Most of the changes are merely cosmetic and do\n*     not affect the results at all.  However, some adjustments have\n*     been made so as to give results that refer to the IAU 1976 'FK5'\n*     equinox and precession, although the differences these changes\n*     make relative to the results from Stumpff's original 'FK4' version\n*     are smaller than the inherent accuracy of the algorithm.  One\n*     minor shortcoming in the original routines that has NOT been\n*     corrected is that better numerical accuracy could be achieved if\n*     the various polynomial evaluations were nested.\n*\n*  Reference:\n*\n*    Stumpff, P., Astron.Astrophys.Suppl.Ser. 41, 1-8 (1980).\n*\n*  Last revision:   7 April 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\evp.f\n\"\"\"", "sla_fitxy": "\"\"\"\n*     - - - - - -\n*      F I T X Y\n*     - - - - - -\n*\n*  Fit a linear model to relate two sets of [X,Y] coordinates.\n*\n*  Given:\n*     ITYPE    i        type of model: 4 or 6 (note 1)\n*     NP       i        number of samples (note 2)\n*     XYE     d(2,np)   expected [X,Y] for each sample\n*     XYM     d(2,np)   measured [X,Y] for each sample\n*\n*  Returned:\n*     COEFFS  d(6)      coefficients of model (note 3)\n*     J        i        status:  0 = OK\n*                               -1 = illegal ITYPE\n*                               -2 = insufficient data\n*                               -3 = no solution\n*\n*  Notes:\n*\n*  1)  ITYPE, which must be either 4 or 6, selects the type of model\n*      fitted.  Both allowed ITYPE values produce a model COEFFS which\n*      consists of six coefficients, namely the zero points and, for\n*      each of XE and YE, the coefficient of XM and YM.  For ITYPE=6,\n*      all six coefficients are independent, modelling squash and shear\n*      as well as origin, scale, and orientation.  However, ITYPE=4\n*      selects the \"solid body rotation\" option;  the model COEFFS\n*      still consists of the same six coefficients, but now two of\n*      them are used twice (appropriately signed).  Origin, scale\n*      and orientation are still modelled, but not squash or shear -\n*      the units of X and Y have to be the same.\n*\n*  2)  For NC=4, NP must be at least 2.  For NC=6, NP must be at\n*      least 3.\n*\n*  3)  The model is returned in the array COEFFS.  Naming the\n*      elements of COEFFS as follows:\n*\n*                  COEFFS(1) = A\n*                  COEFFS(2) = B\n*                  COEFFS(3) = C\n*                  COEFFS(4) = D\n*                  COEFFS(5) = E\n*                  COEFFS(6) = F\n*\n*      the model is:\n*\n*            XE = A + B*XM + C*YM\n*            YE = D + E*XM + F*YM\n*\n*      For the \"solid body rotation\" option (ITYPE=4), the\n*      magnitudes of B and F, and of C and E, are equal.  The\n*      signs of these coefficients depend on whether there is a\n*      sign reversal between XE,YE and XM,YM;  fits are performed\n*      with and without a sign reversal and the best one chosen.\n*\n*  4)  Error status values J=-1 and -2 leave COEFFS unchanged;\n*      if J=-3 COEFFS may have been changed.\n*\n*  See also sla_PXY, sla_INVF, sla_XY2XY, sla_DCMPF\n*\n*  Called:  sla_DMAT, sla_DMXV\n*\n*  Last revision:   8 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fitxy.f\n\"\"\"", "sla_fk425": "\"\"\"\n*     - - - - - -\n*      F K 4 2 5\n*     - - - - - -\n*\n*  Convert B1950.0 FK4 star data to J2000.0 FK5 (double precision)\n*\n*  This routine converts stars from the old, Bessel-Newcomb, FK4\n*  system to the new, IAU 1976, FK5, Fricke system.  The precepts\n*  of Smith et al (Ref 1) are followed, using the implementation\n*  by Yallop et al (Ref 2) of a matrix method due to Standish.\n*  Kinoshita's development of Andoyer's post-Newcomb precession is\n*  used.  The numerical constants from Seidelmann et al (Ref 3) are\n*  used canonically.\n*\n*  Given:  (all B1950.0,FK4)\n*     R1950,D1950     dp    B1950.0 RA,Dec (rad)\n*     DR1950,DD1950   dp    B1950.0 proper motions (rad/trop.yr)\n*     P1950           dp    parallax (arcsec)\n*     V1950           dp    radial velocity (km/s, +ve = moving away)\n*\n*  Returned:  (all J2000.0,FK5)\n*     R2000,D2000     dp    J2000.0 RA,Dec (rad)\n*     DR2000,DD2000   dp    J2000.0 proper motions (rad/Jul.yr)\n*     P2000           dp    parallax (arcsec)\n*     V2000           dp    radial velocity (km/s, +ve = moving away)\n*\n*  Notes:\n*\n*  1)  The proper motions in RA are dRA/dt rather than\n*      cos(Dec)*dRA/dt, and are per year rather than per century.\n*\n*  2)  Conversion from Besselian epoch 1950.0 to Julian epoch\n*      2000.0 only is provided for.  Conversions involving other\n*      epochs will require use of the appropriate precession,\n*      proper motion, and E-terms routines before and/or\n*      after FK425 is called.\n*\n*  3)  In the FK4 catalogue the proper motions of stars within\n*      10 degrees of the poles do not embody the differential\n*      E-term effect and should, strictly speaking, be handled\n*      in a different manner from stars outside these regions.\n*      However, given the general lack of homogeneity of the star\n*      data available for routine astrometry, the difficulties of\n*      handling positions that may have been determined from\n*      astrometric fields spanning the polar and non-polar regions,\n*      the likelihood that the differential E-terms effect was not\n*      taken into account when allowing for proper motion in past\n*      astrometry, and the undesirability of a discontinuity in\n*      the algorithm, the decision has been made in this routine to\n*      include the effect of differential E-terms on the proper\n*      motions for all stars, whether polar or not.  At epoch 2000,\n*      and measuring on the sky rather than in terms of dRA, the\n*      errors resulting from this simplification are less than\n*      1 milliarcsecond in position and 1 milliarcsecond per\n*      century in proper motion.\n*\n*  References:\n*\n*     1  Smith, C.A. et al, 1989.  \"The transformation of astrometric\n*        catalog systems to the equinox J2000.0\".  Astron.J. 97, 265.\n*\n*     2  Yallop, B.D. et al, 1989.  \"Transformation of mean star places\n*        from FK4 B1950.0 to FK5 J2000.0 using matrices in 6-space\".\n*        Astron.J. 97, 274.\n*\n*     3  Seidelmann, P.K. (ed), 1992.  \"Explanatory Supplement to\n*        the Astronomical Almanac\", ISBN 0-935702-68-7.\n*\n*  P.T.Wallace   Starlink   19 December 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk425.f\n\"\"\"", "sla_fk45z": "\"\"\"\n*     - - - - - -\n*      F K 4 5 Z\n*     - - - - - -\n*\n*  Convert B1950.0 FK4 star data to J2000.0 FK5 assuming zero\n*  proper motion in the FK5 frame (double precision)\n*\n*  This routine converts stars from the old, Bessel-Newcomb, FK4\n*  system to the new, IAU 1976, FK5, Fricke system, in such a\n*  way that the FK5 proper motion is zero.  Because such a star\n*  has, in general, a non-zero proper motion in the FK4 system,\n*  the routine requires the epoch at which the position in the\n*  FK4 system was determined.\n*\n*  The method is from Appendix 2 of Ref 1, but using the constants\n*  of Ref 4.\n*\n*  Given:\n*     R1950,D1950     dp    B1950.0 FK4 RA,Dec at epoch (rad)\n*     BEPOCH          dp    Besselian epoch (e.g. 1979.3D0)\n*\n*  Returned:\n*     R2000,D2000     dp    J2000.0 FK5 RA,Dec (rad)\n*\n*  Notes:\n*\n*  1)  The epoch BEPOCH is strictly speaking Besselian, but\n*      if a Julian epoch is supplied the result will be\n*      affected only to a negligible extent.\n*\n*  2)  Conversion from Besselian epoch 1950.0 to Julian epoch\n*      2000.0 only is provided for.  Conversions involving other\n*      epochs will require use of the appropriate precession,\n*      proper motion, and E-terms routines before and/or\n*      after FK45Z is called.\n*\n*  3)  In the FK4 catalogue the proper motions of stars within\n*      10 degrees of the poles do not embody the differential\n*      E-term effect and should, strictly speaking, be handled\n*      in a different manner from stars outside these regions.\n*      However, given the general lack of homogeneity of the star\n*      data available for routine astrometry, the difficulties of\n*      handling positions that may have been determined from\n*      astrometric fields spanning the polar and non-polar regions,\n*      the likelihood that the differential E-terms effect was not\n*      taken into account when allowing for proper motion in past\n*      astrometry, and the undesirability of a discontinuity in\n*      the algorithm, the decision has been made in this routine to\n*      include the effect of differential E-terms on the proper\n*      motions for all stars, whether polar or not.  At epoch 2000,\n*      and measuring on the sky rather than in terms of dRA, the\n*      errors resulting from this simplification are less than\n*      1 milliarcsecond in position and 1 milliarcsecond per\n*      century in proper motion.\n*\n*  References:\n*\n*     1  Aoki,S., et al, 1983.  Astron.Astrophys., 128, 263.\n*\n*     2  Smith, C.A. et al, 1989.  \"The transformation of astrometric\n*        catalog systems to the equinox J2000.0\".  Astron.J. 97, 265.\n*\n*     3  Yallop, B.D. et al, 1989.  \"Transformation of mean star places\n*        from FK4 B1950.0 to FK5 J2000.0 using matrices in 6-space\".\n*        Astron.J. 97, 274.\n*\n*     4  Seidelmann, P.K. (ed), 1992.  \"Explanatory Supplement to\n*        the Astronomical Almanac\", ISBN 0-935702-68-7.\n*\n*  Called:  sla_DCS2C, sla_EPJ, sla_EPB2D, sla_DCC2S, sla_DRANRM\n*\n*  P.T.Wallace   Starlink   21 September 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk45z.f\n\"\"\"", "sla_fk524": "\"\"\"\n*     - - - - - -\n*      F K 5 2 4\n*     - - - - - -\n*\n*  Convert J2000.0 FK5 star data to B1950.0 FK4 (double precision)\n*\n*  This routine converts stars from the new, IAU 1976, FK5, Fricke\n*  system, to the old, Bessel-Newcomb, FK4 system.  The precepts\n*  of Smith et al (Ref 1) are followed, using the implementation\n*  by Yallop et al (Ref 2) of a matrix method due to Standish.\n*  Kinoshita's development of Andoyer's post-Newcomb precession is\n*  used.  The numerical constants from Seidelmann et al (Ref 3) are\n*  used canonically.\n*\n*  Given:  (all J2000.0,FK5)\n*     R2000,D2000     dp    J2000.0 RA,Dec (rad)\n*     DR2000,DD2000   dp    J2000.0 proper motions (rad/Jul.yr)\n*     P2000           dp    parallax (arcsec)\n*     V2000           dp    radial velocity (km/s, +ve = moving away)\n*\n*  Returned:  (all B1950.0,FK4)\n*     R1950,D1950     dp    B1950.0 RA,Dec (rad)\n*     DR1950,DD1950   dp    B1950.0 proper motions (rad/trop.yr)\n*     P1950           dp    parallax (arcsec)\n*     V1950           dp    radial velocity (km/s, +ve = moving away)\n*\n*  Notes:\n*\n*  1)  The proper motions in RA are dRA/dt rather than\n*      cos(Dec)*dRA/dt, and are per year rather than per century.\n*\n*  2)  Note that conversion from Julian epoch 2000.0 to Besselian\n*      epoch 1950.0 only is provided for.  Conversions involving\n*      other epochs will require use of the appropriate precession,\n*      proper motion, and E-terms routines before and/or after\n*      FK524 is called.\n*\n*  3)  In the FK4 catalogue the proper motions of stars within\n*      10 degrees of the poles do not embody the differential\n*      E-term effect and should, strictly speaking, be handled\n*      in a different manner from stars outside these regions.\n*      However, given the general lack of homogeneity of the star\n*      data available for routine astrometry, the difficulties of\n*      handling positions that may have been determined from\n*      astrometric fields spanning the polar and non-polar regions,\n*      the likelihood that the differential E-terms effect was not\n*      taken into account when allowing for proper motion in past\n*      astrometry, and the undesirability of a discontinuity in\n*      the algorithm, the decision has been made in this routine to\n*      include the effect of differential E-terms on the proper\n*      motions for all stars, whether polar or not.  At epoch 2000,\n*      and measuring on the sky rather than in terms of dRA, the\n*      errors resulting from this simplification are less than\n*      1 milliarcsecond in position and 1 milliarcsecond per\n*      century in proper motion.\n*\n*  References:\n*\n*     1  Smith, C.A. et al, 1989.  \"The transformation of astrometric\n*        catalog systems to the equinox J2000.0\".  Astron.J. 97, 265.\n*\n*     2  Yallop, B.D. et al, 1989.  \"Transformation of mean star places\n*        from FK4 B1950.0 to FK5 J2000.0 using matrices in 6-space\".\n*        Astron.J. 97, 274.\n*\n*     3  Seidelmann, P.K. (ed), 1992.  \"Explanatory Supplement to\n*        the Astronomical Almanac\", ISBN 0-935702-68-7.\n*\n*  P.T.Wallace   Starlink   19 December 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk524.f\n\"\"\"", "sla_fk52h": "\"\"\"\n*     - - - - - -\n*      F K 5 2 H\n*     - - - - - -\n*\n*  Transform FK5 (J2000) star data into the Hipparcos frame.\n*\n*  (double precision)\n*\n*  This routine transforms FK5 star positions and proper motions\n*  into the frame of the Hipparcos catalogue.\n*\n*  Given (all FK5, equinox J2000, epoch J2000):\n*     R5        d      RA (radians)\n*     D5        d      Dec (radians)\n*     DR5       d      proper motion in RA (dRA/dt, rad/Jyear)\n*     DD5       d      proper motion in Dec (dDec/dt, rad/Jyear)\n*\n*  Returned (all Hipparcos, epoch J2000):\n*     RH        d      RA (radians)\n*     DH        d      Dec (radians)\n*     DRH       d      proper motion in RA (dRA/dt, rad/Jyear)\n*     DDH       d      proper motion in Dec (dDec/dt, rad/Jyear)\n*\n*  Called:  sla_DS2C6, sla_DAV2M, sla_DMXV, sla_DVXV, sla_DC62S,\n*           sla_DRANRM\n*\n*  Notes:\n*\n*  1)  The proper motions in RA are dRA/dt rather than\n*      cos(Dec)*dRA/dt, and are per year rather than per century.\n*\n*  2)  The FK5 to Hipparcos transformation consists of a pure\n*      rotation and spin;  zonal errors in the FK5 catalogue are\n*      not taken into account.\n*\n*  3)  The published orientation and spin components are interpreted\n*      as \"axial vectors\".  An axial vector points at the pole of the\n*      rotation and its length is the amount of rotation in radians.\n*\n*  4)  See also sla_H2FK5, sla_FK5HZ, sla_HFK5Z.\n*\n*  Reference:\n*\n*     M.Feissel & F.Mignard, Astron. Astrophys. 331, L33-L36 (1998).\n*\n*  P.T.Wallace   Starlink   22 June 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk52h.f\n\"\"\"", "sla_fk54z": "\"\"\"\n*     - - - - - -\n*      F K 5 4 Z\n*     - - - - - -\n*\n*  Convert a J2000.0 FK5 star position to B1950.0 FK4 assuming\n*  zero proper motion and parallax (double precision)\n*\n*  This routine converts star positions from the new, IAU 1976,\n*  FK5, Fricke system to the old, Bessel-Newcomb, FK4 system.\n*\n*  Given:\n*     R2000,D2000     dp    J2000.0 FK5 RA,Dec (rad)\n*     BEPOCH          dp    Besselian epoch (e.g. 1950D0)\n*\n*  Returned:\n*     R1950,D1950     dp    B1950.0 FK4 RA,Dec (rad) at epoch BEPOCH\n*     DR1950,DD1950   dp    B1950.0 FK4 proper motions (rad/trop.yr)\n*\n*  Notes:\n*\n*  1)  The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n*\n*  2)  Conversion from Julian epoch 2000.0 to Besselian epoch 1950.0\n*      only is provided for.  Conversions involving other epochs will\n*      require use of the appropriate precession routines before and\n*      after this routine is called.\n*\n*  3)  Unlike in the sla_FK524 routine, the FK5 proper motions, the\n*      parallax and the radial velocity are presumed zero.\n*\n*  4)  It is the intention that FK5 should be a close approximation\n*      to an inertial frame, so that distant objects have zero proper\n*      motion;  such objects have (in general) non-zero proper motion\n*      in FK4, and this routine returns those fictitious proper\n*      motions.\n*\n*  5)  The position returned by this routine is in the B1950\n*      reference frame but at Besselian epoch BEPOCH.  For\n*      comparison with catalogues the BEPOCH argument will\n*      frequently be 1950D0.\n*\n*  Called:  sla_FK524, sla_PM\n*\n*  P.T.Wallace   Starlink   10 April 1990\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk54z.f\n\"\"\"", "sla_fk5hz": "\"\"\"\n*     - - - - - -\n*      F K 5 H Z\n*     - - - - - -\n*\n*  Transform an FK5 (J2000) star position into the frame of the\n*  Hipparcos catalogue, assuming zero Hipparcos proper motion.\n*\n*  (double precision)\n*\n*  This routine converts a star position from the FK5 system to\n*  the Hipparcos system, in such a way that the Hipparcos proper\n*  motion is zero.  Because such a star has, in general, a non-zero\n*  proper motion in the FK5 system, the routine requires the epoch\n*  at which the position in the FK5 system was determined.\n*\n*  Given:\n*     R5        d      FK5 RA (radians), equinox J2000, epoch EPOCH\n*     D5        d      FK5 Dec (radians), equinox J2000, epoch EPOCH\n*     EPOCH     d      Julian epoch (TDB)\n*\n*  Returned (all Hipparcos):\n*     RH        d      RA (radians)\n*     DH        d      Dec (radians)\n*\n*  Called:  sla_DCS2C, sla_DAV2M, sla_DIMXV, sla_DMXV, sla_DCC2S,\n*           sla_DRANRM\n*\n*  Notes:\n*\n*  1)  The FK5 to Hipparcos transformation consists of a pure\n*      rotation and spin;  zonal errors in the FK5 catalogue are\n*      not taken into account.\n*\n*  2)  The published orientation and spin components are interpreted\n*      as \"axial vectors\".  An axial vector points at the pole of the\n*      rotation and its length is the amount of rotation in radians.\n*\n*  3)  See also sla_FK52H, sla_H2FK5, sla_HFK5Z.\n*\n*  Reference:\n*\n*     M.Feissel & F.Mignard, Astron. Astrophys. 331, L33-L36 (1998).\n*\n*  P.T.Wallace   Starlink   22 June 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\fk5hz.f\n\"\"\"", "sla_flotin": "\"\"\"\n*     - - - - - - -\n*      F L O T I N\n*     - - - - - - -\n*\n*  Convert free-format input into single precision floating point\n*\n*  Given:\n*     STRING     c     string containing number to be decoded\n*     NSTRT      i     pointer to where decoding is to start\n*     RESLT      r     current value of result\n*\n*  Returned:\n*     NSTRT      i      advanced to next number\n*     RESLT      r      result\n*     JFLAG      i      status: -1 = -OK, 0 = +OK, 1 = null, 2 = error\n*\n*  Called:  sla_DFLTIN\n*\n*  Notes:\n*\n*     1     The reason FLOTIN has separate OK status values for +\n*           and - is to enable minus zero to be detected.   This is\n*           of crucial importance when decoding mixed-radix numbers.\n*           For example, an angle expressed as deg, arcmin, arcsec\n*           may have a leading minus sign but a zero degrees field.\n*\n*     2     A TAB is interpreted as a space, and lowercase characters\n*           are interpreted as uppercase.\n*\n*     3     The basic format is the sequence of fields #^.^@#^, where\n*           # is a sign character + or -, ^ means a string of decimal\n*           digits, and @, which indicates an exponent, means D or E.\n*           Various combinations of these fields can be omitted, and\n*           embedded blanks are permissible in certain places.\n*\n*     4     Spaces:\n*\n*             .  Leading spaces are ignored.\n*\n*             .  Embedded spaces are allowed only after +, -, D or E,\n*                and after the decomal point if the first sequence of\n*                digits is absent.\n*\n*             .  Trailing spaces are ignored;  the first signifies\n*                end of decoding and subsequent ones are skipped.\n*\n*     5     Delimiters:\n*\n*             .  Any character other than +,-,0-9,.,D,E or space may be\n*                used to signal the end of the number and terminate\n*                decoding.\n*\n*             .  Comma is recognized by FLOTIN as a special case;  it\n*                is skipped, leaving the pointer on the next character.\n*                See 13, below.\n*\n*     6     Both signs are optional.  The default is +.\n*\n*     7     The mantissa ^.^ defaults to 1.\n*\n*     8     The exponent @#^ defaults to E0.\n*\n*     9     The strings of decimal digits may be of any length.\n*\n*     10    The decimal point is optional for whole numbers.\n*\n*     11    A \"null result\" occurs when the string of characters being\n*           decoded does not begin with +,-,0-9,.,D or E, or consists\n*           entirely of spaces.  When this condition is detected, JFLAG\n*           is set to 1 and RESLT is left untouched.\n*\n*     12    NSTRT = 1 for the first character in the string.\n*\n*     13    On return from FLOTIN, NSTRT is set ready for the next\n*           decode - following trailing blanks and any comma.  If a\n*           delimiter other than comma is being used, NSTRT must be\n*           incremented before the next call to FLOTIN, otherwise\n*           all subsequent calls will return a null result.\n*\n*     14    Errors (JFLAG=2) occur when:\n*\n*             .  a +, -, D or E is left unsatisfied;  or\n*\n*             .  the decimal point is present without at least\n*                one decimal digit before or after it;  or\n*\n*             .  an exponent more than 100 has been presented.\n*\n*     15    When an error has been detected, NSTRT is left\n*           pointing to the character following the last\n*           one used before the error came to light.  This\n*           may be after the point at which a more sophisticated\n*           program could have detected the error.  For example,\n*           FLOTIN does not detect that '1E999' is unacceptable\n*           (on a computer where this is so) until the entire number\n*           has been decoded.\n*\n*     16    Certain highly unlikely combinations of mantissa &\n*           exponent can cause arithmetic faults during the\n*           decode, in some cases despite the fact that they\n*           together could be construed as a valid number.\n*\n*     17    Decoding is left to right, one pass.\n*\n*     18    See also DFLTIN and INTIN\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\flotin.f\n\"\"\"", "sla_galeq": "\"\"\"\n*     - - - - - -\n*      G A L E Q\n*     - - - - - -\n*\n*  Transformation from IAU 1958 galactic coordinates to\n*  J2000.0 equatorial coordinates (double precision)\n*\n*  Given:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  Returned:\n*     DR,DD       dp       J2000.0 RA,Dec\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DIMXV, sla_DCC2S, sla_DRANRM, sla_DRANGE\n*\n*  Note:\n*     The equatorial coordinates are J2000.0.  Use the routine\n*     sla_GE50 if conversion to B1950.0 'FK4' coordinates is\n*     required.\n*\n*  Reference:\n*     Blaauw et al, Mon.Not.R.Astron.Soc.,121,123 (1960)\n*\n*  P.T.Wallace   Starlink   21 September 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\galeq.f\n\"\"\"", "sla_galsup": "\"\"\"\n*     - - - - - - -\n*      G A L S U P\n*     - - - - - - -\n*\n*  Transformation from IAU 1958 galactic coordinates to\n*  de Vaucouleurs supergalactic coordinates (double precision)\n*\n*  Given:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  Returned:\n*     DSL,DSB     dp       supergalactic longitude and latitude\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DMXV, sla_DCC2S, sla_DRANRM, sla_DRANGE\n*\n*  References:\n*\n*     de Vaucouleurs, de Vaucouleurs, & Corwin, Second Reference\n*     Catalogue of Bright Galaxies, U. Texas, page 8.\n*\n*     Systems & Applied Sciences Corp., Documentation for the\n*     machine-readable version of the above catalogue,\n*     Contract NAS 5-26490.\n*\n*    (These two references give different values for the galactic\n*     longitude of the supergalactic origin.  Both are wrong;  the\n*     correct value is L2=137.37.)\n*\n*  P.T.Wallace   Starlink   25 January 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\galsup.f\n\"\"\"", "sla_ge50": "\"\"\"\n*     - - - - -\n*      G E 5 0\n*     - - - - -\n*\n*  Transformation from IAU 1958 galactic coordinates to\n*  B1950.0 'FK4' equatorial coordinates (double precision)\n*\n*  Given:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  Returned:\n*     DR,DD       dp       B1950.0 'FK4' RA,Dec\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DIMXV, sla_DCC2S, sla_ADDET, sla_DRANRM, sla_DRANGE\n*\n*  Note:\n*     The equatorial coordinates are B1950.0 'FK4'.  Use the\n*     routine sla_GALEQ if conversion to J2000.0 coordinates\n*     is required.\n*\n*  Reference:\n*     Blaauw et al, Mon.Not.R.Astron.Soc.,121,123 (1960)\n*\n*  P.T.Wallace   Starlink   5 September 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ge50.f\n\"\"\"", "sla_geoc": "\"\"\"\n*     - - - - -\n*      G E O C\n*     - - - - -\n*\n*  Convert geodetic position to geocentric (double precision)\n*\n*  Given:\n*     P     dp     latitude (geodetic, radians)\n*     H     dp     height above reference spheroid (geodetic, metres)\n*\n*  Returned:\n*     R     dp     distance from Earth axis (AU)\n*     Z     dp     distance from plane of Earth equator (AU)\n*\n*  Notes:\n*\n*  1  Geocentric latitude can be obtained by evaluating ATAN2(Z,R).\n*\n*  2  IAU 1976 constants are used.\n*\n*  Reference:\n*\n*     Green,R.M., Spherical Astronomy, CUP 1985, p98.\n*\n*  Last revision:   22 July 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\geoc.f\n\"\"\"", "sla_gmst": "\"\"\"\n*     - - - - -\n*      G M S T\n*     - - - - -\n*\n*  Conversion from universal time to sidereal time (double precision)\n*\n*  Given:\n*    UT1    dp     universal time (strictly UT1) expressed as\n*                  modified Julian Date (JD-2400000.5)\n*\n*  The result is the Greenwich mean sidereal time (double\n*  precision, radians).\n*\n*  The IAU 1982 expression (see page S15 of 1984 Astronomical Almanac)\n*  is used, but rearranged to reduce rounding errors.  This expression\n*  is always described as giving the GMST at 0 hours UT.  In fact, it\n*  gives the difference between the GMST and the UT, which happens to\n*  equal the GMST (modulo 24 hours) at 0 hours UT each day.  In this\n*  routine, the entire UT is used directly as the argument for the\n*  standard formula, and the fractional part of the UT is added\n*  separately.  Note that the factor 1.0027379... does not appear in the\n*  IAU 1982 expression explicitly but in the form of the coefficient\n*  8640184.812866, which is 86400x36525x0.0027379...\n*\n*  See also the routine sla_GMSTA, which delivers better numerical\n*  precision by accepting the UT date and time as separate arguments.\n*\n*  Called:  sla_DRANRM\n*\n*  P.T.Wallace   Starlink   14 October 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\gmst.f\n\"\"\"", "sla_gmsta": "\"\"\"\n*     - - - - - -\n*      G M S T A\n*     - - - - - -\n*\n*  Conversion from Universal Time to Greenwich mean sidereal time,\n*  with rounding errors minimized.\n*\n*  double precision\n*\n*  Given:\n*    DATE    d      UT1 date (MJD: integer part of JD-2400000.5))\n*    UT      d      UT1 time (fraction of a day)\n*\n*  The result is the Greenwich mean sidereal time (double precision,\n*  radians, in the range 0 to 2pi).\n*\n*  There is no restriction on how the UT is apportioned between the\n*  DATE and UT arguments.  Either of the two arguments could, for\n*  example, be zero and the entire date+time supplied in the other.\n*  However, the routine is designed to deliver maximum accuracy when\n*  the DATE argument is a whole number and the UT lies in the range\n*  0 to 1 (or vice versa).\n*\n*  The algorithm is based on the IAU 1982 expression (see page S15 of\n*  the 1984 Astronomical Almanac).  This is always described as giving\n*  the GMST at 0 hours UT1.  In fact, it gives the difference between\n*  the GMST and the UT, the steady 4-minutes-per-day drawing-ahead of\n*  ST with respect to UT.  When whole days are ignored, the expression\n*  happens to equal the GMST at 0 hours UT1 each day.  Note that the\n*  factor 1.0027379... does not appear explicitly but in the form of\n*  the coefficient 8640184.812866, which is 86400x36525x0.0027379...\n*\n*  In this routine, the entire UT1 (the sum of the two arguments DATE\n*  and UT) is used directly as the argument for the standard formula.\n*  The UT1 is then added, but omitting whole days to conserve accuracy.\n*\n*  See also the routine sla_GMST, which accepts the UT as a single\n*  argument.  Compared with sla_GMST, the extra numerical precision\n*  delivered by the present routine is unlikely to be important in\n*  an absolute sense, but may be useful when critically comparing\n*  algorithms and in applications where two sidereal times close\n*  together are differenced.\n*\n*  Called:  sla_DRANRM\n*\n*  P.T.Wallace   Starlink   14 October 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\gmsta.f\n\"\"\"", "sla_gresid": "\"\"\"\n*     - - - - - - -\n*      G R E S I D\n*     - - - - - - -\n*\n*  Generate pseudo-random normal deviate ( = 'Gaussian residual')\n*  (single precision)\n*\n*  Given:\n*     S      real     standard deviation\n*\n*  The results of many calls to this routine will be\n*  normally distributed with mean zero and standard deviation S.\n*\n*  The Box-Muller algorithm is used.  This is described in\n*  Numerical Recipes, section 7.2.\n*\n*  Called:  RAN or RAND (a REAL function returning a random variate --\n*           the precise function which is called depends on which functions\n*           are available when the library is built).  If neither of these\n*           is available, we use the local substitute RANDOM defined\n*           in rtl_random.c\n*\n*  P.T.Wallace   Starlink   14 October 1991\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\nFile: src\\gresid.F\n\"\"\"", "sla_h2e": "\"\"\"\n*     - - - - -\n*      D E 2 H\n*     - - - - -\n*\n*  Horizon to equatorial coordinates:  Az,El to HA,Dec\n*\n*  (single precision)\n*\n*  Given:\n*     AZ      r     azimuth\n*     EL      r     elevation\n*     PHI     r     observatory latitude\n*\n*  Returned:\n*     HA      r     hour angle\n*     DEC     r     declination\n*\n*  Notes:\n*\n*  1)  All the arguments are angles in radians.\n*\n*  2)  The sign convention for azimuth is north zero, east +pi/2.\n*\n*  3)  HA is returned in the range +/-pi.  Declination is returned\n*      in the range +/-pi/2.\n*\n*  4)  The latitude is (in principle) geodetic.  In critical\n*      applications, corrections for polar motion should be applied.\n*\n*  5)  In some applications it will be important to specify the\n*      correct type of elevation in order to produce the required\n*      type of HA,Dec.  In particular, it may be important to\n*      distinguish between the elevation as affected by refraction,\n*      which will yield the \"observed\" HA,Dec, and the elevation\n*      in vacuo, which will yield the \"topocentric\" HA,Dec.  If the\n*      effects of diurnal aberration can be neglected, the\n*      topocentric HA,Dec may be used as an approximation to the\n*      \"apparent\" HA,Dec.\n*\n*  6)  No range checking of arguments is done.\n*\n*  7)  In applications which involve many such calculations, rather\n*      than calling the present routine it will be more efficient to\n*      use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude.\n*\n*  Last revision:   11 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\h2e.f\n\"\"\"", "sla_h2fk5": "\"\"\"\n*     - - - - - -\n*      H 2 F K 5\n*     - - - - - -\n*\n*  Transform Hipparcos star data into the FK5 (J2000) system.\n*\n*  (double precision)\n*\n*  This routine transforms Hipparcos star positions and proper\n*  motions into FK5 J2000.\n*\n*  Given (all Hipparcos, epoch J2000):\n*     RH        d      RA (radians)\n*     DH        d      Dec (radians)\n*     DRH       d      proper motion in RA (dRA/dt, rad/Jyear)\n*     DDH       d      proper motion in Dec (dDec/dt, rad/Jyear)\n*\n*  Returned (all FK5, equinox J2000, epoch J2000):\n*     R5        d      RA (radians)\n*     D5        d      Dec (radians)\n*     DR5       d      proper motion in RA (dRA/dt, rad/Jyear)\n*     DD5       d      proper motion in Dec (dDec/dt, rad/Jyear)\n*\n*  Called:  sla_DS2C6, sla_DAV2M, sla_DMXV, sla_DIMXV, sla_DVXV,\n*           sla_DC62S, sla_DRANRM\n*\n*  Notes:\n*\n*  1)  The proper motions in RA are dRA/dt rather than\n*      cos(Dec)*dRA/dt, and are per year rather than per century.\n*\n*  2)  The FK5 to Hipparcos transformation consists of a pure\n*      rotation and spin;  zonal errors in the FK5 catalogue are\n*      not taken into account.\n*\n*  3)  The published orientation and spin components are interpreted\n*      as \"axial vectors\".  An axial vector points at the pole of the\n*      rotation and its length is the amount of rotation in radians.\n*\n*  4)  See also sla_FK52H, sla_FK5HZ, sla_HFK5Z.\n*\n*  Reference:\n*\n*     M.Feissel & F.Mignard, Astron. Astrophys. 331, L33-L36 (1998).\n*\n*  P.T.Wallace   Starlink   22 June 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\h2fk5.f\n\"\"\"", "sla_hfk5z": "\"\"\"\n*     - - - - - -\n*      H F K 5 Z\n*     - - - - - -\n*\n*  Transform a Hipparcos star position into FK5 J2000, assuming\n*  zero Hipparcos proper motion.\n*\n*  (double precision)\n*\n*  Given:\n*     RH        d      Hipparcos RA (radians)\n*     DH        d      Hipparcos Dec (radians)\n*     EPOCH     d      Julian epoch (TDB)\n*\n*  Returned (all FK5, equinox J2000, epoch EPOCH):\n*     R5        d      RA (radians)\n*     D5        d      Dec (radians)\n*\n*  Called:  sla_DCS2C, sla_DAV2M, sla_DMXV, sla_DMXM,\n*           sla_DIMXV, sla_DVXV, sla_DC62S, sla_DRANRM\n*\n*  Notes:\n*\n*  1)  The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n*\n*  2)  The FK5 to Hipparcos transformation consists of a pure\n*      rotation and spin;  zonal errors in the FK5 catalogue are\n*      not taken into account.\n*\n*  3)  The published orientation and spin components are interpreted\n*      as \"axial vectors\".  An axial vector points at the pole of the\n*      rotation and its length is the amount of rotation in radians.\n*\n*  4)  It was the intention that Hipparcos should be a close\n*      approximation to an inertial frame, so that distant objects\n*      have zero proper motion;  such objects have (in general)\n*      non-zero proper motion in FK5, and this routine returns those\n*      fictitious proper motions.\n*\n*  5)  The position returned by this routine is in the FK5 J2000\n*      reference frame but at Julian epoch EPOCH.\n*\n*  6)  See also sla_FK52H, sla_H2FK5, sla_FK5ZHZ.\n*\n*  Reference:\n*\n*     M.Feissel & F.Mignard, Astron. Astrophys. 331, L33-L36 (1998).\n*\n*  P.T.Wallace   Starlink   30 December 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\hfk5z.f\n\"\"\"", "sla__idchf": "\"\"\"\n*     - - - - - -\n*      I D C H F\n*     - - - - - -\n*\n*  Internal routine used by DFLTIN\n*\n*  Identify next character in string\n*\n*  Given:\n*     STRING      char        string\n*     NPTR        int         pointer to character to be identified\n*\n*  Returned:\n*     NPTR        int         incremented unless end of field\n*     NVEC        int         vector for identified character\n*     NDIGIT      int         0-9 if character was a numeral\n*     DIGIT       double      equivalent of NDIGIT\n*\n*     NVEC takes the following values:\n*\n*      1     0-9\n*      2     space or TAB   !!! n.b. ASCII TAB assumed !!!\n*      3     D,d,E or e\n*      4     .\n*      5     +\n*      6     -\n*      7     ,\n*      8     else\n*      9     outside field\n*\n*  If the character is not 0-9, NDIGIT and DIGIT are either not\n*  altered or are set to arbitrary values.\n*\n*  P.T.Wallace   Starlink   22 December 1992\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\idchf.f\n\"\"\"", "sla__idchi": "\"\"\"\n*     - - - - - -\n*      I D C H I\n*     - - - - - -\n*\n*  Internal routine used by INTIN\n*\n*  Identify next character in string\n*\n*  Given:\n*     STRING      char        string\n*     NPTR        int         pointer to character to be identified\n*\n*  Returned:\n*     NPTR        int         incremented unless end of field\n*     NVEC        int         vector for identified character\n*     DIGIT       double      double precision digit if 0-9\n*\n*     NVEC takes the following values:\n*\n*      1     0-9\n*      2     space or TAB   !!! n.b. ASCII TAB assumed !!!\n*      3     +\n*      4     -\n*      5     ,\n*      6     else\n*      7     outside string\n*\n*  If the character is not 0-9, DIGIT is either unaltered or\n*  is set to an arbitrary value.\n*\n*  P.T.Wallace   Starlink   22 December 1992\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\idchi.f\n\"\"\"", "sla_imxv": "\"\"\"\n*     - - - - -\n*      I M X V\n*     - - - - -\n*\n*  Performs the 3-D backward unitary transformation:\n*\n*     vector VB = (inverse of matrix RM) * vector VA\n*\n*  (single precision)\n*\n*  (n.b.  the matrix must be unitary, as this routine assumes that\n*   the inverse and transpose are identical)\n*\n*  Given:\n*     RM       real(3,3)    matrix\n*     VA       real(3)      vector\n*\n*  Returned:\n*     VB       real(3)      result vector\n*\n*  P.T.Wallace   Starlink   November 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\imxv.f\n\"\"\"", "sla_intin": "\"\"\"\n*     - - - - - -\n*      I N T I N\n*     - - - - - -\n*\n*  Convert free-format input into an integer\n*\n*  Given:\n*     STRING     c     string containing number to be decoded\n*     NSTRT      i     pointer to where decoding is to start\n*     IRESLT     i     current value of result\n*\n*  Returned:\n*     NSTRT      i      advanced to next number\n*     IRESLT     i      result\n*     JFLAG      i      status: -1 = -OK, 0 = +OK, 1 = null, 2 = error\n*\n*  Called:  sla__IDCHI\n*\n*  Notes:\n*\n*     1     The reason INTIN has separate OK status values for +\n*           and - is to enable minus zero to be detected.   This is\n*           of crucial importance when decoding mixed-radix numbers.\n*           For example, an angle expressed as deg, arcmin, arcsec\n*           may have a leading minus sign but a zero degrees field.\n*\n*     2     A TAB is interpreted as a space.\n*\n*     3     The basic format is the sequence of fields #^, where\n*           # is a sign character + or -, and ^ means a string of\n*           decimal digits.\n*\n*     4     Spaces:\n*\n*             .  Leading spaces are ignored.\n*\n*             .  Spaces between the sign and the number are allowed.\n*\n*             .  Trailing spaces are ignored;  the first signifies\n*                end of decoding and subsequent ones are skipped.\n*\n*     5     Delimiters:\n*\n*             .  Any character other than +,-,0-9 or space may be\n*                used to signal the end of the number and terminate\n*                decoding.\n*\n*             .  Comma is recognized by INTIN as a special case;  it\n*                is skipped, leaving the pointer on the next character.\n*                See 9, below.\n*\n*     6     The sign is optional.  The default is +.\n*\n*     7     A \"null result\" occurs when the string of characters being\n*           decoded does not begin with +,- or 0-9, or consists\n*           entirely of spaces.  When this condition is detected, JFLAG\n*           is set to 1 and IRESLT is left untouched.\n*\n*     8     NSTRT = 1 for the first character in the string.\n*\n*     9     On return from INTIN, NSTRT is set ready for the next\n*           decode - following trailing blanks and any comma.  If a\n*           delimiter other than comma is being used, NSTRT must be\n*           incremented before the next call to INTIN, otherwise\n*           all subsequent calls will return a null result.\n*\n*     10    Errors (JFLAG=2) occur when:\n*\n*             .  there is a + or - but no number;  or\n*\n*             .  the number is greater than BIG (defined below).\n*\n*     11    When an error has been detected, NSTRT is left\n*           pointing to the character following the last\n*           one used before the error came to light.\n*\n*     12    See also FLOTIN and DFLTIN.\n*\n*  P.T.Wallace   Starlink   27 April 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\intin.f\n\"\"\"", "sla_invf": "\"\"\"\n*     - - - - -\n*      I N V F\n*     - - - - -\n*\n*  Invert a linear model of the type produced by the sla_FITXY routine.\n*\n*  Given:\n*     FWDS    d(6)      model coefficients\n*\n*  Returned:\n*     BKWDS   d(6)      inverse model\n*     J        i        status:  0 = OK, -1 = no inverse\n*\n*  The models relate two sets of [X,Y] coordinates as follows.\n*  Naming the elements of FWDS:\n*\n*     FWDS(1) = A\n*     FWDS(2) = B\n*     FWDS(3) = C\n*     FWDS(4) = D\n*     FWDS(5) = E\n*     FWDS(6) = F\n*\n*  where two sets of coordinates [X1,Y1] and [X2,Y1] are related\n*  thus:\n*\n*     X2 = A + B*X1 + C*Y1\n*     Y2 = D + E*X1 + F*Y1\n*\n*  the present routine generates a new set of coefficients:\n*\n*     BKWDS(1) = P\n*     BKWDS(2) = Q\n*     BKWDS(3) = R\n*     BKWDS(4) = S\n*     BKWDS(5) = T\n*     BKWDS(6) = U\n*\n*  such that:\n*\n*     X1 = P + Q*X2 + R*Y2\n*     Y1 = S + T*X2 + U*Y2\n*\n*  Two successive calls to sla_INVF will thus deliver a set\n*  of coefficients equal to the starting values.\n*\n*  To comply with the ANSI Fortran standard, FWDS and BKWDS must\n*  not be the same array, even though the routine is coded to\n*  work on many platforms even if this rule is violated.\n*\n*  See also sla_FITXY, sla_PXY, sla_XY2XY, sla_DCMPF\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\invf.f\n\"\"\"", "sla_kbj": "\"\"\"\n*     - - - -\n*      K B J\n*     - - - -\n*\n*  Select epoch prefix 'B' or 'J'\n*\n*  Given:\n*     JB     int     sla_DBJIN prefix status:  0=none, 1='B', 2='J'\n*     E      dp      epoch - Besselian or Julian\n*\n*  Returned:\n*     K      char    'B' or 'J'\n*     J      int     status:  0=OK\n*\n*  If JB=0, B is assumed for E < 1984D0, otherwise J.\n*\n*  P.T.Wallace   Starlink   31 July 1989\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\kbj.f\n\"\"\"", "sla_m2av": "\"\"\"\n*     - - - - -\n*      M 2 A V\n*     - - - - -\n*\n*  From a rotation matrix, determine the corresponding axial vector\n*  (single precision)\n*\n*  A rotation matrix describes a rotation about some arbitrary axis,\n*  called the Euler axis.  The \"axial vector\" returned by this routine\n*  has the same direction as the Euler axis, and its magnitude is the\n*  amount of rotation in radians.  (The magnitude and direction can be\n*  separated by means of the routine sla_VN.)\n*\n*  Given:\n*    RMAT   r(3,3)   rotation matrix\n*\n*  Returned:\n*    AXVEC  r(3)     axial vector (radians)\n*\n*  The reference frame rotates clockwise as seen looking along\n*  the axial vector from the origin.\n*\n*  If RMAT is null, so is the result.\n*\n*  Last revision:   26 November 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\m2av.f\n\"\"\"", "sla_map": "\"\"\"\n*     - - - -\n*      M A P\n*     - - - -\n*\n*  Transform star RA,Dec from mean place to geocentric apparent\n*\n*  The reference frames and timescales used are post IAU 1976.\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Given:\n*     RM,DM    dp     mean RA,Dec (rad)\n*     PR,PD    dp     proper motions:  RA,Dec changes per Julian year\n*     PX       dp     parallax (arcsec)\n*     RV       dp     radial velocity (km/sec, +ve if receding)\n*     EQ       dp     epoch and equinox of star data (Julian)\n*     DATE     dp     TDB for apparent place (JD-2400000.5)\n*\n*  Returned:\n*     RA,DA    dp     apparent RA,Dec (rad)\n*\n*  Called:\n*     sla_MAPPA       star-independent parameters\n*     sla_MAPQK       quick mean to apparent\n*\n*  Notes:\n*\n*  1)  EQ is the Julian epoch specifying both the reference frame and\n*      the epoch of the position - usually 2000.  For positions where\n*      the epoch and equinox are different, use the routine sla_PM to\n*      apply proper motion corrections before using this routine.\n*\n*  2)  The distinction between the required TDB and TT is always\n*      negligible.  Moreover, for all but the most critical\n*      applications UTC is adequate.\n*\n*  3)  The proper motions in RA are dRA/dt rather than cos(Dec)*dRA/dt.\n*\n*  4)  This routine may be wasteful for some applications because it\n*      recomputes the Earth position/velocity and the precession-\n*      nutation matrix each time, and because it allows for parallax\n*      and proper motion.  Where multiple transformations are to be\n*      carried out for one epoch, a faster method is to call the\n*      sla_MAPPA routine once and then either the sla_MAPQK routine\n*      (which includes parallax and proper motion) or sla_MAPQKZ (which\n*      assumes zero parallax and proper motion).\n*\n*  5)  The accuracy is sub-milliarcsecond, limited by the\n*      precession-nutation model (IAU 1976 precession, Shirai &\n*      Fukushima 2001 forced nutation and precession corrections).\n*\n*  6)  The accuracy is further limited by the routine sla_EVP, called\n*      by sla_MAPPA, which computes the Earth position and velocity\n*      using the methods of Stumpff.  The maximum error is about\n*      0.3 mas.\n*\n*  P.T.Wallace   Starlink   17 September 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\map.f\n\"\"\"", "sla_mappa": "\"\"\"\n*     - - - - - -\n*      M A P P A\n*     - - - - - -\n*\n*  Compute star-independent parameters in preparation for\n*  conversions between mean place and geocentric apparent place.\n*\n*  The parameters produced by this routine are required in the\n*  parallax, light deflection, aberration, and precession/nutation\n*  parts of the mean/apparent transformations.\n*\n*  The reference frames and timescales used are post IAU 1976.\n*\n*  Given:\n*     EQ       d      epoch of mean equinox to be used (Julian)\n*     DATE     d      TDB (JD-2400000.5)\n*\n*  Returned:\n*     AMPRMS   d(21)  star-independent mean-to-apparent parameters:\n*\n*       (1)      time interval for proper motion (Julian years)\n*       (2-4)    barycentric position of the Earth (AU)\n*       (5-7)    heliocentric direction of the Earth (unit vector)\n*       (8)      (grav rad Sun)*2/(Sun-Earth distance)\n*       (9-11)   ABV: barycentric Earth velocity in units of c\n*       (12)     sqrt(1-v**2) where v=modulus(ABV)\n*       (13-21)  precession/nutation (3,3) matrix\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Notes:\n*\n*  1)  For DATE, the distinction between the required TDB and TT\n*      is always negligible.  Moreover, for all but the most\n*      critical applications UTC is adequate.\n*\n*  2)  The vectors AMPRMS(2-4) and AMPRMS(5-7) are referred to\n*      the mean equinox and equator of epoch EQ.\n*\n*  3)  The parameters AMPRMS produced by this routine are used by\n*      sla_AMPQK, sla_MAPQK and sla_MAPQKZ.\n*\n*  4)  The accuracy is sub-milliarcsecond, limited by the\n*      precession-nutation model (IAU 1976 precession, Shirai &\n*      Fukushima 2001 forced nutation and precession corrections).\n*\n*  5)  A further limit to the accuracy of routines using the parameter\n*      array AMPRMS is imposed by the routine sla_EVP, used here to\n*      compute the Earth position and velocity by the methods of\n*      Stumpff.  The maximum error in the resulting aberration\n*      corrections is about 0.3 milliarcsecond.\n*\n*  Called:\n*     sla_EPJ         MDJ to Julian epoch\n*     sla_EVP         earth position & velocity\n*     sla_DVN         normalize vector\n*     sla_PRENUT      precession/nutation matrix\n*\n*  P.T.Wallace   Starlink   24 October 2003\n*\n*  Copyright (C) 2003 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\mappa.f\n\"\"\"", "sla_mapqk": "\"\"\"\n*     - - - - - -\n*      M A P Q K\n*     - - - - - -\n*\n*  Quick mean to apparent place:  transform a star RA,Dec from\n*  mean place to geocentric apparent place, given the\n*  star-independent parameters.\n*\n*  Use of this routine is appropriate when efficiency is important\n*  and where many star positions, all referred to the same equator\n*  and equinox, are to be transformed for one epoch.  The\n*  star-independent parameters can be obtained by calling the\n*  sla_MAPPA routine.\n*\n*  If the parallax and proper motions are zero the sla_MAPQKZ\n*  routine can be used instead.\n*\n*  The reference frames and timescales used are post IAU 1976.\n*\n*  Given:\n*     RM,DM    d      mean RA,Dec (rad)\n*     PR,PD    d      proper motions:  RA,Dec changes per Julian year\n*     PX       d      parallax (arcsec)\n*     RV       d      radial velocity (km/sec, +ve if receding)\n*\n*     AMPRMS   d(21)  star-independent mean-to-apparent parameters:\n*\n*       (1)      time interval for proper motion (Julian years)\n*       (2-4)    barycentric position of the Earth (AU)\n*       (5-7)    heliocentric direction of the Earth (unit vector)\n*       (8)      (grav rad Sun)*2/(Sun-Earth distance)\n*       (9-11)   barycentric Earth velocity in units of c\n*       (12)     sqrt(1-v**2) where v=modulus(ABV)\n*       (13-21)  precession/nutation (3,3) matrix\n*\n*  Returned:\n*     RA,DA    d      apparent RA,Dec (rad)\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Notes:\n*\n*  1)  The vectors AMPRMS(2-4) and AMPRMS(5-7) are referred to\n*      the mean equinox and equator of epoch EQ.\n*\n*  2)  Strictly speaking, the routine is not valid for solar-system\n*      sources, though the error will usually be extremely small.\n*      However, to prevent gross errors in the case where the\n*      position of the Sun is specified, the gravitational\n*      deflection term is restrained within about 920 arcsec of the\n*      centre of the Sun's disc.  The term has a maximum value of\n*      about 1.85 arcsec at this radius, and decreases to zero as\n*      the centre of the disc is approached.\n*\n*  Called:\n*     sla_DCS2C       spherical to Cartesian\n*     sla_DVDV        dot product\n*     sla_DMXV        matrix x vector\n*     sla_DCC2S       Cartesian to spherical\n*     sla_DRANRM      normalize angle 0-2Pi\n*\n*  P.T.Wallace   Starlink   15 January 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\mapqk.f\n\"\"\"", "sla_mapqkz": "\"\"\"\n*     - - - - - - -\n*      M A P Q K Z\n*     - - - - - - -\n*\n*  Quick mean to apparent place:  transform a star RA,Dec from\n*  mean place to geocentric apparent place, given the\n*  star-independent parameters, and assuming zero parallax\n*  and proper motion.\n*\n*  Use of this routine is appropriate when efficiency is important\n*  and where many star positions, all with parallax and proper\n*  motion either zero or already allowed for, and all referred to\n*  the same equator and equinox, are to be transformed for one\n*  epoch.  The star-independent parameters can be obtained by\n*  calling the sla_MAPPA routine.\n*\n*  The corresponding routine for the case of non-zero parallax\n*  and proper motion is sla_MAPQK.\n*\n*  The reference frames and timescales used are post IAU 1976.\n*\n*  Given:\n*     RM,DM    d      mean RA,Dec (rad)\n*     AMPRMS   d(21)  star-independent mean-to-apparent parameters:\n*\n*       (1-4)    not used\n*       (5-7)    heliocentric direction of the Earth (unit vector)\n*       (8)      (grav rad Sun)*2/(Sun-Earth distance)\n*       (9-11)   ABV: barycentric Earth velocity in units of c\n*       (12)     sqrt(1-v**2) where v=modulus(ABV)\n*       (13-21)  precession/nutation (3,3) matrix\n*\n*  Returned:\n*     RA,DA    d      apparent RA,Dec (rad)\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Notes:\n*\n*  1)  The vectors AMPRMS(2-4) and AMPRMS(5-7) are referred to the\n*      mean equinox and equator of epoch EQ.\n*\n*  2)  Strictly speaking, the routine is not valid for solar-system\n*      sources, though the error will usually be extremely small.\n*      However, to prevent gross errors in the case where the\n*      position of the Sun is specified, the gravitational\n*      deflection term is restrained within about 920 arcsec of the\n*      centre of the Sun's disc.  The term has a maximum value of\n*      about 1.85 arcsec at this radius, and decreases to zero as\n*      the centre of the disc is approached.\n*\n*  Called:  sla_DCS2C, sla_DVDV, sla_DMXV, sla_DCC2S, sla_DRANRM\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\mapqkz.f\n\"\"\"", "sla_moon": "\"\"\"\n*     - - - - -\n*      M O O N\n*     - - - - -\n*\n*  Approximate geocentric position and velocity of the Moon\n*  (single precision).\n*\n*  Given:\n*     IY       i       year\n*     ID       i       day in year (1 = Jan 1st)\n*     FD       r       fraction of day\n*\n*  Returned:\n*     PV       r(6)    Moon position & velocity vector\n*\n*  Notes:\n*\n*  1  The date and time is TDB (loosely ET) in a Julian calendar\n*     which has been aligned to the ordinary Gregorian\n*     calendar for the interval 1900 March 1 to 2100 February 28.\n*     The year and day can be obtained by calling sla_CALYD or\n*     sla_CLYD.\n*\n*  2  The Moon 6-vector is Moon centre relative to Earth centre,\n*     mean equator and equinox of date.  Position part, PV(1-3),\n*     is in AU;  velocity part, PV(4-6), is in AU/sec.\n*\n*  3  The position is accurate to better than 0.5 arcminute\n*     in direction and 1000 km in distance.  The velocity\n*     is accurate to better than 0.5\"/hour in direction and\n*     4 m/s in distance.  (RMS figures with respect to JPL DE200\n*     for the interval 1960-2025 are 14 arcsec and 0.2 arcsec/hour in\n*     longitude, 9 arcsec and 0.2 arcsec/hour in latitude, 350 km and\n*     2 m/s in distance.)  Note that the distance accuracy is\n*     comparatively poor because this routine is principally intended\n*     for computing topocentric direction.\n*\n*  4  This routine is only a partial implementation of the original\n*     Meeus algorithm (reference below), which offers 4 times the\n*     accuracy in direction and 30 times the accuracy in distance\n*     when fully implemented (as it is in sla_DMOON).\n*\n*  Reference:\n*     Meeus, l'Astronomie, June 1984, p348.\n*\n*  Called:  sla_CS2C6\n*\n*  P.T.Wallace   Starlink   8 December 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\moon.f\n\"\"\"", "sla_mxm": "\"\"\"\n*     - - - -\n*      M X M\n*     - - - -\n*\n*  Product of two 3x3 matrices:\n*      matrix C  =  matrix A  x  matrix B\n*\n*  (single precision)\n*\n*  Given:\n*      A      real(3,3)        matrix\n*      B      real(3,3)        matrix\n*\n*  Returned:\n*      C      real(3,3)        matrix result\n*\n*  To comply with the ANSI Fortran 77 standard, A, B and C must\n*  be different arrays.  However, the routine is coded so as to\n*  work properly on many platforms even if this rule is violated.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\mxm.f\n\"\"\"", "sla_mxv": "\"\"\"\n*     - - - -\n*      M X V\n*     - - - -\n*\n*  Performs the 3-D forward unitary transformation:\n*\n*     vector VB = matrix RM * vector VA\n*\n*  (single precision)\n*\n*  Given:\n*     RM       real(3,3)    matrix\n*     VA       real(3)      vector\n*\n*  Returned:\n*     VB       real(3)      result vector\n*\n*  To comply with the ANSI Fortran 77 standard, VA and VB must be\n*  different arrays.  However, the routine is coded so as to work\n*  properly on many platforms even if this rule is violated.\n*\n*  Last revision:   26 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\mxv.f\n\"\"\"", "sla_nut": "\"\"\"\n*     - - - -\n*      N U T\n*     - - - -\n*\n*  Form the matrix of nutation for a given date - Shirai & Fukushima\n*  2001 theory (double precision)\n*\n*  Reference:\n*     Shirai, T. & Fukushima, T., Astron.J. 121, 3270-3283 (2001).\n*\n*  Given:\n*     DATE    d          TDB (loosely ET) as Modified Julian Date\n*                                           (=JD-2400000.5)\n*  Returned:\n*     RMATN   d(3,3)     nutation matrix\n*\n*  Notes:\n*\n*  1  The matrix is in the sense  v(true) = rmatn * v(mean) .\n*     where v(true) is the star vector relative to the true equator and\n*     equinox of date and v(mean) is the star vector relative to the\n*     mean equator and equinox of date.\n*\n*  2  The matrix represents forced nutation (but not free core\n*     nutation) plus corrections to the IAU~1976 precession model.\n*\n*  3  Earth attitude predictions made by combining the present nutation\n*     matrix with IAU~1976 precession are accurate to 1~mas (with\n*     respect to the ICRS) for a few decades around 2000.\n*\n*  4  The distinction between the required TDB and TT is always\n*     negligible.  Moreover, for all but the most critical applications\n*     UTC is adequate.\n*\n*  Called:   sla_NUTC, sla_DEULER\n*\n*  Last revision:   1 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\nut.f\n\"\"\"", "sla_nutc": "\"\"\"\n*     - - - - -\n*      N U T C\n*     - - - - -\n*\n*  Nutation:  longitude & obliquity components and mean obliquity,\n*  using the Shirai & Fukushima (2001) theory.\n*\n*  Given:\n*     DATE        d    TDB (loosely ET) as Modified Julian Date\n*                                            (JD-2400000.5)\n*  Returned:\n*     DPSI,DEPS   d    nutation in longitude,obliquity\n*     EPS0        d    mean obliquity\n*\n*  Notes:\n*\n*  1  The routine predicts forced nutation (but not free core nutation)\n*     plus corrections to the IAU 1976 precession model.\n*\n*  2  Earth attitude predictions made by combining the present nutation\n*     model with IAU 1976 precession are accurate to 1 mas (with respect\n*     to the ICRF) for a few decades around 2000.\n*\n*  3  The sla_NUTC80 routine is the equivalent of the present routine\n*     but using the IAU 1980 nutation theory.  The older theory is less\n*     accurate, leading to errors as large as 350 mas over the interval\n*     1900-2100, mainly because of the error in the IAU 1976 precession.\n*\n*  References:\n*\n*     Shirai, T. & Fukushima, T., Astron.J. 121, 3270-3283 (2001).\n*\n*     Fukushima, T., Astron.Astrophys. 244, L11 (1991).\n*\n*     Simon, J. L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n*     Francou, G. & Laskar, J., Astron.Astrophys. 282, 663 (1994).\n*\n*  This revision:   24 November 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\nutc.f\n\"\"\"", "sla_nutc80": "\"\"\"\n*     - - - - - - -\n*      N U T C 8 0\n*     - - - - - - -\n*\n*  Nutation:  longitude & obliquity components and mean obliquity,\n*  using the IAU 1980 theory (double precision)\n*\n*  Given:\n*     DATE        d     TDB (loosely ET) as Modified Julian Date\n*                                            (JD-2400000.5)\n*  Returned:\n*     DPSI,DEPS   d     nutation in longitude,obliquity\n*     EPS0        d     mean obliquity\n*\n*  Called:  sla_DRANGE\n*\n*  Notes:\n*\n*  1  Earth attitude predictions made by combining the present nutation\n*     model with IAU 1976 precession are accurate to 0.35 arcsec over\n*     the interval 1900-2100.  (The accuracy is much better near the\n*     middle of the interval.)\n*\n*  2  The sla_NUTC routine is the equivalent of the present routine\n*     but using the Shirai & Fukushima 2001 forced nutation theory\n*     (SF2001).  The newer theory is more accurate than IAU 1980,\n*     within 1 mas (with respect to the ICRF) for a few decades around\n*     2000.  The improvement is mainly because of the corrections to the\n*     IAU 1976 precession that the SF2001 theory includes.\n*\n*  References:\n*     Final report of the IAU Working Group on Nutation,\n*      chairman P.K.Seidelmann, 1980.\n*     Kaplan,G.H., 1981, USNO circular no. 163, pA3-6.\n*\n*  P.T.Wallace   Starlink   7 October 2001\n*\n*  Copyright (C) 2001 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\nutc80.f\n\"\"\"", "sla_oap": "\"\"\"\n*     - - - -\n*      O A P\n*     - - - -\n*\n*  Observed to apparent place.\n*\n*  Given:\n*     TYPE   c*(*)  type of coordinates - 'R', 'H' or 'A' (see below)\n*     OB1    d      observed Az, HA or RA (radians; Az is N=0,E=90)\n*     OB2    d      observed ZD or Dec (radians)\n*     DATE   d      UTC date/time (modified Julian Date, JD-2400000.5)\n*     DUT    d      delta UT:  UT1-UTC (UTC seconds)\n*     ELONGM d      mean longitude of the observer (radians, east +ve)\n*     PHIM   d      mean geodetic latitude of the observer (radians)\n*     HM     d      observer's height above sea level (metres)\n*     XP     d      polar motion x-coordinate (radians)\n*     YP     d      polar motion y-coordinate (radians)\n*     TDK    d      local ambient temperature (K; std=273.15D0)\n*     PMB    d      local atmospheric pressure (mb; std=1013.25D0)\n*     RH     d      local relative humidity (in the range 0D0-1D0)\n*     WL     d      effective wavelength (micron, e.g. 0.55D0)\n*     TLR    d      tropospheric lapse rate (K/metre, e.g. 0.0065D0)\n*\n*  Returned:\n*     RAP    d      geocentric apparent right ascension\n*     DAP    d      geocentric apparent declination\n*\n*  Notes:\n*\n*  1)  Only the first character of the TYPE argument is significant.\n*      'R' or 'r' indicates that OBS1 and OBS2 are the observed right\n*      ascension and declination;  'H' or 'h' indicates that they are\n*      hour angle (west +ve) and declination;  anything else ('A' or\n*      'a' is recommended) indicates that OBS1 and OBS2 are azimuth\n*      (north zero, east 90 deg) and zenith distance.  (Zenith\n*      distance is used rather than elevation in order to reflect the\n*      fact that no allowance is made for depression of the horizon.)\n*\n*  2)  The accuracy of the result is limited by the corrections for\n*      refraction.  Providing the meteorological parameters are\n*      known accurately and there are no gross local effects, the\n*      predicted apparent RA,Dec should be within about 0.1 arcsec\n*      for a zenith distance of less than 70 degrees.  Even at a\n*      topocentric zenith distance of 90 degrees, the accuracy in\n*      elevation should be better than 1 arcmin;  useful results\n*      are available for a further 3 degrees, beyond which the\n*      sla_REFRO routine returns a fixed value of the refraction.\n*      The complementary routines sla_AOP (or sla_AOPQK) and sla_OAP\n*      (or sla_OAPQK) are self-consistent to better than 1 micro-\n*      arcsecond all over the celestial sphere.\n*\n*  3)  It is advisable to take great care with units, as even\n*      unlikely values of the input parameters are accepted and\n*      processed in accordance with the models used.\n*\n*  4)  \"Observed\" Az,El means the position that would be seen by a\n*      perfect theodolite located at the observer.  This is\n*      related to the observed HA,Dec via the standard rotation, using\n*      the geodetic latitude (corrected for polar motion), while the\n*      observed HA and RA are related simply through the local\n*      apparent ST.  \"Observed\" RA,Dec or HA,Dec thus means the\n*      position that would be seen by a perfect equatorial located\n*      at the observer and with its polar axis aligned to the\n*      Earth's axis of rotation (n.b. not to the refracted pole).\n*      By removing from the observed place the effects of\n*      atmospheric refraction and diurnal aberration, the\n*      geocentric apparent RA,Dec is obtained.\n*\n*  5)  Frequently, mean rather than apparent RA,Dec will be required,\n*      in which case further transformations will be necessary.  The\n*      sla_AMP etc routines will convert the apparent RA,Dec produced\n*      by the present routine into an \"FK5\" (J2000) mean place, by\n*      allowing for the Sun's gravitational lens effect, annual\n*      aberration, nutation and precession.  Should \"FK4\" (1950)\n*      coordinates be needed, the routines sla_FK524 etc will also\n*      need to be applied.\n*\n*  6)  To convert to apparent RA,Dec the coordinates read from a\n*      real telescope, corrections would have to be applied for\n*      encoder zero points, gear and encoder errors, tube flexure,\n*      the position of the rotator axis and the pointing axis\n*      relative to it, non-perpendicularity between the mounting\n*      axes, and finally for the tilt of the azimuth or polar axis\n*      of the mounting (with appropriate corrections for mount\n*      flexures).  Some telescopes would, of course, exhibit other\n*      properties which would need to be accounted for at the\n*      appropriate point in the sequence.\n*\n*  7)  This routine takes time to execute, due mainly to the rigorous\n*      integration used to evaluate the refraction.  For processing\n*      multiple stars for one location and time, call sla_AOPPA once\n*      followed by one call per star to sla_OAPQK.  Where a range of\n*      times within a limited period of a few hours is involved, and the\n*      highest precision is not required, call sla_AOPPA once, followed\n*      by a call to sla_AOPPAT each time the time changes, followed by\n*      one call per star to sla_OAPQK.\n*\n*  8)  The DATE argument is UTC expressed as an MJD.  This is, strictly\n*      speaking, wrong, because of leap seconds.  However, as long as\n*      the delta UT and the UTC are consistent there are no\n*      difficulties, except during a leap second.  In this case, the\n*      start of the 61st second of the final minute should begin a new\n*      MJD day and the old pre-leap delta UT should continue to be used.\n*      As the 61st second completes, the MJD should revert to the start\n*      of the day as, simultaneously, the delta UTC changes by one\n*      second to its post-leap new value.\n*\n*  9)  The delta UT (UT1-UTC) is tabulated in IERS circulars and\n*      elsewhere.  It increases by exactly one second at the end of\n*      each UTC leap second, introduced in order to keep delta UT\n*      within +/- 0.9 seconds.\n*\n*  10) IMPORTANT -- TAKE CARE WITH THE LONGITUDE SIGN CONVENTION.\n*      The longitude required by the present routine is east-positive,\n*      in accordance with geographical convention (and right-handed).\n*      In particular, note that the longitudes returned by the\n*      sla_OBS routine are west-positive, following astronomical\n*      usage, and must be reversed in sign before use in the present\n*      routine.\n*\n*  11) The polar coordinates XP,YP can be obtained from IERS\n*      circulars and equivalent publications.  The maximum amplitude\n*      is about 0.3 arcseconds.  If XP,YP values are unavailable,\n*      use XP=YP=0D0.  See page B60 of the 1988 Astronomical Almanac\n*      for a definition of the two angles.\n*\n*  12) The height above sea level of the observing station, HM,\n*      can be obtained from the Astronomical Almanac (Section J\n*      in the 1988 edition), or via the routine sla_OBS.  If P,\n*      the pressure in millibars, is available, an adequate\n*      estimate of HM can be obtained from the expression\n*\n*             HM ~ -29.3D0*TSL*LOG(P/1013.25D0).\n*\n*      where TSL is the approximate sea-level air temperature in K\n*      (see Astrophysical Quantities, C.W.Allen, 3rd edition,\n*      section 52).  Similarly, if the pressure P is not known,\n*      it can be estimated from the height of the observing\n*      station, HM, as follows:\n*\n*             P ~ 1013.25D0*EXP(-HM/(29.3D0*TSL)).\n*\n*      Note, however, that the refraction is nearly proportional to the\n*      pressure and that an accurate P value is important for precise\n*      work.\n*\n*  13) The azimuths etc. used by the present routine are with respect\n*      to the celestial pole.  Corrections from the terrestrial pole\n*      can be computed using sla_POLMO.\n*\n*  Called:  sla_AOPPA, sla_OAPQK\n*\n*  Last revision:   2 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\oap.f\n\"\"\"", "sla_oapqk": "\"\"\"\n*     - - - - - -\n*      O A P Q K\n*     - - - - - -\n*\n*  Quick observed to apparent place\n*\n*  Given:\n*     TYPE   c*(*)  type of coordinates - 'R', 'H' or 'A' (see below)\n*     OB1    d      observed Az, HA or RA (radians; Az is N=0,E=90)\n*     OB2    d      observed ZD or Dec (radians)\n*     AOPRMS d(14)  star-independent apparent-to-observed parameters:\n*\n*       (1)      geodetic latitude (radians)\n*       (2,3)    sine and cosine of geodetic latitude\n*       (4)      magnitude of diurnal aberration vector\n*       (5)      height (HM)\n*       (6)      ambient temperature (T)\n*       (7)      pressure (P)\n*       (8)      relative humidity (RH)\n*       (9)      wavelength (WL)\n*       (10)     lapse rate (TLR)\n*       (11,12)  refraction constants A and B (radians)\n*       (13)     longitude + eqn of equinoxes + sidereal DUT (radians)\n*       (14)     local apparent sidereal time (radians)\n*\n*  Returned:\n*     RAP    d      geocentric apparent right ascension\n*     DAP    d      geocentric apparent declination\n*\n*  Notes:\n*\n*  1)  Only the first character of the TYPE argument is significant.\n*      'R' or 'r' indicates that OBS1 and OBS2 are the observed right\n*      ascension and declination;  'H' or 'h' indicates that they are\n*      hour angle (west +ve) and declination;  anything else ('A' or\n*      'a' is recommended) indicates that OBS1 and OBS2 are azimuth\n*      (north zero, east 90 deg) and zenith distance.  (Zenith distance\n*      is used rather than elevation in order to reflect the fact that\n*      no allowance is made for depression of the horizon.)\n*\n*  2)  The accuracy of the result is limited by the corrections for\n*      refraction.  Providing the meteorological parameters are\n*      known accurately and there are no gross local effects, the\n*      predicted apparent RA,Dec should be within about 0.1 arcsec\n*      for a zenith distance of less than 70 degrees.  Even at a\n*      topocentric zenith distance of 90 degrees, the accuracy in\n*      elevation should be better than 1 arcmin;  useful results\n*      are available for a further 3 degrees, beyond which the\n*      sla_REFRO routine returns a fixed value of the refraction.\n*      The complementary routines sla_AOP (or sla_AOPQK) and sla_OAP\n*      (or sla_OAPQK) are self-consistent to better than 1 micro-\n*      arcsecond all over the celestial sphere.\n*\n*  3)  It is advisable to take great care with units, as even\n*      unlikely values of the input parameters are accepted and\n*      processed in accordance with the models used.\n*\n*  5)  \"Observed\" Az,El means the position that would be seen by a\n*      perfect theodolite located at the observer.  This is\n*      related to the observed HA,Dec via the standard rotation, using\n*      the geodetic latitude (corrected for polar motion), while the\n*      observed HA and RA are related simply through the local\n*      apparent ST.  \"Observed\" RA,Dec or HA,Dec thus means the\n*      position that would be seen by a perfect equatorial located\n*      at the observer and with its polar axis aligned to the\n*      Earth's axis of rotation (n.b. not to the refracted pole).\n*      By removing from the observed place the effects of\n*      atmospheric refraction and diurnal aberration, the\n*      geocentric apparent RA,Dec is obtained.\n*\n*  5)  Frequently, mean rather than apparent RA,Dec will be required,\n*      in which case further transformations will be necessary.  The\n*      sla_AMP etc routines will convert the apparent RA,Dec produced\n*      by the present routine into an \"FK5\" (J2000) mean place, by\n*      allowing for the Sun's gravitational lens effect, annual\n*      aberration, nutation and precession.  Should \"FK4\" (1950)\n*      coordinates be needed, the routines sla_FK524 etc will also\n*      need to be applied.\n*\n*  6)  To convert to apparent RA,Dec the coordinates read from a\n*      real telescope, corrections would have to be applied for\n*      encoder zero points, gear and encoder errors, tube flexure,\n*      the position of the rotator axis and the pointing axis\n*      relative to it, non-perpendicularity between the mounting\n*      axes, and finally for the tilt of the azimuth or polar axis\n*      of the mounting (with appropriate corrections for mount\n*      flexures).  Some telescopes would, of course, exhibit other\n*      properties which would need to be accounted for at the\n*      appropriate point in the sequence.\n*\n*  7)  The star-independent apparent-to-observed-place parameters\n*      in AOPRMS may be computed by means of the sla_AOPPA routine.\n*      If nothing has changed significantly except the time, the\n*      sla_AOPPAT routine may be used to perform the requisite\n*      partial recomputation of AOPRMS.\n*\n*  8) The azimuths etc used by the present routine are with respect\n*     to the celestial pole.  Corrections from the terrestrial pole\n*     can be computed using sla_POLMO.\n*\n*  Called:  sla_DCS2C, sla_DCC2S, sla_REFRO, sla_DRANRM\n*\n*  Last revision:   29 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\oapqk.f\n\"\"\"", "sla_obs": "\"\"\"\n*     - - - -\n*      O B S\n*     - - - -\n*\n*  Parameters of selected groundbased observing stations\n*\n*  Given:\n*     N       int     number specifying observing station\n*\n*  Either given or returned\n*     C       c*(*)   identifier specifying observing station\n*\n*  Returned:\n*     NAME    c*(*)   name of specified observing station\n*     W       dp      longitude (radians, West +ve)\n*     P       dp      geodetic latitude (radians, North +ve)\n*     H       dp      height above sea level (metres)\n*\n*  Notes:\n*\n*     Station identifiers C may be up to 10 characters long,\n*     and station names NAME may be up to 40 characters long.\n*\n*     C and N are alternative ways of specifying the observing\n*     station.  The C option, which is the most generally useful,\n*     may be selected by specifying an N value of zero or less.\n*     If N is 1 or more, the parameters of the Nth station\n*     in the currently supported list are interrogated, and\n*     the station identifier C is returned as well as NAME, W,\n*     P and H.\n*\n*     If the station parameters are not available, either because\n*     the station identifier C is not recognized, or because an\n*     N value greater than the number of stations supported is\n*     given, a name of '?' is returned and C, W, P and H are left\n*     in their current states.\n*\n*     Programs can obtain a list of all currently supported\n*     stations by calling the routine repeatedly, with N=1,2,3...\n*     When NAME='?' is seen, the list of stations has been\n*     exhausted.\n*\n*     Station numbers, identifiers, names and other details are\n*     subject to change and should not be hardwired into\n*     application programs.\n*\n*     All station identifiers C are uppercase only;  lowercase\n*     characters must be converted to uppercase by the calling\n*     program.  The station names returned may contain both upper-\n*     and lowercase.  All characters up to the first space are\n*     checked;  thus an abbreviated ID will return the parameters\n*     for the first station in the list which matches the\n*     abbreviation supplied, and no station in the list will ever\n*     contain embedded spaces.  C must not have leading spaces.\n*\n*     IMPORTANT -- BEWARE OF THE LONGITUDE SIGN CONVENTION.  The\n*     longitude returned by sla_OBS is west-positive in accordance\n*     with astronomical usage.  However, this sign convention is\n*     left-handed and is the opposite of the one used by geographers;\n*     elsewhere in SLALIB the preferable east-positive convention is\n*     used.  In particular, note that for use in sla_AOP, sla_AOPPA\n*     and sla_OAP the sign of the longitude must be reversed.\n*\n*     Users are urged to inform the author of any improvements\n*     they would like to see made.  For example:\n*\n*         typographical corrections\n*         more accurate parameters\n*         better station identifiers or names\n*         additional stations\n*\n*  P.T.Wallace   Starlink   15 March 2002\n*\n*  Copyright (C) 2002 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\obs.f\n\"\"\"", "sla_pa": "\"\"\"\n*     - - -\n*      P A\n*     - - -\n*\n*  HA, Dec to Parallactic Angle (double precision)\n*\n*  Given:\n*     HA     d     hour angle in radians (geocentric apparent)\n*     DEC    d     declination in radians (geocentric apparent)\n*     PHI    d     observatory latitude in radians (geodetic)\n*\n*  The result is in the range -pi to +pi\n*\n*  Notes:\n*\n*  1)  The parallactic angle at a point in the sky is the position\n*      angle of the vertical, i.e. the angle between the direction to\n*      the pole and to the zenith.  In precise applications care must\n*      be taken only to use geocentric apparent HA,Dec and to consider\n*      separately the effects of atmospheric refraction and telescope\n*      mount errors.\n*\n*  2)  At the pole a zero result is returned.\n*\n*  P.T.Wallace   Starlink   16 August 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pa.f\n\"\"\"", "sla_pav": "\"\"\"\n*     - - - -\n*      P A V\n*     - - - -\n*\n*  Position angle of one celestial direction with respect to another.\n*\n*  (single precision)\n*\n*  Given:\n*     V1    r(3)    direction cosines of one point\n*     V2    r(3)    direction cosines of the other point\n*\n*  (The coordinate frames correspond to RA,Dec, Long,Lat etc.)\n*\n*  The result is the bearing (position angle), in radians, of point\n*  V2 with respect to point V1.  It is in the range +/- pi.  The\n*  sense is such that if V2 is a small distance east of V1, the\n*  bearing is about +pi/2.  Zero is returned if the two points\n*  are coincident.\n*\n*  V1 and V2 do not have to be unit vectors.\n*\n*  The routine sla_BEAR performs an equivalent function except\n*  that the points are specified in the form of spherical\n*  coordinates.\n*\n*  Called:  sla_DPAV\n*\n*  Last revision:   11 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pav.f\n\"\"\"", "sla_pcd": "\"\"\"\n*     - - - -\n*      P C D\n*     - - - -\n*\n*  Apply pincushion/barrel distortion to a tangent-plane [x,y].\n*\n*  Given:\n*     DISCO    d      pincushion/barrel distortion coefficient\n*     X,Y      d      tangent-plane coordinates\n*\n*  Returned:\n*     X,Y      d      distorted coordinates\n*\n*  Notes:\n*\n*  1)  The distortion is of the form RP = R*(1 + C*R**2), where R is\n*      the radial distance from the tangent point, C is the DISCO\n*      argument, and RP is the radial distance in the presence of\n*      the distortion.\n*\n*  2)  For pincushion distortion, C is +ve;  for barrel distortion,\n*      C is -ve.\n*\n*  3)  For X,Y in units of one projection radius (in the case of\n*      a photographic plate, the focal length), the following\n*      DISCO values apply:\n*\n*          Geometry          DISCO\n*\n*          astrograph         0.0\n*          Schmidt           -0.3333\n*          AAT PF doublet  +147.069\n*          AAT PF triplet  +178.585\n*          AAT f/8          +21.20\n*          JKT f/8          +13.32\n*\n*  4)  There is a companion routine, sla_UNPCD, which performs the\n*      inverse operation.\n*\n*  P.T.Wallace   Starlink   3 September 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pcd.f\n\"\"\"", "sla_pda2h": "\"\"\"\n*     - - - - - -\n*      P D A 2 H\n*     - - - - - -\n*\n*  Hour Angle corresponding to a given azimuth\n*\n*  (double precision)\n*\n*  Given:\n*     P       d        latitude\n*     D       d        declination\n*     A       d        azimuth\n*\n*  Returned:\n*     H1      d        hour angle:  first solution if any\n*     J1      i        flag: 0 = solution 1 is valid\n*     H2      d        hour angle:  second solution if any\n*     J2      i        flag: 0 = solution 2 is valid\n*\n*  Called:  sla_DRANGE\n*\n*  P.T.Wallace   Starlink   6 October 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pda2h.f\n\"\"\"", "sla_pdq2h": "\"\"\"\n*     - - - - - -\n*      P D Q 2 H\n*     - - - - - -\n*\n*  Hour Angle corresponding to a given parallactic angle\n*\n*  (double precision)\n*\n*  Given:\n*     P       d        latitude\n*     D       d        declination\n*     Q       d        parallactic angle\n*\n*  Returned:\n*     H1      d        hour angle:  first solution if any\n*     J1      i        flag: 0 = solution 1 is valid\n*     H2      d        hour angle:  second solution if any\n*     J2      i        flag: 0 = solution 2 is valid\n*\n*  Called:  sla_DRANGE\n*\n*  P.T.Wallace   Starlink   6 October 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pdq2h.f\n\"\"\"", "sla_permut": "\"\"\"\n*     - - - - - - -\n*      P E R M U T\n*     - - - - - - -\n*\n*  Generate the next permutation of a specified number of items.\n*\n*  Given:\n*     N         i      number of items:  there will be N! permutations\n*\n*  Given and returned:\n*     ISTATE    i(N)   state, ISTATE(1)=-1 to initialize\n*\n*  Returned:\n*     IORDER    i(N)   next permutation of numbers 1,2,...,N\n*     J         i      status: -1 = illegal N (zero or less is illegal)\n*                               0 = OK\n*                              +1 = no more permutations available\n*\n*  Notes:\n*\n*  1) This routine returns, in the IORDER array, the integers 1 to N\n*     inclusive, in an order that depends on the current contents of\n*     the ISTATE array.  Before calling the routine for the first\n*     time, the caller must set the first element of the ISTATE array\n*     to -1 (any negative number will do) to cause the ISTATE array\n*     to be fully initialized.\n*\n*  2) The first permutation to be generated is:\n*\n*          IORDER(1)=N, IORDER(2)=N-1, ..., IORDER(N)=1\n*\n*     This is also the permutation returned for the \"finished\"\n*     (J=1) case.\n*\n*     The final permutation to be generated is:\n*\n*          IORDER(1)=1, IORDER(2)=2, ..., IORDER(N)=N\n*\n*  3) If the \"finished\" (J=1) status is ignored, the routine continues\n*     to deliver permutations, the pattern repeating every N! calls.\n*\n*  Last revision:   19 February 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\permut.f\n\"\"\"", "sla_pertel": "\"\"\"\n*     - - - - - - -\n*      P E R T E L\n*     - - - - - - -\n*\n*  Update the osculating orbital elements of an asteroid or comet by\n*  applying planetary perturbations.\n*\n*  Given (format and dates):\n*     JFORM   i    choice of element set (2 or 3; Note 1)\n*     DATE0   d    date of osculation (TT MJD) for the given elements\n*     DATE1   d    date of osculation (TT MJD) for the updated elements\n*\n*  Given (the unperturbed elements):\n*     EPOCH0  d    epoch (TT MJD) of the given element set (Note 2)\n*     ORBI0   d    inclination (radians)\n*     ANODE0  d    longitude of the ascending node (radians)\n*     PERIH0  d    argument of perihelion (radians)\n*     AORQ0   d    mean distance or perihelion distance (AU)\n*     E0      d    eccentricity\n*     AM0     d    mean anomaly (radians, JFORM=2 only)\n*\n*  Returned (the updated elements):\n*     EPOCH1  d    epoch (TT MJD) of the updated element set (Note 2)\n*     ORBI1   d    inclination (radians)\n*     ANODE1  d    longitude of the ascending node (radians)\n*     PERIH1  d    argument of perihelion (radians)\n*     AORQ1   d    mean distance or perihelion distance (AU)\n*     E1      d    eccentricity\n*     AM1     d    mean anomaly (radians, JFORM=2 only)\n*\n*  Returned (status flag):\n*     JSTAT   i    status: +102 = warning, distant epoch\n*                          +101 = warning, large timespan ( > 100 years)\n*                     +1 to +10 = coincident with planet (Note 6)\n*                             0 = OK\n*                            -1 = illegal JFORM\n*                            -2 = illegal E0\n*                            -3 = illegal AORQ0\n*                            -4 = internal error\n*                            -5 = numerical error\n*\n*  Notes:\n*\n*  1  Two different element-format options are available:\n*\n*     Option JFORM=2, suitable for minor planets:\n*\n*     EPOCH   = epoch of elements (TT MJD)\n*     ORBI    = inclination i (radians)\n*     ANODE   = longitude of the ascending node, big omega (radians)\n*     PERIH   = argument of perihelion, little omega (radians)\n*     AORQ    = mean distance, a (AU)\n*     E       = eccentricity, e\n*     AM      = mean anomaly M (radians)\n*\n*     Option JFORM=3, suitable for comets:\n*\n*     EPOCH   = epoch of perihelion (TT MJD)\n*     ORBI    = inclination i (radians)\n*     ANODE   = longitude of the ascending node, big omega (radians)\n*     PERIH   = argument of perihelion, little omega (radians)\n*     AORQ    = perihelion distance, q (AU)\n*     E       = eccentricity, e\n*\n*  2  DATE0, DATE1, EPOCH0 and EPOCH1 are all instants of time in\n*     the TT timescale (formerly Ephemeris Time, ET), expressed\n*     as Modified Julian Dates (JD-2400000.5).\n*\n*     DATE0 is the instant at which the given (i.e. unperturbed)\n*     osculating elements are correct.\n*\n*     DATE1 is the specified instant at which the updated osculating\n*     elements are correct.\n*\n*     EPOCH0 and EPOCH1 will be the same as DATE0 and DATE1\n*     (respectively) for the JFORM=2 case, normally used for minor\n*     planets.  For the JFORM=3 case, the two epochs will refer to\n*     perihelion passage and so will not, in general, be the same as\n*     DATE0 and/or DATE1 though they may be similar to one another.\n*\n*  3  The elements are with respect to the J2000 ecliptic and equinox.\n*\n*  4  Unused elements (AM0 and AM1 for JFORM=3) are not accessed.\n*\n*  5  See the sla_PERTUE routine for details of the algorithm used.\n*\n*  6  This routine is not intended to be used for major planets, which\n*     is why JFORM=1 is not available and why there is no opportunity\n*     to specify either the longitude of perihelion or the daily\n*     motion.  However, if JFORM=2 elements are somehow obtained for a\n*     major planet and supplied to the routine, sensible results will,\n*     in fact, be produced.  This happens because the sla_PERTUE routine\n*     that is called to perform the calculations checks the separation\n*     between the body and each of the planets and interprets a\n*     suspiciously small value (0.001 AU) as an attempt to apply it to\n*     the planet concerned.  If this condition is detected, the\n*     contribution from that planet is ignored, and the status is set to\n*     the planet number (1-10 = Mercury, Venus, EMB, Mars, Jupiter,\n*     Saturn, Uranus, Neptune, Earth, Moon) as a warning.\n*\n*  Reference:\n*\n*     Sterne, Theodore E., \"An Introduction to Celestial Mechanics\",\n*     Interscience Publishers Inc., 1960.  Section 6.7, p199.\n*\n*  Called:  sla_EL2UE, sla_PERTUE, sla_UE2EL\n*\n*  This revision:   19 June 2004\n*\n*  Copyright (C) 2004 P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pertel.f\n\"\"\"", "sla_pertue": "\"\"\"\n*     - - - - - - -\n*      P E R T U E\n*     - - - - - - -\n*\n*  Update the universal elements of an asteroid or comet by applying\n*  planetary perturbations.\n*\n*  Given:\n*     DATE     d       final epoch (TT MJD) for the updated elements\n*\n*  Given and returned:\n*     U        d(13)   universal elements (updated in place)\n*\n*                (1)   combined mass (M+m)\n*                (2)   total energy of the orbit (alpha)\n*                (3)   reference (osculating) epoch (t0)\n*              (4-6)   position at reference epoch (r0)\n*              (7-9)   velocity at reference epoch (v0)\n*               (10)   heliocentric distance at reference epoch\n*               (11)   r0.v0\n*               (12)   date (t)\n*               (13)   universal eccentric anomaly (psi) of date, approx\n*\n*  Returned:\n*     JSTAT    i       status:\n*                          +102 = warning, distant epoch\n*                          +101 = warning, large timespan ( > 100 years)\n*                     +1 to +10 = coincident with major planet (Note 5)\n*                             0 = OK\n*                            -1 = numerical error\n*\n*  Called:  sla_EPJ, sla_PLANET, sla_PV2UE, sla_UE2PV, sla_EPV,\n*           sla_PREC, sla_DMOON, sla_DMXV\n*\n*  Notes:\n*\n*  1  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference 2).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  2  The universal elements are with respect to the J2000 equator and\n*     equinox.\n*\n*  3  The epochs DATE, U(3) and U(12) are all Modified Julian Dates\n*     (JD-2400000.5).\n*\n*  4  The algorithm is a simplified form of Encke's method.  It takes as\n*     a basis the unperturbed motion of the body, and numerically\n*     integrates the perturbing accelerations from the major planets.\n*     The expression used is essentially Sterne's 6.7-2 (reference 1).\n*     Everhart and Pitkin (reference 2) suggest rectifying the orbit at\n*     each integration step by propagating the new perturbed position\n*     and velocity as the new universal variables.  In the present\n*     routine the orbit is rectified less frequently than this, in order\n*     to gain a slight speed advantage.  However, the rectification is\n*     done directly in terms of position and velocity, as suggested by\n*     Everhart and Pitkin, bypassing the use of conventional orbital\n*     elements.\n*\n*     The f(q) part of the full Encke method is not used.  The purpose\n*     of this part is to avoid subtracting two nearly equal quantities\n*     when calculating the \"indirect member\", which takes account of the\n*     small change in the Sun's attraction due to the slightly displaced\n*     position of the perturbed body.  A simpler, direct calculation in\n*     double precision proves to be faster and not significantly less\n*     accurate.\n*\n*     Apart from employing a variable timestep, and occasionally\n*     \"rectifying the orbit\" to keep the indirect member small, the\n*     integration is done in a fairly straightforward way.  The\n*     acceleration estimated for the middle of the timestep is assumed\n*     to apply throughout that timestep;  it is also used in the\n*     extrapolation of the perturbations to the middle of the next\n*     timestep, to predict the new disturbed position.  There is no\n*     iteration within a timestep.\n*\n*     Measures are taken to reach a compromise between execution time\n*     and accuracy.  The starting-point is the goal of achieving\n*     arcsecond accuracy for ordinary minor planets over a ten-year\n*     timespan.  This goal dictates how large the timesteps can be,\n*     which in turn dictates how frequently the unperturbed motion has\n*     to be recalculated from the osculating elements.\n*\n*     Within predetermined limits, the timestep for the numerical\n*     integration is varied in length in inverse proportion to the\n*     magnitude of the net acceleration on the body from the major\n*     planets.\n*\n*     The numerical integration requires estimates of the major-planet\n*     motions.  Approximate positions for the major planets (Pluto\n*     alone is omitted) are obtained from the routine sla_PLANET.  Two\n*     levels of interpolation are used, to enhance speed without\n*     significantly degrading accuracy.  At a low frequency, the routine\n*     sla_PLANET is called to generate updated position+velocity \"state\n*     vectors\".  The only task remaining to be carried out at the full\n*     frequency (i.e. at each integration step) is to use the state\n*     vectors to extrapolate the planetary positions.  In place of a\n*     strictly linear extrapolation, some allowance is made for the\n*     curvature of the orbit by scaling back the radius vector as the\n*     linear extrapolation goes off at a tangent.\n*\n*     Various other approximations are made.  For example, perturbations\n*     by Pluto and the minor planets are neglected and relativistic\n*     effects are not taken into account.\n*\n*     In the interests of simplicity, the background calculations for\n*     the major planets are carried out en masse.  The mean elements and\n*     state vectors for all the planets are refreshed at the same time,\n*     without regard for orbit curvature, mass or proximity.\n*\n*     The Earth-Moon system is treated as a single body when the body is\n*     distant but as separate bodies when closer to the EMB than the\n*     parameter RNE, which incurs a time penalty but improves accuracy\n*     for near-Earth objects.\n*\n*  5  This routine is not intended to be used for major planets.\n*     However, if major-planet elements are supplied, sensible results\n*     will, in fact, be produced.  This happens because the routine\n*     checks the separation between the body and each of the planets and\n*     interprets a suspiciously small value (0.001 AU) as an attempt to\n*     apply the routine to the planet concerned.  If this condition is\n*     detected, the contribution from that planet is ignored, and the\n*     status is set to the planet number (1-10 = Mercury, Venus, EMB,\n*     Mars, Jupiter, Saturn, Uranus, Neptune, Earth, Moon) as a warning.\n*\n*  References:\n*\n*     1  Sterne, Theodore E., \"An Introduction to Celestial Mechanics\",\n*        Interscience Publishers Inc., 1960.  Section 6.7, p199.\n*\n*     2  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  Last revision:   27 December 2004\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pertue.f\n\"\"\"", "sla_planel": "\"\"\"\n*     - - - - - - -\n*      P L A N E L\n*     - - - - - - -\n*\n*  Heliocentric position and velocity of a planet, asteroid or comet,\n*  starting from orbital elements.\n*\n*  Given:\n*     DATE     d     date, Modified Julian Date (JD - 2400000.5, Note 1)\n*     JFORM    i     choice of element set (1-3; Note 3)\n*     EPOCH    d     epoch of elements (TT MJD, Note 4)\n*     ORBINC   d     inclination (radians)\n*     ANODE    d     longitude of the ascending node (radians)\n*     PERIH    d     longitude or argument of perihelion (radians)\n*     AORQ     d     mean distance or perihelion distance (AU)\n*     E        d     eccentricity\n*     AORL     d     mean anomaly or longitude (radians, JFORM=1,2 only)\n*     DM       d     daily motion (radians, JFORM=1 only)\n*\n*  Returned:\n*     PV       d(6)  heliocentric x,y,z,xdot,ydot,zdot of date,\n*                                     J2000 equatorial triad (AU,AU/s)\n*     JSTAT    i     status:  0 = OK\n*                            -1 = illegal JFORM\n*                            -2 = illegal E\n*                            -3 = illegal AORQ\n*                            -4 = illegal DM\n*                            -5 = numerical error\n*\n*  Called:  sla_EL2UE, sla_UE2PV\n*\n*  Notes\n*\n*  1  DATE is the instant for which the prediction is required.  It is\n*     in the TT timescale (formerly Ephemeris Time, ET) and is a\n*     Modified Julian Date (JD-2400000.5).\n*\n*  2  The elements are with respect to the J2000 ecliptic and equinox.\n*\n*  3  A choice of three different element-set options is available:\n*\n*     Option JFORM = 1, suitable for the major planets:\n*\n*       EPOCH  = epoch of elements (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = longitude of perihelion, curly pi (radians)\n*       AORQ   = mean distance, a (AU)\n*       E      = eccentricity, e (range 0 to <1)\n*       AORL   = mean longitude L (radians)\n*       DM     = daily motion (radians)\n*\n*     Option JFORM = 2, suitable for minor planets:\n*\n*       EPOCH  = epoch of elements (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = argument of perihelion, little omega (radians)\n*       AORQ   = mean distance, a (AU)\n*       E      = eccentricity, e (range 0 to <1)\n*       AORL   = mean anomaly M (radians)\n*\n*     Option JFORM = 3, suitable for comets:\n*\n*       EPOCH  = epoch of elements and perihelion (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = argument of perihelion, little omega (radians)\n*       AORQ   = perihelion distance, q (AU)\n*       E      = eccentricity, e (range 0 to 10)\n*\n*     Unused arguments (DM for JFORM=2, AORL and DM for JFORM=3) are not\n*     accessed.\n*\n*  4  Each of the three element sets defines an unperturbed heliocentric\n*     orbit.  For a given epoch of observation, the position of the body\n*     in its orbit can be predicted from these elements, which are\n*     called \"osculating elements\", using standard two-body analytical\n*     solutions.  However, due to planetary perturbations, a given set\n*     of osculating elements remains usable for only as long as the\n*     unperturbed orbit that it describes is an adequate approximation\n*     to reality.  Attached to such a set of elements is a date called\n*     the \"osculating epoch\", at which the elements are, momentarily,\n*     a perfect representation of the instantaneous position and\n*     velocity of the body.\n*\n*     Therefore, for any given problem there are up to three different\n*     epochs in play, and it is vital to distinguish clearly between\n*     them:\n*\n*     . The epoch of observation:  the moment in time for which the\n*       position of the body is to be predicted.\n*\n*     . The epoch defining the position of the body:  the moment in time\n*       at which, in the absence of purturbations, the specified\n*       position (mean longitude, mean anomaly, or perihelion) is\n*       reached.\n*\n*     . The osculating epoch:  the moment in time at which the given\n*       elements are correct.\n*\n*     For the major-planet and minor-planet cases it is usual to make\n*     the epoch that defines the position of the body the same as the\n*     epoch of osculation.  Thus, only two different epochs are\n*     involved:  the epoch of the elements and the epoch of observation.\n*\n*     For comets, the epoch of perihelion fixes the position in the\n*     orbit and in general a different epoch of osculation will be\n*     chosen.  Thus, all three types of epoch are involved.\n*\n*     For the present routine:\n*\n*     . The epoch of observation is the argument DATE.\n*\n*     . The epoch defining the position of the body is the argument\n*       EPOCH.\n*\n*     . The osculating epoch is not used and is assumed to be close\n*       enough to the epoch of observation to deliver adequate accuracy.\n*       If not, a preliminary call to sla_PERTEL may be used to update\n*       the element-set (and its associated osculating epoch) by\n*       applying planetary perturbations.\n*\n*  5  The reference frame for the result is with respect to the mean\n*     equator and equinox of epoch J2000.\n*\n*  6  The algorithm was originally adapted from the EPHSLA program of\n*     D.H.P.Jones (private communication, 1996).  The method is based\n*     on Stumpff's Universal Variables.\n*\n*  Reference:  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  P.T.Wallace   Starlink   31 December 2002\n*\n*  Copyright (C) 2002 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\planel.f\n\"\"\"", "sla_planet": "\"\"\"\n*     - - - - - - -\n*      P L A N E T\n*     - - - - - - -\n*\n*  Approximate heliocentric position and velocity of a specified\n*  major planet.\n*\n*  Given:\n*     DATE      d      Modified Julian Date (JD - 2400000.5)\n*     NP        i      planet (1=Mercury, 2=Venus, 3=EMB ... 9=Pluto)\n*\n*  Returned:\n*     PV        d(6)   heliocentric x,y,z,xdot,ydot,zdot, J2000\n*                                           equatorial triad (AU,AU/s)\n*     JSTAT     i      status: +1 = warning: date out of range\n*                               0 = OK\n*                              -1 = illegal NP (outside 1-9)\n*                              -2 = solution didn't converge\n*\n*  Called:  sla_PLANEL\n*\n*  Notes\n*\n*  1  The epoch, DATE, is in the TDB timescale and is a Modified\n*     Julian Date (JD-2400000.5).\n*\n*  2  The reference frame is equatorial and is with respect to the\n*     mean equinox and ecliptic of epoch J2000.\n*\n*  3  If an NP value outside the range 1-9 is supplied, an error\n*     status (JSTAT = -1) is returned and the PV vector set to zeroes.\n*\n*  4  The algorithm for obtaining the mean elements of the planets\n*     from Mercury to Neptune is due to J.L. Simon, P. Bretagnon,\n*     J. Chapront, M. Chapront-Touze, G. Francou and J. Laskar\n*     (Bureau des Longitudes, Paris).  The (completely different)\n*     algorithm for calculating the ecliptic coordinates of Pluto\n*     is by Meeus.\n*\n*  5  Comparisons of the present routine with the JPL DE200 ephemeris\n*     give the following RMS errors over the interval 1960-2025:\n*\n*                      position (km)     speed (metre/sec)\n*\n*        Mercury            334               0.437\n*        Venus             1060               0.855\n*        EMB               2010               0.815\n*        Mars              7690               1.98\n*        Jupiter          71700               7.70\n*        Saturn          199000              19.4\n*        Uranus          564000              16.4\n*        Neptune         158000              14.4\n*        Pluto            36400               0.137\n*\n*     From comparisons with DE102, Simon et al quote the following\n*     longitude accuracies over the interval 1800-2200:\n*\n*        Mercury                 4\"\n*        Venus                   5\"\n*        EMB                     6\"\n*        Mars                   17\"\n*        Jupiter                71\"\n*        Saturn                 81\"\n*        Uranus                 86\"\n*        Neptune                11\"\n*\n*     In the case of Pluto, Meeus quotes an accuracy of 0.6 arcsec\n*     in longitude and 0.2 arcsec in latitude for the period\n*     1885-2099.\n*\n*     For all except Pluto, over the period 1000-3000 the accuracy\n*     is better than 1.5 times that over 1800-2200.  Outside the\n*     period 1000-3000 the accuracy declines.  For Pluto the\n*     accuracy declines rapidly outside the period 1885-2099.\n*     Outside these ranges (1885-2099 for Pluto, 1000-3000 for\n*     the rest) a \"date out of range\" warning status (JSTAT=+1)\n*     is returned.\n*\n*  6  The algorithms for (i) Mercury through Neptune and (ii) Pluto\n*     are completely independent.  In the Mercury through Neptune\n*     case, the present SLALIB implementation differs from the\n*     original Simon et al Fortran code in the following respects.\n*\n*     *  The date is supplied as a Modified Julian Date rather\n*        than a Julian Date (MJD = JD - 2400000.5).\n*\n*     *  The result is returned only in equatorial Cartesian form;\n*        the ecliptic longitude, latitude and radius vector are not\n*        returned.\n*\n*     *  The velocity is in AU per second, not AU per day.\n*\n*     *  Different error/warning status values are used.\n*\n*     *  Kepler's equation is not solved inline.\n*\n*     *  Polynomials in T are nested to minimize rounding errors.\n*\n*     *  Explicit double-precision constants are used to avoid\n*        mixed-mode expressions.\n*\n*     *  There are other, cosmetic, changes to comply with\n*        Starlink/SLALIB style guidelines.\n*\n*     None of the above changes affects the result significantly.\n*\n*  7  For NP=3 the result is for the Earth-Moon Barycentre.  To\n*     obtain the heliocentric position and velocity of the Earth,\n*     either use the SLALIB routine sla_EVP (or sla_EPV) or call\n*     sla_DMOON and subtract 0.012150581 times the geocentric Moon\n*     vector from the EMB vector produced by the present routine.\n*     (The Moon vector should be precessed to J2000 first, but this\n*     can be omitted for modern epochs without introducing significant\n*     inaccuracy.)\n*\n*  References:  Simon et al., Astron. Astrophys. 282, 663 (1994).\n*               Meeus, Astronomical Algorithms, Willmann-Bell (1991).\n*\n*  This revision:  19 June 2004\n*\n*  Copyright (C) 2004 P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\planet.f\n\"\"\"", "sla_plante": "\"\"\"\n*     - - - - - - -\n*      P L A N T E\n*     - - - - - - -\n*\n*  Topocentric apparent RA,Dec of a Solar-System object whose\n*  heliocentric orbital elements are known.\n*\n*  Given:\n*     DATE     d     MJD of observation (JD - 2400000.5, Notes 1,5)\n*     ELONG    d     observer's east longitude (radians, Note 2)\n*     PHI      d     observer's geodetic latitude (radians, Note 2)\n*     JFORM    i     choice of element set (1-3; Notes 3-6)\n*     EPOCH    d     epoch of elements (TT MJD, Note 5)\n*     ORBINC   d     inclination (radians)\n*     ANODE    d     longitude of the ascending node (radians)\n*     PERIH    d     longitude or argument of perihelion (radians)\n*     AORQ     d     mean distance or perihelion distance (AU)\n*     E        d     eccentricity\n*     AORL     d     mean anomaly or longitude (radians, JFORM=1,2 only)\n*     DM       d     daily motion (radians, JFORM=1 only )\n*\n*  Returned:\n*     RA,DEC   d     RA, Dec (topocentric apparent, radians)\n*     R        d     distance from observer (AU)\n*     JSTAT    i     status:  0 = OK\n*                            -1 = illegal JFORM\n*                            -2 = illegal E\n*                            -3 = illegal AORQ\n*                            -4 = illegal DM\n*                            -5 = numerical error\n*\n*  Called: sla_EL2UE, sla_PLANTU\n*\n*  Notes:\n*\n*  1  DATE is the instant for which the prediction is required.  It is\n*     in the TT timescale (formerly Ephemeris Time, ET) and is a\n*     Modified Julian Date (JD-2400000.5).\n*\n*  2  The longitude and latitude allow correction for geocentric\n*     parallax.  This is usually a small effect, but can become\n*     important for near-Earth asteroids.  Geocentric positions can be\n*     generated by appropriate use of routines sla_EVP (or sla_EPV) and\n*     sla_PLANEL.\n*\n*  3  The elements are with respect to the J2000 ecliptic and equinox.\n*\n*  4  A choice of three different element-set options is available:\n*\n*     Option JFORM = 1, suitable for the major planets:\n*\n*       EPOCH  = epoch of elements (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = longitude of perihelion, curly pi (radians)\n*       AORQ   = mean distance, a (AU)\n*       E      = eccentricity, e (range 0 to <1)\n*       AORL   = mean longitude L (radians)\n*       DM     = daily motion (radians)\n*\n*     Option JFORM = 2, suitable for minor planets:\n*\n*       EPOCH  = epoch of elements (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = argument of perihelion, little omega (radians)\n*       AORQ   = mean distance, a (AU)\n*       E      = eccentricity, e (range 0 to <1)\n*       AORL   = mean anomaly M (radians)\n*\n*     Option JFORM = 3, suitable for comets:\n*\n*       EPOCH  = epoch of elements and perihelion (TT MJD)\n*       ORBINC = inclination i (radians)\n*       ANODE  = longitude of the ascending node, big omega (radians)\n*       PERIH  = argument of perihelion, little omega (radians)\n*       AORQ   = perihelion distance, q (AU)\n*       E      = eccentricity, e (range 0 to 10)\n*\n*     Unused arguments (DM for JFORM=2, AORL and DM for JFORM=3) are not\n*     accessed.\n*\n*  5  Each of the three element sets defines an unperturbed heliocentric\n*     orbit.  For a given epoch of observation, the position of the body\n*     in its orbit can be predicted from these elements, which are\n*     called \"osculating elements\", using standard two-body analytical\n*     solutions.  However, due to planetary perturbations, a given set\n*     of osculating elements remains usable for only as long as the\n*     unperturbed orbit that it describes is an adequate approximation\n*     to reality.  Attached to such a set of elements is a date called\n*     the \"osculating epoch\", at which the elements are, momentarily,\n*     a perfect representation of the instantaneous position and\n*     velocity of the body.\n*\n*     Therefore, for any given problem there are up to three different\n*     epochs in play, and it is vital to distinguish clearly between\n*     them:\n*\n*     . The epoch of observation:  the moment in time for which the\n*       position of the body is to be predicted.\n*\n*     . The epoch defining the position of the body:  the moment in time\n*       at which, in the absence of purturbations, the specified\n*       position (mean longitude, mean anomaly, or perihelion) is\n*       reached.\n*\n*     . The osculating epoch:  the moment in time at which the given\n*       elements are correct.\n*\n*     For the major-planet and minor-planet cases it is usual to make\n*     the epoch that defines the position of the body the same as the\n*     epoch of osculation.  Thus, only two different epochs are\n*     involved:  the epoch of the elements and the epoch of observation.\n*\n*     For comets, the epoch of perihelion fixes the position in the\n*     orbit and in general a different epoch of osculation will be\n*     chosen.  Thus, all three types of epoch are involved.\n*\n*     For the present routine:\n*\n*     . The epoch of observation is the argument DATE.\n*\n*     . The epoch defining the position of the body is the argument\n*       EPOCH.\n*\n*     . The osculating epoch is not used and is assumed to be close\n*       enough to the epoch of observation to deliver adequate accuracy.\n*       If not, a preliminary call to sla_PERTEL may be used to update\n*       the element-set (and its associated osculating epoch) by\n*       applying planetary perturbations.\n*\n*  6  Two important sources for orbital elements are Horizons, operated\n*     by the Jet Propulsion Laboratory, Pasadena, and the Minor Planet\n*     Center, operated by the Center for Astrophysics, Harvard.\n*\n*     The JPL Horizons elements (heliocentric, J2000 ecliptic and\n*     equinox) correspond to SLALIB arguments as follows.\n*\n*       Major planets:\n*\n*         JFORM  = 1\n*         EPOCH  = JDCT-2400000.5D0\n*         ORBINC = IN (in radians)\n*         ANODE  = OM (in radians)\n*         PERIH  = OM+W (in radians)\n*         AORQ   = A\n*         E      = EC\n*         AORL   = MA+OM+W (in radians)\n*         DM     = N (in radians)\n*\n*         Epoch of osculation = JDCT-2400000.5D0\n*\n*       Minor planets:\n*\n*         JFORM  = 2\n*         EPOCH  = JDCT-2400000.5D0\n*         ORBINC = IN (in radians)\n*         ANODE  = OM (in radians)\n*         PERIH  = W (in radians)\n*         AORQ   = A\n*         E      = EC\n*         AORL   = MA (in radians)\n*\n*         Epoch of osculation = JDCT-2400000.5D0\n*\n*       Comets:\n*\n*         JFORM  = 3\n*         EPOCH  = Tp-2400000.5D0\n*         ORBINC = IN (in radians)\n*         ANODE  = OM (in radians)\n*         PERIH  = W (in radians)\n*         AORQ   = QR\n*         E      = EC\n*\n*         Epoch of osculation = JDCT-2400000.5D0\n*\n*     The MPC elements correspond to SLALIB arguments as follows.\n*\n*       Minor planets:\n*\n*         JFORM  = 2\n*         EPOCH  = Epoch-2400000.5D0\n*         ORBINC = Incl. (in radians)\n*         ANODE  = Node (in radians)\n*         PERIH  = Perih. (in radians)\n*         AORQ   = a\n*         E      = e\n*         AORL   = M (in radians)\n*\n*         Epoch of osculation = Epoch-2400000.5D0\n*\n*       Comets:\n*\n*         JFORM  = 3\n*         EPOCH  = T-2400000.5D0\n*         ORBINC = Incl. (in radians)\n*         ANODE  = Node. (in radians)\n*         PERIH  = Perih. (in radians)\n*         AORQ   = q\n*         E      = e\n*\n*         Epoch of osculation = Epoch-2400000.5D0\n*\n*  This revision:  19 June 2004\n*\n*  Copyright (C) 2004 P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\plante.f\n\"\"\"", "sla_plantu": "\"\"\"\n*     - - - - - - -\n*      P L A N T U\n*     - - - - - - -\n*\n*  Topocentric apparent RA,Dec of a Solar-System object whose\n*  heliocentric universal elements are known.\n*\n*  Given:\n*     DATE      d     TT MJD of observation (JD - 2400000.5)\n*     ELONG     d     observer's east longitude (radians)\n*     PHI       d     observer's geodetic latitude (radians)\n*     U       d(13)   universal elements\n*\n*               (1)   combined mass (M+m)\n*               (2)   total energy of the orbit (alpha)\n*               (3)   reference (osculating) epoch (t0)\n*             (4-6)   position at reference epoch (r0)\n*             (7-9)   velocity at reference epoch (v0)\n*              (10)   heliocentric distance at reference epoch\n*              (11)   r0.v0\n*              (12)   date (t)\n*              (13)   universal eccentric anomaly (psi) of date, approx\n*\n*  Returned:\n*     RA,DEC    d     RA, Dec (topocentric apparent, radians)\n*     R         d     distance from observer (AU)\n*     JSTAT     i     status:  0 = OK\n*                             -1 = radius vector zero\n*                             -2 = failed to converge\n*\n*  Called: sla_GMST, sla_DT, sla_EPJ, sla_EPV, sla_UE2PV, sla_PRENUT,\n*          sla_DMXV, sla_PVOBS, sla_DCC2S, sla_DRANRM\n*\n*  Notes:\n*\n*  1  DATE is the instant for which the prediction is required.  It is\n*     in the TT timescale (formerly Ephemeris Time, ET) and is a\n*     Modified Julian Date (JD-2400000.5).\n*\n*  2  The longitude and latitude allow correction for geocentric\n*     parallax.  This is usually a small effect, but can become\n*     important for near-Earth asteroids.  Geocentric positions can be\n*     generated by appropriate use of routines sla_EPV (or sla_EVP) and\n*     sla_UE2PV.\n*\n*  3  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference 2).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  4  The universal elements are with respect to the J2000 equator and\n*     equinox.\n*\n*     1  Sterne, Theodore E., \"An Introduction to Celestial Mechanics\",\n*        Interscience Publishers Inc., 1960.  Section 6.7, p199.\n*\n*     2  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  Last revision:   19 February 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\plantu.f\n\"\"\"", "sla_pm": "\"\"\"\n*     - - -\n*      P M\n*     - - -\n*\n*  Apply corrections for proper motion to a star RA,Dec\n*  (double precision)\n*\n*  References:\n*     1984 Astronomical Almanac, pp B39-B41.\n*     (also Lederle & Schwan, Astron. Astrophys. 134,\n*      1-6, 1984)\n*\n*  Given:\n*     R0,D0    dp     RA,Dec at epoch EP0 (rad)\n*     PR,PD    dp     proper motions:  RA,Dec changes per year of epoch\n*     PX       dp     parallax (arcsec)\n*     RV       dp     radial velocity (km/sec, +ve if receding)\n*     EP0      dp     start epoch in years (e.g. Julian epoch)\n*     EP1      dp     end epoch in years (same system as EP0)\n*\n*  Returned:\n*     R1,D1    dp     RA,Dec at epoch EP1 (rad)\n*\n*  Called:\n*     sla_DCS2C       spherical to Cartesian\n*     sla_DCC2S       Cartesian to spherical\n*     sla_DRANRM      normalize angle 0-2Pi\n*\n*  Notes:\n*\n*  1  The proper motions in RA are dRA/dt rather than cos(Dec)*dRA/dt,\n*     and are in the same coordinate system as R0,D0.\n*\n*  2  If the available proper motions are pre-FK5 they will be per\n*     tropical year rather than per Julian year, and so the epochs\n*     must both be Besselian rather than Julian.  In such cases, a\n*     scaling factor of 365.2422D0/365.25D0 should be applied to the\n*     radial velocity before use.\n*\n*  P.T.Wallace   Starlink   19 January 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pm.f\n\"\"\"", "sla_polmo": "\"\"\"\n*     - - - - - -\n*      P O L M O\n*     - - - - - -\n*\n*  Polar motion:  correct site longitude and latitude for polar\n*  motion and calculate azimuth difference between celestial and\n*  terrestrial poles.\n*\n*  Given:\n*     ELONGM   d      mean longitude of the observer (radians, east +ve)\n*     PHIM     d      mean geodetic latitude of the observer (radians)\n*     XP       d      polar motion x-coordinate (radians)\n*     YP       d      polar motion y-coordinate (radians)\n*\n*  Returned:\n*     ELONG    d      true longitude of the observer (radians, east +ve)\n*     PHI      d      true geodetic latitude of the observer (radians)\n*     DAZ      d      azimuth correction (terrestrial-celestial, radians)\n*\n*  Notes:\n*\n*   1)  \"Mean\" longitude and latitude are the (fixed) values for the\n*       site's location with respect to the IERS terrestrial reference\n*       frame;  the latitude is geodetic.  TAKE CARE WITH THE LONGITUDE\n*       SIGN CONVENTION.  The longitudes used by the present routine\n*       are east-positive, in accordance with geographical convention\n*       (and right-handed).  In particular, note that the longitudes\n*       returned by the sla_OBS routine are west-positive, following\n*       astronomical usage, and must be reversed in sign before use in\n*       the present routine.\n*\n*   2)  XP and YP are the (changing) coordinates of the Celestial\n*       Ephemeris Pole with respect to the IERS Reference Pole.\n*       XP is positive along the meridian at longitude 0 degrees,\n*       and YP is positive along the meridian at longitude\n*       270 degrees (i.e. 90 degrees west).  Values for XP,YP can\n*       be obtained from IERS circulars and equivalent publications;\n*       the maximum amplitude observed so far is about 0.3 arcseconds.\n*\n*   3)  \"True\" longitude and latitude are the (moving) values for\n*       the site's location with respect to the celestial ephemeris\n*       pole and the meridian which corresponds to the Greenwich\n*       apparent sidereal time.  The true longitude and latitude\n*       link the terrestrial coordinates with the standard celestial\n*       models (for precession, nutation, sidereal time etc).\n*\n*   4)  The azimuths produced by sla_AOP and sla_AOPQK are with\n*       respect to due north as defined by the Celestial Ephemeris\n*       Pole, and can therefore be called \"celestial azimuths\".\n*       However, a telescope fixed to the Earth measures azimuth\n*       essentially with respect to due north as defined by the\n*       IERS Reference Pole, and can therefore be called \"terrestrial\n*       azimuth\".  Uncorrected, this would manifest itself as a\n*       changing \"azimuth zero-point error\".  The value DAZ is the\n*       correction to be added to a celestial azimuth to produce\n*       a terrestrial azimuth.\n*\n*   5)  The present routine is rigorous.  For most practical\n*       purposes, the following simplified formulae provide an\n*       adequate approximation:\n*\n*       ELONG = ELONGM+XP*COS(ELONGM)-YP*SIN(ELONGM)\n*       PHI   = PHIM+(XP*SIN(ELONGM)+YP*COS(ELONGM))*TAN(PHIM)\n*       DAZ   = -SQRT(XP*XP+YP*YP)*COS(ELONGM-ATAN2(XP,YP))/COS(PHIM)\n*\n*       An alternative formulation for DAZ is:\n*\n*       X = COS(ELONGM)*COS(PHIM)\n*       Y = SIN(ELONGM)*COS(PHIM)\n*       DAZ = ATAN2(-X*YP-Y*XP,X*X+Y*Y)\n*\n*   Reference:  Seidelmann, P.K. (ed), 1992.  \"Explanatory Supplement\n*               to the Astronomical Almanac\", ISBN 0-935702-68-7,\n*               sections 3.27, 4.25, 4.52.\n*\n*  P.T.Wallace   Starlink   30 November 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\polmo.f\n\"\"\"", "sla_prebn": "\"\"\"\n*     - - - - - -\n*      P R E B N\n*     - - - - - -\n*\n*  Generate the matrix of precession between two epochs,\n*  using the old, pre-IAU1976, Bessel-Newcomb model, using\n*  Kinoshita's formulation (double precision)\n*\n*  Given:\n*     BEP0    dp         beginning Besselian epoch\n*     BEP1    dp         ending Besselian epoch\n*\n*  Returned:\n*     RMATP  dp(3,3)    precession matrix\n*\n*  The matrix is in the sense   V(BEP1)  =  RMATP * V(BEP0)\n*\n*  Reference:\n*     Kinoshita, H. (1975) 'Formulas for precession', SAO Special\n*     Report No. 364, Smithsonian Institution Astrophysical\n*     Observatory, Cambridge, Massachusetts.\n*\n*  Called:  sla_DEULER\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\prebn.f\n\"\"\"", "sla_prec": "\"\"\"\n*     - - - - -\n*      P R E C\n*     - - - - -\n*\n*  Form the matrix of precession between two epochs (IAU 1976, FK5)\n*  (double precision)\n*\n*  Given:\n*     EP0    dp         beginning epoch\n*     EP1    dp         ending epoch\n*\n*  Returned:\n*     RMATP  dp(3,3)    precession matrix\n*\n*  Notes:\n*\n*     1)  The epochs are TDB (loosely ET) Julian epochs.\n*\n*     2)  The matrix is in the sense   V(EP1)  =  RMATP * V(EP0)\n*\n*     3)  Though the matrix method itself is rigorous, the precession\n*         angles are expressed through canonical polynomials which are\n*         valid only for a limited time span.  There are also known\n*         errors in the IAU precession rate.  The absolute accuracy\n*         of the present formulation is better than 0.1 arcsec from\n*         1960AD to 2040AD, better than 1 arcsec from 1640AD to 2360AD,\n*         and remains below 3 arcsec for the whole of the period\n*         500BC to 3000AD.  The errors exceed 10 arcsec outside the\n*         range 1200BC to 3900AD, exceed 100 arcsec outside 4200BC to\n*         5600AD and exceed 1000 arcsec outside 6800BC to 8200AD.\n*         The SLALIB routine sla_PRECL implements a more elaborate\n*         model which is suitable for problems spanning several\n*         thousand years.\n*\n*  References:\n*     Lieske,J.H., 1979. Astron.Astrophys.,73,282.\n*      equations (6) & (7), p283.\n*     Kaplan,G.H., 1981. USNO circular no. 163, pA2.\n*\n*  Called:  sla_DEULER\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\prec.f\n\"\"\"", "sla_preces": "\"\"\"\n*     - - - - - - -\n*      P R E C E S\n*     - - - - - - -\n*\n*  Precession - either FK4 (Bessel-Newcomb, pre IAU 1976) or\n*  FK5 (Fricke, post IAU 1976) as required.\n*\n*  Given:\n*     SYSTEM     char   precession to be applied: 'FK4' or 'FK5'\n*     EP0,EP1    dp     starting and ending epoch\n*     RA,DC      dp     RA,Dec, mean equator & equinox of epoch EP0\n*\n*  Returned:\n*     RA,DC      dp     RA,Dec, mean equator & equinox of epoch EP1\n*\n*  Called:    sla_DRANRM, sla_PREBN, sla_PREC, sla_DCS2C,\n*             sla_DMXV, sla_DCC2S\n*\n*  Notes:\n*\n*     1)  Lowercase characters in SYSTEM are acceptable.\n*\n*     2)  The epochs are Besselian if SYSTEM='FK4' and Julian if 'FK5'.\n*         For example, to precess coordinates in the old system from\n*         equinox 1900.0 to 1950.0 the call would be:\n*             CALL sla_PRECES ('FK4', 1900D0, 1950D0, RA, DC)\n*\n*     3)  This routine will NOT correctly convert between the old and\n*         the new systems - for example conversion from B1950 to J2000.\n*         For these purposes see sla_FK425, sla_FK524, sla_FK45Z and\n*         sla_FK54Z.\n*\n*     4)  If an invalid SYSTEM is supplied, values of -99D0,-99D0 will\n*         be returned for both RA and DC.\n*\n*  P.T.Wallace   Starlink   20 April 1990\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\preces.f\n\"\"\"", "sla_precl": "\"\"\"\n*     - - - - - -\n*      P R E C L\n*     - - - - - -\n*\n*  Form the matrix of precession between two epochs, using the\n*  model of Simon et al (1994), which is suitable for long\n*  periods of time.\n*\n*  (double precision)\n*\n*  Given:\n*     EP0    dp         beginning epoch\n*     EP1    dp         ending epoch\n*\n*  Returned:\n*     RMATP  dp(3,3)    precession matrix\n*\n*  Notes:\n*\n*     1)  The epochs are TDB Julian epochs.\n*\n*     2)  The matrix is in the sense   V(EP1)  =  RMATP * V(EP0)\n*\n*     3)  The absolute accuracy of the model is limited by the\n*         uncertainty in the general precession, about 0.3 arcsec per\n*         1000 years.  The remainder of the formulation provides a\n*         precision of 1 mas over the interval from 1000AD to 3000AD,\n*         0.1 arcsec from 1000BC to 5000AD and 1 arcsec from\n*         4000BC to 8000AD.\n*\n*  Reference:\n*     Simon, J.L. et al., 1994. Astron.Astrophys., 282, 663-683.\n*\n*  Called:  sla_DEULER\n*\n*  P.T.Wallace   Starlink   23 August 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\precl.f\n\"\"\"", "sla_prenut": "\"\"\"\n*     - - - - - - -\n*      P R E N U T\n*     - - - - - - -\n*\n*  Form the matrix of precession and nutation (SF2001)\n*  (double precision)\n*\n*  Given:\n*     EPOCH   dp         Julian Epoch for mean coordinates\n*     DATE    dp         Modified Julian Date (JD-2400000.5)\n*                        for true coordinates\n*\n*  Returned:\n*     RMATPN  dp(3,3)    combined precession/nutation matrix\n*\n*  Called:  sla_PREC, sla_EPJ, sla_NUT, sla_DMXM\n*\n*  Notes:\n*\n*  1)  The epoch and date are TDB (loosely ET).  TT will do, or even\n*      UTC.\n*\n*  2)  The matrix is in the sense   V(true) = RMATPN * V(mean)\n*\n*  Last revision:   3 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\prenut.f\n\"\"\"", "sla_pv2el": "\"\"\"\n*     - - - - - -\n*      P V 2 E L\n*     - - - - - -\n*\n*  Heliocentric osculating elements obtained from instantaneous position\n*  and velocity.\n*\n*  Given:\n*     PV        d(6)   heliocentric x,y,z,xdot,ydot,zdot of date,\n*                      J2000 equatorial triad (AU,AU/s; Note 1)\n*     DATE      d      date (TT Modified Julian Date = JD-2400000.5)\n*     PMASS     d      mass of the planet (Sun=1; Note 2)\n*     JFORMR    i      requested element set (1-3; Note 3)\n*\n*  Returned:\n*     JFORM     d      element set actually returned (1-3; Note 4)\n*     EPOCH     d      epoch of elements (TT MJD)\n*     ORBINC    d      inclination (radians)\n*     ANODE     d      longitude of the ascending node (radians)\n*     PERIH     d      longitude or argument of perihelion (radians)\n*     AORQ      d      mean distance or perihelion distance (AU)\n*     E         d      eccentricity\n*     AORL      d      mean anomaly or longitude (radians, JFORM=1,2 only)\n*     DM        d      daily motion (radians, JFORM=1 only)\n*     JSTAT     i      status:  0 = OK\n*                              -1 = illegal PMASS\n*                              -2 = illegal JFORMR\n*                              -3 = position/velocity out of range\n*\n*  Notes\n*\n*  1  The PV 6-vector is with respect to the mean equator and equinox of\n*     epoch J2000.  The orbital elements produced are with respect to\n*     the J2000 ecliptic and mean equinox.\n*\n*  2  The mass, PMASS, is important only for the larger planets.  For\n*     most purposes (e.g. asteroids) use 0D0.  Values less than zero\n*     are illegal.\n*\n*  3  Three different element-format options are supported:\n*\n*     Option JFORM=1, suitable for the major planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = longitude of perihelion, curly pi (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e\n*     AORL   = mean longitude L (radians)\n*     DM     = daily motion (radians)\n*\n*     Option JFORM=2, suitable for minor planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e\n*     AORL   = mean anomaly M (radians)\n*\n*     Option JFORM=3, suitable for comets:\n*\n*     EPOCH  = epoch of perihelion (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = perihelion distance, q (AU)\n*     E      = eccentricity, e\n*\n*  4  It may not be possible to generate elements in the form\n*     requested through JFORMR.  The caller is notified of the form\n*     of elements actually returned by means of the JFORM argument:\n*\n*      JFORMR   JFORM     meaning\n*\n*        1        1       OK - elements are in the requested format\n*        1        2       never happens\n*        1        3       orbit not elliptical\n*\n*        2        1       never happens\n*        2        2       OK - elements are in the requested format\n*        2        3       orbit not elliptical\n*\n*        3        1       never happens\n*        3        2       never happens\n*        3        3       OK - elements are in the requested format\n*\n*  5  The arguments returned for each value of JFORM (cf Note 5: JFORM\n*     may not be the same as JFORMR) are as follows:\n*\n*         JFORM         1              2              3\n*         EPOCH         t0             t0             T\n*         ORBINC        i              i              i\n*         ANODE         Omega          Omega          Omega\n*         PERIH         curly pi       omega          omega\n*         AORQ          a              a              q\n*         E             e              e              e\n*         AORL          L              M              -\n*         DM            n              -              -\n*\n*     where:\n*\n*         t0           is the epoch of the elements (MJD, TT)\n*         T              \"    epoch of perihelion (MJD, TT)\n*         i              \"    inclination (radians)\n*         Omega          \"    longitude of the ascending node (radians)\n*         curly pi       \"    longitude of perihelion (radians)\n*         omega          \"    argument of perihelion (radians)\n*         a              \"    mean distance (AU)\n*         q              \"    perihelion distance (AU)\n*         e              \"    eccentricity\n*         L              \"    longitude (radians, 0-2pi)\n*         M              \"    mean anomaly (radians, 0-2pi)\n*         n              \"    daily motion (radians)\n*         -             means no value is set\n*\n*  6  At very small inclinations, the longitude of the ascending node\n*     ANODE becomes indeterminate and under some circumstances may be\n*     set arbitrarily to zero.  Similarly, if the orbit is close to\n*     circular, the true anomaly becomes indeterminate and under some\n*     circumstances may be set arbitrarily to zero.  In such cases,\n*     the other elements are automatically adjusted to compensate,\n*     and so the elements remain a valid description of the orbit.\n*\n*  7  The osculating epoch for the returned elements is the argument\n*     DATE.\n*\n*  Reference:  Sterne, Theodore E., \"An Introduction to Celestial\n*              Mechanics\", Interscience Publishers, 1960\n*\n*  Called:  sla_DRANRM\n*\n*  Last revision:   8 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pv2el.f\n\"\"\"", "sla_pv2ue": "\"\"\"\n*     - - - - - -\n*      P V 2 U E\n*     - - - - - -\n*\n*  Construct a universal element set based on an instantaneous position\n*  and velocity.\n*\n*  Given:\n*     PV        d(6)   heliocentric x,y,z,xdot,ydot,zdot of date,\n*                      (AU,AU/s; Note 1)\n*     DATE      d      date (TT Modified Julian Date = JD-2400000.5)\n*     PMASS     d      mass of the planet (Sun=1; Note 2)\n*\n*  Returned:\n*     U         d(13)  universal orbital elements (Note 3)\n*\n*                 (1)  combined mass (M+m)\n*                 (2)  total energy of the orbit (alpha)\n*                 (3)  reference (osculating) epoch (t0)\n*               (4-6)  position at reference epoch (r0)\n*               (7-9)  velocity at reference epoch (v0)\n*                (10)  heliocentric distance at reference epoch\n*                (11)  r0.v0\n*                (12)  date (t)\n*                (13)  universal eccentric anomaly (psi) of date, approx\n*\n*     JSTAT     i      status:  0 = OK\n*                              -1 = illegal PMASS\n*                              -2 = too close to Sun\n*                              -3 = too slow\n*\n*  Notes\n*\n*  1  The PV 6-vector can be with respect to any chosen inertial frame,\n*     and the resulting universal-element set will be with respect to\n*     the same frame.  A common choice will be mean equator and ecliptic\n*     of epoch J2000.\n*\n*  2  The mass, PMASS, is important only for the larger planets.  For\n*     most purposes (e.g. asteroids) use 0D0.  Values less than zero\n*     are illegal.\n*\n*  3  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  Reference:  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pv2ue.f\n\"\"\"", "sla_pvobs": "\"\"\"\n*     - - - - - -\n*      P V O B S\n*     - - - - - -\n*\n*  Position and velocity of an observing station (double precision)\n*\n*  Given:\n*     P     dp     latitude (geodetic, radians)\n*     H     dp     height above reference spheroid (geodetic, metres)\n*     STL   dp     local apparent sidereal time (radians)\n*\n*  Returned:\n*     PV    dp(6)  position/velocity 6-vector (AU, AU/s, true equator\n*                                              and equinox of date)\n*\n*  Called:  sla_GEOC\n*\n*  IAU 1976 constants are used.\n*\n*  P.T.Wallace   Starlink   14 November 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pvobs.f\n\"\"\"", "sla_pxy": "\"\"\"\n*     - - - -\n*      P X Y\n*     - - - -\n*\n*  Given arrays of \"expected\" and \"measured\" [X,Y] coordinates, and a\n*  linear model relating them (as produced by sla_FITXY), compute\n*  the array of \"predicted\" coordinates and the RMS residuals.\n*\n*  Given:\n*     NP       i        number of samples\n*     XYE     d(2,np)   expected [X,Y] for each sample\n*     XYM     d(2,np)   measured [X,Y] for each sample\n*     COEFFS  d(6)      coefficients of model (see below)\n*\n*  Returned:\n*     XYP     d(2,np)   predicted [X,Y] for each sample\n*     XRMS     d        RMS in X\n*     YRMS     d        RMS in Y\n*     RRMS     d        total RMS (vector sum of XRMS and YRMS)\n*\n*  The model is supplied in the array COEFFS.  Naming the\n*  elements of COEFF as follows:\n*\n*     COEFFS(1) = A\n*     COEFFS(2) = B\n*     COEFFS(3) = C\n*     COEFFS(4) = D\n*     COEFFS(5) = E\n*     COEFFS(6) = F\n*\n*  the model is applied thus:\n*\n*     XP = A + B*XM + C*YM\n*     YP = D + E*XM + F*YM\n*\n*  The residuals are (XP-XE) and (YP-YE).\n*\n*  If NP is less than or equal to zero, no coordinates are\n*  transformed, and the RMS residuals are all zero.\n*\n*  See also sla_FITXY, sla_INVF, sla_XY2XY, sla_DCMPF\n*\n*  Called:  sla_XY2XY\n*\n*  P.T.Wallace   Starlink   22 May 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\pxy.f\n\"\"\"", "sla_random": "\"\"\"\n*     - - - - - - -\n*      R A N D O M\n*     - - - - - - -\n*\n*  Generate pseudo-random real number in the range 0 <= X < 1.\n*  (single precision)\n*\n*\n*  Given:\n*     SEED     real     an arbitrary real number\n*\n*  Notes:\n*\n*  1)  The result is a pseudo-random REAL number in the range\n*      0 <= sla_RANDOM < 1.\n*\n*  2)  SEED is used first time through only.\n*\n*  Called:  RAN or RAND (a REAL function returning a random variate --\n*           the precise function which is called depends on which functions\n*           are available when the library is built).  If neither of these\n*           is available, we use the local substitute RANDOM defined\n*           in rtl_random.c\n*\n*  P.T.Wallace   Starlink   14 October 1991\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\nFile: src\\random.F\n\"\"\"", "sla_range": "\"\"\"\n*     - - - - - -\n*      R A N G E\n*     - - - - - -\n*\n*  Normalize angle into range +/- pi  (single precision)\n*\n*  Given:\n*     ANGLE     dp      the angle in radians\n*\n*  The result is ANGLE expressed in the +/- pi (single\n*  precision).\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\range.f\n\"\"\"", "sla_ranorm": "\"\"\"\n*     - - - - - - -\n*      R A N O R M\n*     - - - - - - -\n*\n*  Normalize angle into range 0-2 pi  (single precision)\n*\n*  Given:\n*     ANGLE     dp      the angle in radians\n*\n*  The result is ANGLE expressed in the range 0-2 pi (single\n*  precision).\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ranorm.f\n\"\"\"", "sla_rcc": "\"\"\"\n*     - - - -\n*      R C C\n*     - - - -\n*\n*  Relativistic clock correction:  the difference between proper time at\n*  a point on the surface of the Earth and coordinate time in the Solar\n*  System barycentric space-time frame of reference.\n*\n*  The proper time is terrestrial time, TT;  the coordinate time is an\n*  implementation of barycentric dynamical time, TDB.\n*\n*  Given:\n*    TDB      d     TDB (MJD: JD-2400000.5)\n*    UT1      d     universal time (fraction of one day)\n*    WL       d     clock longitude (radians west)\n*    U        d     clock distance from Earth spin axis (km)\n*    V        d     clock distance north of Earth equatorial plane (km)\n*\n*  Returned:\n*    The clock correction, TDB-TT, in seconds:\n*\n*    .  TDB is coordinate time in the solar system barycentre frame\n*       of reference, in units chosen to eliminate the scale difference\n*       with respect to terrestrial time.\n*\n*    .  TT is the proper time for clocks at mean sea level on the\n*       Earth.\n*\n*  Notes:\n*\n*  1  The argument TDB is, strictly, the barycentric coordinate time;\n*     however, the terrestrial time TT can in practice be used without\n*     any significant loss of accuracy.\n*\n*  2  The result returned by sla_RCC comprises a main (annual)\n*     sinusoidal term of amplitude approximately 0.00166 seconds, plus\n*     planetary and lunar terms up to about 20 microseconds, and diurnal\n*     terms up to 2 microseconds.  The variation arises from the\n*     transverse Doppler effect and the gravitational red-shift as the\n*     observer varies in speed and moves through different gravitational\n*     potentials.\n*\n*  3  The geocentric model is that of Fairhead & Bretagnon (1990), in\n*     its full form.  It was supplied by Fairhead (private\n*     communication) as a FORTRAN subroutine.  The original Fairhead\n*     routine used explicit formulae, in such large numbers that\n*     problems were experienced with certain compilers (Microsoft\n*     Fortran on PC aborted with stack overflow, Convex compiled\n*     successfully but extremely slowly).  The present implementation is\n*     a complete recoding, with the original Fairhead coefficients held\n*     in a table.  To optimise arithmetic precision, the terms are\n*     accumulated in reverse order, smallest first.  A number of other\n*     coding changes were made, in order to match the calling sequence\n*     of previous versions of the present routine, and to comply with\n*     Starlink programming standards.  The numerical results compared\n*     with those from the Fairhead form are essentially unaffected by\n*     the changes, the differences being at the 10^-20 sec level.\n*\n*  4  The topocentric part of the model is from Moyer (1981) and\n*     Murray (1983).  It is an approximation to the expression\n*     ( v / c ) . ( r / c ), where v is the barycentric velocity of\n*     the Earth, r is the geocentric position of the observer and\n*     c is the speed of light.\n*\n*  5  During the interval 1950-2050, the absolute accuracy of is better\n*     than +/- 3 nanoseconds relative to direct numerical integrations\n*     using the JPL DE200/LE200 solar system ephemeris.\n*\n*  6  The IAU definition of TDB was that it must differ from TT only by\n*     periodic terms.  Though practical, this is an imprecise definition\n*     which ignores the existence of very long-period and secular\n*     effects in the dynamics of the solar system.  As a consequence,\n*     different implementations of TDB will, in general, differ in zero-\n*     point and will drift linearly relative to one other.\n*\n*  7  TDB was, in principle, superseded by new coordinate timescales\n*     which the IAU introduced in 1991:  geocentric coordinate time,\n*     TCG, and barycentric coordinate time, TCB.  However, sla_RCC\n*     can be used to implement the periodic part of TCB-TCG.\n*\n*  References:\n*\n*  1  Fairhead, L., & Bretagnon, P., Astron.Astrophys., 229, 240-247\n*     (1990).\n*\n*  2  Moyer, T.D., Cel.Mech., 23, 33 (1981).\n*\n*  3  Murray, C.A., Vectorial Astrometry, Adam Hilger (1983).\n*\n*  4  Seidelmann, P.K. et al, Explanatory Supplement to the\n*     Astronomical Almanac, Chapter 2, University Science Books\n*     (1992).\n*\n*  5  Simon J.L., Bretagnon P., Chapront J., Chapront-Touze M.,\n*     Francou G. & Laskar J., Astron.Astrophys., 282, 663-683 (1994).\n*\n*  P.T.Wallace   Starlink   7 May 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rcc.f\n\"\"\"", "sla_rdplan": "\"\"\"\n*     - - - - - - -\n*      R D P L A N\n*     - - - - - - -\n*\n*  Approximate topocentric apparent RA,Dec of a planet, and its\n*  angular diameter.\n*\n*  Given:\n*     DATE        d       MJD of observation (JD - 2400000.5)\n*     NP          i       planet: 1 = Mercury\n*                                 2 = Venus\n*                                 3 = Moon\n*                                 4 = Mars\n*                                 5 = Jupiter\n*                                 6 = Saturn\n*                                 7 = Uranus\n*                                 8 = Neptune\n*                                 9 = Pluto\n*                              else = Sun\n*     ELONG,PHI   d       observer's east longitude and geodetic\n*                                               latitude (radians)\n*\n*  Returned:\n*     RA,DEC      d        RA, Dec (topocentric apparent, radians)\n*     DIAM        d        angular diameter (equatorial, radians)\n*\n*  Notes:\n*\n*  1  The date is in a dynamical timescale (TDB, formerly ET) and is\n*     in the form of a Modified Julian Date (JD-2400000.5).  For all\n*     practical purposes, TT can be used instead of TDB, and for many\n*     applications UT will do (except for the Moon).\n*\n*  2  The longitude and latitude allow correction for geocentric\n*     parallax.  This is a major effect for the Moon, but in the\n*     context of the limited accuracy of the present routine its\n*     effect on planetary positions is small (negligible for the\n*     outer planets).  Geocentric positions can be generated by\n*     appropriate use of the routines sla_DMOON and sla_PLANET.\n*\n*  3  The direction accuracy (arcsec, 1000-3000AD) is of order:\n*\n*            Sun              5\n*            Mercury          2\n*            Venus           10\n*            Moon            30\n*            Mars            50\n*            Jupiter         90\n*            Saturn          90\n*            Uranus          90\n*            Neptune         10\n*            Pluto            1   (1885-2099AD only)\n*\n*     The angular diameter accuracy is about 0.4% for the Moon,\n*     and 0.01% or better for the Sun and planets.\n*\n*  See the sla_PLANET routine for references.\n*\n*  Called: sla_GMST, sla_DT, sla_EPJ, sla_DMOON, sla_PVOBS, sla_PRENUT,\n*          sla_PLANET, sla_DMXV, sla_DCC2S, sla_DRANRM\n*\n*  P.T.Wallace   Starlink   26 May 1997\n*\n*  Copyright (C) 1997 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rdplan.f\n\"\"\"", "sla_refco": "\"\"\"\n*     - - - - - -\n*      R E F C O\n*     - - - - - -\n*\n*  Determine the constants A and B in the atmospheric refraction\n*  model dZ = A tan Z + B tan**3 Z.\n*\n*  Z is the \"observed\" zenith distance (i.e. affected by refraction)\n*  and dZ is what to add to Z to give the \"topocentric\" (i.e. in vacuo)\n*  zenith distance.\n*\n*  Given:\n*    HM      d     height of the observer above sea level (metre)\n*    TDK     d     ambient temperature at the observer (K)\n*    PMB     d     pressure at the observer (millibar)\n*    RH      d     relative humidity at the observer (range 0-1)\n*    WL      d     effective wavelength of the source (micrometre)\n*    PHI     d     latitude of the observer (radian, astronomical)\n*    TLR     d     temperature lapse rate in the troposphere (K/metre)\n*    EPS     d     precision required to terminate iteration (radian)\n*\n*  Returned:\n*    REFA    d     tan Z coefficient (radian)\n*    REFB    d     tan**3 Z coefficient (radian)\n*\n*  Called:  sla_REFRO\n*\n*  Notes:\n*\n*  1  Typical values for the TLR and EPS arguments might be 0.0065D0 and\n*     1D-10 respectively.\n*\n*  2  The radio refraction is chosen by specifying WL > 100 micrometres.\n*\n*  3  The routine is a slower but more accurate alternative to the\n*     sla_REFCOQ routine.  The constants it produces give perfect\n*     agreement with sla_REFRO at zenith distances arctan(1) (45 deg)\n*     and arctan(4) (about 76 deg).  It achieves 0.5 arcsec accuracy\n*     for ZD < 80 deg, 0.01 arcsec accuracy for ZD < 60 deg, and\n*     0.001 arcsec accuracy for ZD < 45 deg.\n*\n*  P.T.Wallace   Starlink   22 May 2004\n*\n*  Copyright (C) 2004 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\refco.f\n\"\"\"", "sla_refcoq": "\"\"\"\n*     - - - - - - -\n*      R E F C O Q\n*     - - - - - - -\n*\n*  Determine the constants A and B in the atmospheric refraction\n*  model dZ = A tan Z + B tan**3 Z.  This is a fast alternative\n*  to the sla_REFCO routine - see notes.\n*\n*  Z is the \"observed\" zenith distance (i.e. affected by refraction)\n*  and dZ is what to add to Z to give the \"topocentric\" (i.e. in vacuo)\n*  zenith distance.\n*\n*  Given:\n*    TDK      d      ambient temperature at the observer (K)\n*    PMB      d      pressure at the observer (millibar)\n*    RH       d      relative humidity at the observer (range 0-1)\n*    WL       d      effective wavelength of the source (micrometre)\n*\n*  Returned:\n*    REFA     d      tan Z coefficient (radian)\n*    REFB     d      tan**3 Z coefficient (radian)\n*\n*  The radio refraction is chosen by specifying WL > 100 micrometres.\n*\n*  Notes:\n*\n*  1  The model is an approximation, for moderate zenith distances,\n*     to the predictions of the sla_REFRO routine.  The approximation\n*     is maintained across a range of conditions, and applies to\n*     both optical/IR and radio.\n*\n*  2  The algorithm is a fast alternative to the sla_REFCO routine.\n*     The latter calls the sla_REFRO routine itself:  this involves\n*     integrations through a model atmosphere, and is costly in\n*     processor time.  However, the model which is produced is precisely\n*     correct for two zenith distance (45 degrees and about 76 degrees)\n*     and at other zenith distances is limited in accuracy only by the\n*     A tan Z + B tan**3 Z formulation itself.  The present routine\n*     is not as accurate, though it satisfies most practical\n*     requirements.\n*\n*  3  The model omits the effects of (i) height above sea level (apart\n*     from the reduced pressure itself), (ii) latitude (i.e. the\n*     flattening of the Earth) and (iii) variations in tropospheric\n*     lapse rate.\n*\n*     The model was tested using the following range of conditions:\n*\n*       lapse rates 0.0055, 0.0065, 0.0075 K/metre\n*       latitudes 0, 25, 50, 75 degrees\n*       heights 0, 2500, 5000 metres ASL\n*       pressures mean for height -10% to +5% in steps of 5%\n*       temperatures -10 deg to +20 deg with respect to 280 deg at SL\n*       relative humidity 0, 0.5, 1\n*       wavelengths 0.4, 0.6, ... 2 micron, + radio\n*       zenith distances 15, 45, 75 degrees\n*\n*     The accuracy with respect to direct use of the sla_REFRO routine\n*     was as follows:\n*\n*                            worst         RMS\n*\n*       optical/IR           62 mas       8 mas\n*       radio               319 mas      49 mas\n*\n*     For this particular set of conditions:\n*\n*       lapse rate 0.0065 K/metre\n*       latitude 50 degrees\n*       sea level\n*       pressure 1005 mb\n*       temperature 280.15 K\n*       humidity 80%\n*       wavelength 5740 Angstroms\n*\n*     the results were as follows:\n*\n*       ZD        sla_REFRO   sla_REFCOQ  Saastamoinen\n*\n*       10         10.27        10.27        10.27\n*       20         21.19        21.20        21.19\n*       30         33.61        33.61        33.60\n*       40         48.82        48.83        48.81\n*       45         58.16        58.18        58.16\n*       50         69.28        69.30        69.27\n*       55         82.97        82.99        82.95\n*       60        100.51       100.54       100.50\n*       65        124.23       124.26       124.20\n*       70        158.63       158.68       158.61\n*       72        177.32       177.37       177.31\n*       74        200.35       200.38       200.32\n*       76        229.45       229.43       229.42\n*       78        267.44       267.29       267.41\n*       80        319.13       318.55       319.10\n*\n*      deg        arcsec       arcsec       arcsec\n*\n*     The values for Saastamoinen's formula (which includes terms\n*     up to tan^5) are taken from Hohenkerk and Sinclair (1985).\n*\n*     The results from the much slower but more accurate sla_REFCO\n*     routine have not been included in the tabulation as they are\n*     identical to those in the sla_REFRO column to the 0.01 arcsec\n*     resolution used.\n*\n*  4  Outlandish input parameters are silently limited to mathematically\n*     safe values.  Zero pressure is permissible, and causes zeroes to\n*     be returned.\n*\n*  5  The algorithm draws on several sources, as follows:\n*\n*     a) The formula for the saturation vapour pressure of water as\n*        a function of temperature and temperature is taken from\n*        expressions A4.5-A4.7 of Gill (1982).\n*\n*     b) The formula for the water vapour pressure, given the\n*        saturation pressure and the relative humidity, is from\n*        Crane (1976), expression 2.5.5.\n*\n*     c) The refractivity of air is a function of temperature,\n*        total pressure, water-vapour pressure and, in the case\n*        of optical/IR but not radio, wavelength.  The formulae\n*        for the two cases are developed from Hohenkerk & Sinclair\n*        (1985) and Rueger (2002).\n*\n*     The above three items are as used in the sla_REFRO routine.\n*\n*     d) The formula for beta, the ratio of the scale height of the\n*        atmosphere to the geocentric distance of the observer, is\n*        an adaption of expression 9 from Stone (1996).  The\n*        adaptations, arrived at empirically, consist of (i) a\n*        small adjustment to the coefficient and (ii) a humidity\n*        term for the radio case only.\n*\n*     e) The formulae for the refraction constants as a function of\n*        n-1 and beta are from Green (1987), expression 4.31.\n*\n*  References:\n*\n*     Crane, R.K., Meeks, M.L. (ed), \"Refraction Effects in the Neutral\n*     Atmosphere\", Methods of Experimental Physics: Astrophysics 12B,\n*     Academic Press, 1976.\n*\n*     Gill, Adrian E., \"Atmosphere-Ocean Dynamics\", Academic Press, 1982.\n*\n*     Green, R.M., \"Spherical Astronomy\", Cambridge University Press, 1987.\n*\n*     Hohenkerk, C.Y., & Sinclair, A.T., NAO Technical Note No. 63, 1985.\n*\n*     Rueger, J.M., \"Refractive Index Formulae for Electronic Distance\n*     Measurement with Radio and Millimetre Waves\", in Unisurv Report\n*     S-68, School of Surveying and Spatial Information Systems,\n*     University of New South Wales, Sydney, Australia, 2002.\n*\n*     Stone, Ronald C., P.A.S.P. 108 1051-1058, 1996.\n*\n*  Last revision:   2 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\refcoq.f\n\"\"\"", "sla_refro": "\"\"\"\n*     - - - - - -\n*      R E F R O\n*     - - - - - -\n*\n*  Atmospheric refraction for radio and optical/IR wavelengths.\n*\n*  Given:\n*    ZOBS    d  observed zenith distance of the source (radian)\n*    HM      d  height of the observer above sea level (metre)\n*    TDK     d  ambient temperature at the observer (K)\n*    PMB     d  pressure at the observer (millibar)\n*    RH      d  relative humidity at the observer (range 0-1)\n*    WL      d  effective wavelength of the source (micrometre)\n*    PHI     d  latitude of the observer (radian, astronomical)\n*    TLR     d  temperature lapse rate in the troposphere (K/metre)\n*    EPS     d  precision required to terminate iteration (radian)\n*\n*  Returned:\n*    REF     d  refraction: in vacuo ZD minus observed ZD (radian)\n*\n*  Notes:\n*\n*  1  A suggested value for the TLR argument is 0.0065D0.  The\n*     refraction is significantly affected by TLR, and if studies\n*     of the local atmosphere have been carried out a better TLR\n*     value may be available.  The sign of the supplied TLR value\n*     is ignored.\n*\n*  2  A suggested value for the EPS argument is 1D-8.  The result is\n*     usually at least two orders of magnitude more computationally\n*     precise than the supplied EPS value.\n*\n*  3  The routine computes the refraction for zenith distances up\n*     to and a little beyond 90 deg using the method of Hohenkerk\n*     and Sinclair (NAO Technical Notes 59 and 63, subsequently adopted\n*     in the Explanatory Supplement, 1992 edition - see section 3.281).\n*\n*  4  The code is a development of the optical/IR refraction subroutine\n*     AREF of C.Hohenkerk (HMNAO, September 1984), with extensions to\n*     support the radio case.  Apart from merely cosmetic changes, the\n*     following modifications to the original HMNAO optical/IR refraction\n*     code have been made:\n*\n*     .  The angle arguments have been changed to radians.\n*\n*     .  Any value of ZOBS is allowed (see note 6, below).\n*\n*     .  Other argument values have been limited to safe values.\n*\n*     .  Murray's values for the gas constants have been used\n*        (Vectorial Astrometry, Adam Hilger, 1983).\n*\n*     .  The numerical integration phase has been rearranged for\n*        extra clarity.\n*\n*     .  A better model for Ps(T) has been adopted (taken from\n*        Gill, Atmosphere-Ocean Dynamics, Academic Press, 1982).\n*\n*     .  More accurate expressions for Pwo have been adopted\n*        (again from Gill 1982).\n*\n*     .  The formula for the water vapour pressure, given the\n*        saturation pressure and the relative humidity, is from\n*        Crane (1976), expression 2.5.5.\n*\n*     .  Provision for radio wavelengths has been added using\n*        expressions devised by A.T.Sinclair, RGO (private\n*        communication 1989).  The refractivity model currently\n*        used is from J.M.Rueger, \"Refractive Index Formulae for\n*        Electronic Distance Measurement with Radio and Millimetre\n*        Waves\", in Unisurv Report S-68 (2002), School of Surveying\n*        and Spatial Information Systems, University of New South\n*        Wales, Sydney, Australia.\n*\n*     .  The optical refractivity for dry air is from Resolution 3 of\n*        the International Association of Geodesy adopted at the XXIIth\n*        General Assembly in Birmingham, UK, 1999.\n*\n*     .  Various small changes have been made to gain speed.\n*\n*  5  The radio refraction is chosen by specifying WL > 100 micrometres.\n*     Because the algorithm takes no account of the ionosphere, the\n*     accuracy deteriorates at low frequencies, below about 30 MHz.\n*\n*  6  Before use, the value of ZOBS is expressed in the range +/- pi.\n*     If this ranged ZOBS is -ve, the result REF is computed from its\n*     absolute value before being made -ve to match.  In addition, if\n*     it has an absolute value greater than 93 deg, a fixed REF value\n*     equal to the result for ZOBS = 93 deg is returned, appropriately\n*     signed.\n*\n*  7  As in the original Hohenkerk and Sinclair algorithm, fixed values\n*     of the water vapour polytrope exponent, the height of the\n*     tropopause, and the height at which refraction is negligible are\n*     used.\n*\n*  8  The radio refraction has been tested against work done by\n*     Iain Coulson, JACH, (private communication 1995) for the\n*     James Clerk Maxwell Telescope, Mauna Kea.  For typical conditions,\n*     agreement at the 0.1 arcsec level is achieved for moderate ZD,\n*     worsening to perhaps 0.5-1.0 arcsec at ZD 80 deg.  At hot and\n*     humid sea-level sites the accuracy will not be as good.\n*\n*  9  It should be noted that the relative humidity RH is formally\n*     defined in terms of \"mixing ratio\" rather than pressures or\n*     densities as is often stated.  It is the mass of water per unit\n*     mass of dry air divided by that for saturated air at the same\n*     temperature and pressure (see Gill 1982).\n*\n*  10 The algorithm is designed for observers in the troposphere.  The\n*     supplied temperature, pressure and lapse rate are assumed to be\n*     for a point in the troposphere and are used to define a model\n*     atmosphere with the tropopause at 11km altitude and a constant\n*     temperature above that.  However, in practice, the refraction\n*     values returned for stratospheric observers, at altitudes up to\n*     25km, are quite usable.\n*\n*  Called:  sla_DRANGE, sla__ATMT, sla__ATMS\n*\n*  Last revision:   5 December 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\refro.f\n\"\"\"", "sla_refv": "\"\"\"\n*     - - - - -\n*      R E F V\n*     - - - - -\n*\n*  Adjust an unrefracted Cartesian vector to include the effect of\n*  atmospheric refraction, using the simple A tan Z + B tan**3 Z\n*  model.\n*\n*  Given:\n*    VU    dp    unrefracted position of the source (Az/El 3-vector)\n*    REFA  dp    tan Z coefficient (radian)\n*    REFB  dp    tan**3 Z coefficient (radian)\n*\n*  Returned:\n*    VR    dp    refracted position of the source (Az/El 3-vector)\n*\n*  Notes:\n*\n*  1  This routine applies the adjustment for refraction in the\n*     opposite sense to the usual one - it takes an unrefracted\n*     (in vacuo) position and produces an observed (refracted)\n*     position, whereas the A tan Z + B tan**3 Z model strictly\n*     applies to the case where an observed position is to have the\n*     refraction removed.  The unrefracted to refracted case is\n*     harder, and requires an inverted form of the text-book\n*     refraction models;  the algorithm used here is equivalent to\n*     one iteration of the Newton-Raphson method applied to the above\n*     formula.\n*\n*  2  Though optimized for speed rather than precision, the present\n*     routine achieves consistency with the refracted-to-unrefracted\n*     A tan Z + B tan**3 Z model at better than 1 microarcsecond within\n*     30 degrees of the zenith and remains within 1 milliarcsecond to\n*     beyond ZD 70 degrees.  The inherent accuracy of the model is, of\n*     course, far worse than this - see the documentation for sla_REFCO\n*     for more information.\n*\n*  3  At low elevations (below about 3 degrees) the refraction\n*     correction is held back to prevent arithmetic problems and\n*     wildly wrong results.  For optical/IR wavelengths, over a wide\n*     range of observer heights and corresponding temperatures and\n*     pressures, the following levels of accuracy (arcsec, worst case)\n*     are achieved, relative to numerical integration through a model\n*     atmosphere:\n*\n*              ZD    error\n*\n*              80      0.7\n*              81      1.3\n*              82      2.5\n*              83      5\n*              84     10\n*              85     20\n*              86     55\n*              87    160\n*              88    360\n*              89    640\n*              90   1100\n*              91   1700         } relevant only to\n*              92   2600         } high-elevation sites\n*\n*     The results for radio are slightly worse over most of the range,\n*     becoming significantly worse below ZD=88 and unusable beyond\n*     ZD=90.\n*\n*  4  See also the routine sla_REFZ, which performs the adjustment to\n*     the zenith distance rather than in Cartesian Az/El coordinates.\n*     The present routine is faster than sla_REFZ and, except very low down,\n*     is equally accurate for all practical purposes.  However, beyond\n*     about ZD 84 degrees sla_REFZ should be used, and for the utmost\n*     accuracy iterative use of sla_REFRO should be considered.\n*\n*  P.T.Wallace   Starlink   10 April 2004\n*\n*  Copyright (C) 2004 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\refv.f\n\"\"\"", "sla_refz": "\"\"\"\n*     - - - - -\n*      R E F Z\n*     - - - - -\n*\n*  Adjust an unrefracted zenith distance to include the effect of\n*  atmospheric refraction, using the simple A tan Z + B tan**3 Z\n*  model (plus special handling for large ZDs).\n*\n*  Given:\n*    ZU    dp    unrefracted zenith distance of the source (radian)\n*    REFA  dp    tan Z coefficient (radian)\n*    REFB  dp    tan**3 Z coefficient (radian)\n*\n*  Returned:\n*    ZR    dp    refracted zenith distance (radian)\n*\n*  Notes:\n*\n*  1  This routine applies the adjustment for refraction in the\n*     opposite sense to the usual one - it takes an unrefracted\n*     (in vacuo) position and produces an observed (refracted)\n*     position, whereas the A tan Z + B tan**3 Z model strictly\n*     applies to the case where an observed position is to have the\n*     refraction removed.  The unrefracted to refracted case is\n*     harder, and requires an inverted form of the text-book\n*     refraction models;  the formula used here is based on the\n*     Newton-Raphson method.  For the utmost numerical consistency\n*     with the refracted to unrefracted model, two iterations are\n*     carried out, achieving agreement at the 1D-11 arcseconds level\n*     for a ZD of 80 degrees.  The inherent accuracy of the model\n*     is, of course, far worse than this - see the documentation for\n*     sla_REFCO for more information.\n*\n*  2  At ZD 83 degrees, the rapidly-worsening A tan Z + B tan^3 Z\n*     model is abandoned and an empirical formula takes over.  For\n*     optical/IR wavelengths, over a wide range of observer heights and\n*     corresponding temperatures and pressures, the following levels of\n*     accuracy (arcsec, worst case) are achieved, relative to numerical\n*     integration through a model atmosphere:\n*\n*              ZR    error\n*\n*              80      0.7\n*              81      1.3\n*              82      2.4\n*              83      4.7\n*              84      6.2\n*              85      6.4\n*              86      8\n*              87     10\n*              88     15\n*              89     30\n*              90     60\n*              91    150         } relevant only to\n*              92    400         } high-elevation sites\n*\n*     For radio wavelengths the errors are typically 50% larger than\n*     the optical figures and by ZD 85 deg are twice as bad, worsening\n*     rapidly below that.  To maintain 1 arcsec accuracy down to ZD=85\n*     at the Green Bank site, Condon (2004) has suggested amplifying\n*     the amount of refraction predicted by sla_REFZ below 10.8 deg\n*     elevation by the factor (1+0.00195*(10.8-E_t)), where E_t is the\n*     unrefracted elevation in degrees.\n*\n*     The high-ZD model is scaled to match the normal model at the\n*     transition point;  there is no glitch.\n*\n*  3  Beyond 93 deg zenith distance, the refraction is held at its\n*     93 deg value.\n*\n*  4  See also the routine sla_REFV, which performs the adjustment in\n*     Cartesian Az/El coordinates, and with the emphasis on speed\n*     rather than numerical accuracy.\n*\n*  Reference:\n*\n*     Condon,J.J., Refraction Corrections for the GBT, PTCS/PN/35.2,\n*     NRAO Green Bank, 2004.\n*\n*  P.T.Wallace   Starlink   9 April 2004\n*\n*  Copyright (C) 2004 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\refz.f\n\"\"\"", "sla_rverot": "\"\"\"\n*     - - - - - - -\n*      R V E R O T\n*     - - - - - - -\n*\n*  Velocity component in a given direction due to Earth rotation\n*  (single precision)\n*\n*  Given:\n*     PHI     real    latitude of observing station (geodetic)\n*     RA,DA   real    apparent RA,DEC\n*     ST      real    local apparent sidereal time\n*\n*  PHI, RA, DEC and ST are all in radians.\n*\n*  Result:\n*     Component of Earth rotation in direction RA,DA (km/s)\n*\n*  Sign convention:\n*     The result is +ve when the observatory is receding from the\n*     given point on the sky.\n*\n*  Accuracy:\n*     The simple algorithm used assumes a spherical Earth, of\n*     a radius chosen to give results accurate to about 0.0005 km/s\n*     for observing stations at typical latitudes and heights.  For\n*     applications requiring greater precision, use the routine\n*     sla_PVOBS.\n*\n*  P.T.Wallace   Starlink   20 July 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rverot.f\n\"\"\"", "sla_rvgalc": "\"\"\"\n*     - - - - - - -\n*      R V G A L C\n*     - - - - - - -\n*\n*  Velocity component in a given direction due to the rotation\n*  of the Galaxy (single precision)\n*\n*  Given:\n*     R2000,D2000   real    J2000.0 mean RA,Dec (radians)\n*\n*  Result:\n*     Component of dynamical LSR motion in direction R2000,D2000 (km/s)\n*\n*  Sign convention:\n*     The result is +ve when the dynamical LSR is receding from the\n*     given point on the sky.\n*\n*  Note:  The Local Standard of Rest used here is a point in the\n*         vicinity of the Sun which is in a circular orbit around\n*         the Galactic centre.  Sometimes called the \"dynamical\" LSR,\n*         it is not to be confused with a \"kinematical\" LSR, which\n*         is the mean standard of rest of star catalogues or stellar\n*         populations.\n*\n*  Reference:  The orbital speed of 220 km/s used here comes from\n*              Kerr & Lynden-Bell (1986), MNRAS, 221, p1023.\n*\n*  Called:\n*     sla_CS2C, sla_VDV\n*\n*  P.T.Wallace   Starlink   23 March 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rvgalc.f\n\"\"\"", "sla_rvlg": "\"\"\"\n*     - - - - -\n*      R V L G\n*     - - - - -\n*\n*  Velocity component in a given direction due to the combination\n*  of the rotation of the Galaxy and the motion of the Galaxy\n*  relative to the mean motion of the local group (single precision)\n*\n*  Given:\n*     R2000,D2000   real    J2000.0 mean RA,Dec (radians)\n*\n*  Result:\n*     Component of SOLAR motion in direction R2000,D2000 (km/s)\n*\n*  Sign convention:\n*     The result is +ve when the Sun is receding from the\n*     given point on the sky.\n*\n*  Reference:\n*     IAU Trans 1976, 168, p201.\n*\n*  Called:\n*     sla_CS2C, sla_VDV\n*\n*  P.T.Wallace   Starlink   June 1985\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rvlg.f\n\"\"\"", "sla_rvlsrd": "\"\"\"\n*     - - - - - - -\n*      R V L S R D\n*     - - - - - - -\n*\n*  Velocity component in a given direction due to the Sun's motion\n*  with respect to the dynamical Local Standard of Rest.\n*\n*  (single precision)\n*\n*  Given:\n*     R2000,D2000   r    J2000.0 mean RA,Dec (radians)\n*\n*  Result:\n*     Component of \"peculiar\" solar motion in direction R2000,D2000 (km/s)\n*\n*  Sign convention:\n*     The result is +ve when the Sun is receding from the given point on\n*     the sky.\n*\n*  Note:  The Local Standard of Rest used here is the \"dynamical\" LSR,\n*         a point in the vicinity of the Sun which is in a circular\n*         orbit around the Galactic centre.  The Sun's motion with\n*         respect to the dynamical LSR is called the \"peculiar\" solar\n*         motion.\n*\n*         There is another type of LSR, called a \"kinematical\" LSR.  A\n*         kinematical LSR is the mean standard of rest of specified star\n*         catalogues or stellar populations, and several slightly\n*         different kinematical LSRs are in use.  The Sun's motion with\n*         respect to an agreed kinematical LSR is known as the \"standard\"\n*         solar motion.  To obtain a radial velocity correction with\n*         respect to an adopted kinematical LSR use the routine sla_RVLSRK.\n*\n*  Reference:  Delhaye (1965), in \"Stars and Stellar Systems\", vol 5,\n*              p73.\n*\n*  Called:\n*     sla_CS2C, sla_VDV\n*\n*  P.T.Wallace   Starlink   9 March 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rvlsrd.f\n\"\"\"", "sla_rvlsrk": "\"\"\"\n*     - - - - - - -\n*      R V L S R K\n*     - - - - - - -\n*\n*  Velocity component in a given direction due to the Sun's motion\n*  with respect to an adopted kinematic Local Standard of Rest.\n*\n*  (single precision)\n*\n*  Given:\n*     R2000,D2000   r    J2000.0 mean RA,Dec (radians)\n*\n*  Result:\n*     Component of \"standard\" solar motion in direction R2000,D2000 (km/s)\n*\n*  Sign convention:\n*     The result is +ve when the Sun is receding from the given point on\n*     the sky.\n*\n*  Note:  The Local Standard of Rest used here is one of several\n*         \"kinematical\" LSRs in common use.  A kinematical LSR is the\n*         mean standard of rest of specified star catalogues or stellar\n*         populations.  The Sun's motion with respect to a kinematical\n*         LSR is known as the \"standard\" solar motion.\n*\n*         There is another sort of LSR, the \"dynamical\" LSR, which is a\n*         point in the vicinity of the Sun which is in a circular orbit\n*         around the Galactic centre.  The Sun's motion with respect to\n*         the dynamical LSR is called the \"peculiar\" solar motion.  To\n*         obtain a radial velocity correction with respect to the\n*         dynamical LSR use the routine sla_RVLSRD.\n*\n*  Reference:  Delhaye (1965), in \"Stars and Stellar Systems\", vol 5,\n*              p73.\n*\n*  Called:\n*     sla_CS2C, sla_VDV\n*\n*  P.T.Wallace   Starlink   11 March 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\rvlsrk.f\n\"\"\"", "sla_s2tp": "\"\"\"\n*     - - - - -\n*      S 2 T P\n*     - - - - -\n*\n*  Projection of spherical coordinates onto tangent plane:\n*  \"gnomonic\" projection - \"standard coordinates\"\n*  (single precision)\n*\n*  Given:\n*     RA,DEC      real  spherical coordinates of point to be projected\n*     RAZ,DECZ    real  spherical coordinates of tangent point\n*\n*  Returned:\n*     XI,ETA      real  rectangular coordinates on tangent plane\n*     J           int   status:   0 = OK, star on tangent plane\n*                                 1 = error, star too far from axis\n*                                 2 = error, antistar on tangent plane\n*                                 3 = error, antistar too far from axis\n*\n*  P.T.Wallace   Starlink   18 July 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\s2tp.f\n\"\"\"", "sla_sep": "\"\"\"\n*     - - - -\n*      S E P\n*     - - - -\n*\n*  Angle between two points on a sphere.\n*\n*  (single precision)\n*\n*  Given:\n*     A1,B1    r     spherical coordinates of one point\n*     A2,B2    r     spherical coordinates of the other point\n*\n*  (The spherical coordinates are [RA,Dec], [Long,Lat] etc, in radians.)\n*\n*  The result is the angle, in radians, between the two points.  It\n*  is always positive.\n*\n*  Called:  sla_DSEP\n*\n*  Last revision:   7 May 2000\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\sep.f\n\"\"\"", "sla_sepv": "\"\"\"\n*     - - - - -\n*      S E P V\n*     - - - - -\n*\n*  Angle between two vectors.\n*\n*  (single precision)\n*\n*  Given:\n*     V1      r(3)    first vector\n*     V2      r(3)    second vector\n*\n*  The result is the angle, in radians, between the two vectors.  It\n*  is always positive.\n*\n*  Notes:\n*\n*  1  There is no requirement for the vectors to be unit length.\n*\n*  2  If either vector is null, zero is returned.\n*\n*  3  The simplest formulation would use dot product alone.  However,\n*     this would reduce the accuracy for angles near zero and pi.  The\n*     algorithm uses both cross product and dot product, which maintains\n*     accuracy for all sizes of angle.\n*\n*  Called:  sla_DSEPV\n*\n*  Last revision:   7 May 2000\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\sepv.f\n\"\"\"", "sla_smat": "\"\"\"\n*     - - - - -\n*      S M A T\n*     - - - - -\n*\n*  Matrix inversion & solution of simultaneous equations\n*  (single precision)\n*\n*  For the set of n simultaneous equations in n unknowns:\n*     A.Y = X\n*\n*  where:\n*     A is a non-singular N x N matrix\n*     Y is the vector of N unknowns\n*     X is the known vector\n*\n*  SMATRX computes:\n*     the inverse of matrix A\n*     the determinant of matrix A\n*     the vector of N unknowns\n*\n*  Arguments:\n*\n*     symbol  type dimension           before              after\n*\n*       N      int                 no. of unknowns       unchanged\n*       A      real  (N,N)             matrix             inverse\n*       Y      real   (N)              vector            solution\n*       D      real                       -             determinant\n*     * JF     int                        -           singularity flag\n*       IW     int    (N)                 -              workspace\n*\n*  *  JF is the singularity flag.  If the matrix is non-singular,\n*    JF=0 is returned.  If the matrix is singular, JF=-1 & D=0.0 are\n*    returned.  In the latter case, the contents of array A on return\n*    are undefined.\n*\n*  Algorithm:\n*     Gaussian elimination with partial pivoting.\n*\n*  Speed:\n*     Very fast.\n*\n*  Accuracy:\n*     Fairly accurate - errors 1 to 4 times those of routines optimised\n*     for accuracy.\n*\n*  Note:  replaces the obsolete sla_SMATRX routine.\n*\n*  P.T.Wallace   Starlink   10 September 1990\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\smat.f\n\"\"\"", "sla_subet": "\"\"\"\n*     - - - - - -\n*      S U B E T\n*     - - - - - -\n*\n*  Remove the E-terms (elliptic component of annual aberration)\n*  from a pre IAU 1976 catalogue RA,Dec to give a mean place\n*  (double precision)\n*\n*  Given:\n*     RC,DC     dp     RA,Dec (radians) with E-terms included\n*     EQ        dp     Besselian epoch of mean equator and equinox\n*\n*  Returned:\n*     RM,DM     dp     RA,Dec (radians) without E-terms\n*\n*  Called:\n*     sla_ETRMS, sla_DCS2C, sla_,DVDV, sla_DCC2S, sla_DRANRM\n*\n*  Explanation:\n*     Most star positions from pre-1984 optical catalogues (or\n*     derived from astrometry using such stars) embody the\n*     E-terms.  This routine converts such a position to a\n*     formal mean place (allowing, for example, comparison with a\n*     pulsar timing position).\n*\n*  Reference:\n*     Explanatory Supplement to the Astronomical Ephemeris,\n*     section 2D, page 48.\n*\n*  P.T.Wallace   Starlink   10 May 1990\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\subet.f\n\"\"\"", "sla_supgal": "\"\"\"\n*     - - - - - - -\n*      S U P G A L\n*     - - - - - - -\n*\n*  Transformation from de Vaucouleurs supergalactic coordinates\n*  to IAU 1958 galactic coordinates (double precision)\n*\n*  Given:\n*     DSL,DSB     dp       supergalactic longitude and latitude\n*\n*  Returned:\n*     DL,DB       dp       galactic longitude and latitude L2,B2\n*\n*  (all arguments are radians)\n*\n*  Called:\n*     sla_DCS2C, sla_DIMXV, sla_DCC2S, sla_DRANRM, sla_DRANGE\n*\n*  References:\n*\n*     de Vaucouleurs, de Vaucouleurs, & Corwin, Second Reference\n*     Catalogue of Bright Galaxies, U. Texas, page 8.\n*\n*     Systems & Applied Sciences Corp., Documentation for the\n*     machine-readable version of the above catalogue,\n*     Contract NAS 5-26490.\n*\n*    (These two references give different values for the galactic\n*     longitude of the supergalactic origin.  Both are wrong;  the\n*     correct value is L2=137.37.)\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\supgal.f\n\"\"\"", "sla_svd": "\"\"\"\n*     - - - -\n*      S V D\n*     - - - -\n*\n*  Singular value decomposition  (double precision)\n*\n*  This routine expresses a given matrix A as the product of\n*  three matrices U, W, V:\n*\n*     A = U x W x VT\n*\n*  Where:\n*\n*     A   is any M (rows) x N (columns) matrix, where M.GE.N\n*     U   is an M x N column-orthogonal matrix\n*     W   is an N x N diagonal matrix with W(I,I).GE.0\n*     VT  is the transpose of an N x N orthogonal matrix\n*\n*     Note that M and N, above, are the LOGICAL dimensions of the\n*     matrices and vectors concerned, which can be located in\n*     arrays of larger PHYSICAL dimensions, given by MP and NP.\n*\n*  Given:\n*     M,N    i         numbers of rows and columns in matrix A\n*     MP,NP  i         physical dimensions of array containing matrix A\n*     A      d(MP,NP)  array containing MxN matrix A\n*\n*  Returned:\n*     A      d(MP,NP)  array containing MxN column-orthogonal matrix U\n*     W      d(N)      NxN diagonal matrix W (diagonal elements only)\n*     V      d(NP,NP)  array containing NxN orthogonal matrix V\n*     WORK   d(N)      workspace\n*     JSTAT  i         0 = OK, -1 = A wrong shape, >0 = index of W\n*                      for which convergence failed.  See note 2, below.\n*\n*   Notes:\n*\n*   1)  V contains matrix V, not the transpose of matrix V.\n*\n*   2)  If the status JSTAT is greater than zero, this need not\n*       necessarily be treated as a failure.  It means that, due to\n*       chance properties of the matrix A, the QR transformation\n*       phase of the routine did not fully converge in a predefined\n*       number of iterations, something that very seldom occurs.\n*       When this condition does arise, it is possible that the\n*       elements of the diagonal matrix W have not been correctly\n*       found.  However, in practice the results are likely to\n*       be trustworthy.  Applications should report the condition\n*       as a warning, but then proceed normally.\n*\n*  References:\n*     The algorithm is an adaptation of the routine SVD in the EISPACK\n*     library (Garbow et al 1977, EISPACK Guide Extension, Springer\n*     Verlag), which is a FORTRAN 66 implementation of the Algol\n*     routine SVD of Wilkinson & Reinsch 1971 (Handbook for Automatic\n*     Computation, vol 2, ed Bauer et al, Springer Verlag).  These\n*     references give full details of the algorithm used here.  A good\n*     account of the use of SVD in least squares problems is given in\n*     Numerical Recipes (Press et al 1986, Cambridge University Press),\n*     which includes another variant of the EISPACK code.\n*\n*  Last revision:   8 September 2005\n*\n*  Copyright P.T.Wallace.  All rights reserved.\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\svd.f\n\"\"\"", "sla_svdcov": "\"\"\"\n*     - - - - - - -\n*      S V D C O V\n*     - - - - - - -\n*\n*  From the W and V matrices from the SVD factorisation of a matrix\n*  (as obtained from the sla_SVD routine), obtain the covariance matrix.\n*\n*  (double precision)\n*\n*  Given:\n*     N      i         number of rows and columns in matrices W and V\n*     NP     i         first dimension of array containing matrix V\n*     NC     i         first dimension of array to receive CVM\n*     W      d(N)      NxN diagonal matrix W (diagonal elements only)\n*     V      d(NP,NP)  array containing NxN orthogonal matrix V\n*\n*  Returned:\n*     WORK   d(N)      workspace\n*     CVM    d(NC,NC)  array to receive covariance matrix\n*\n*  Reference:\n*     Numerical Recipes, section 14.3.\n*\n*  P.T.Wallace   Starlink   December 1988\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\svdcov.f\n\"\"\"", "sla_svdsol": "\"\"\"\n*     - - - - - - -\n*      S V D S O L\n*     - - - - - - -\n*\n*  From a given vector and the SVD of a matrix (as obtained from\n*  the SVD routine), obtain the solution vector (double precision)\n*\n*  This routine solves the equation:\n*\n*     A . x = b\n*\n*  where:\n*\n*     A   is a given M (rows) x N (columns) matrix, where M.GE.N\n*     x   is the N-vector we wish to find\n*     b   is a given M-vector\n*\n*  by means of the Singular Value Decomposition method (SVD).  In\n*  this method, the matrix A is first factorised (for example by\n*  the routine sla_SVD) into the following components:\n*\n*     A = U x W x VT\n*\n*  where:\n*\n*     A   is the M (rows) x N (columns) matrix\n*     U   is an M x N column-orthogonal matrix\n*     W   is an N x N diagonal matrix with W(I,I).GE.0\n*     VT  is the transpose of an NxN orthogonal matrix\n*\n*     Note that M and N, above, are the LOGICAL dimensions of the\n*     matrices and vectors concerned, which can be located in\n*     arrays of larger PHYSICAL dimensions MP and NP.\n*\n*  The solution is found from the expression:\n*\n*     x = V . [diag(1/Wj)] . (transpose(U) . b)\n*\n*  Notes:\n*\n*  1)  If matrix A is square, and if the diagonal matrix W is not\n*      adjusted, the method is equivalent to conventional solution\n*      of simultaneous equations.\n*\n*  2)  If M>N, the result is a least-squares fit.\n*\n*  3)  If the solution is poorly determined, this shows up in the\n*      SVD factorisation as very small or zero Wj values.  Where\n*      a Wj value is small but non-zero it can be set to zero to\n*      avoid ill effects.  The present routine detects such zero\n*      Wj values and produces a sensible solution, with highly\n*      correlated terms kept under control rather than being allowed\n*      to elope to infinity, and with meaningful values for the\n*      other terms.\n*\n*  Given:\n*     M,N    i         numbers of rows and columns in matrix A\n*     MP,NP  i         physical dimensions of array containing matrix A\n*     B      d(M)      known vector b\n*     U      d(MP,NP)  array containing MxN matrix U\n*     W      d(N)      NxN diagonal matrix W (diagonal elements only)\n*     V      d(NP,NP)  array containing NxN orthogonal matrix V\n*\n*  Returned:\n*     WORK   d(N)      workspace\n*     X      d(N)      unknown vector x\n*\n*  Reference:\n*     Numerical Recipes, section 2.9.\n*\n*  P.T.Wallace   Starlink   29 October 1993\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\svdsol.f\n\"\"\"", "sla_tp2s": "\"\"\"\n*     - - - - -\n*      T P 2 S\n*     - - - - -\n*\n*  Transform tangent plane coordinates into spherical\n*  (single precision)\n*\n*  Given:\n*     XI,ETA      real  tangent plane rectangular coordinates\n*     RAZ,DECZ    real  spherical coordinates of tangent point\n*\n*  Returned:\n*     RA,DEC      real  spherical coordinates (0-2pi,+/-pi/2)\n*\n*  Called:        sla_RANORM\n*\n*  P.T.Wallace   Starlink   24 July 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\tp2s.f\n\"\"\"", "sla_tp2v": "\"\"\"\n*     - - - - -\n*      T P 2 V\n*     - - - - -\n*\n*  Given the tangent-plane coordinates of a star and the direction\n*  cosines of the tangent point, determine the direction cosines\n*  of the star.\n*\n*  (single precision)\n*\n*  Given:\n*     XI,ETA    r       tangent plane coordinates of star\n*     V0        r(3)    direction cosines of tangent point\n*\n*  Returned:\n*     V         r(3)    direction cosines of star\n*\n*  Notes:\n*\n*  1  If vector V0 is not of unit length, the returned vector V will\n*     be wrong.\n*\n*  2  If vector V0 points at a pole, the returned vector V will be\n*     based on the arbitrary assumption that the RA of the tangent\n*     point is zero.\n*\n*  3  This routine is the Cartesian equivalent of the routine sla_TP2S.\n*\n*  P.T.Wallace   Starlink   11 February 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\tp2v.f\n\"\"\"", "sla_tps2c": "\"\"\"\n*     - - - - - -\n*      T P S 2 C\n*     - - - - - -\n*\n*  From the tangent plane coordinates of a star of known RA,Dec,\n*  determine the RA,Dec of the tangent point.\n*\n*  (single precision)\n*\n*  Given:\n*     XI,ETA      r    tangent plane rectangular coordinates\n*     RA,DEC      r    spherical coordinates\n*\n*  Returned:\n*     RAZ1,DECZ1  r    spherical coordinates of tangent point, solution 1\n*     RAZ2,DECZ2  r    spherical coordinates of tangent point, solution 2\n*     N           i    number of solutions:\n*                        0 = no solutions returned (note 2)\n*                        1 = only the first solution is useful (note 3)\n*                        2 = both solutions are useful (note 3)\n*\n*  Notes:\n*\n*  1  The RAZ1 and RAZ2 values are returned in the range 0-2pi.\n*\n*  2  Cases where there is no solution can only arise near the poles.\n*     For example, it is clearly impossible for a star at the pole\n*     itself to have a non-zero XI value, and hence it is\n*     meaningless to ask where the tangent point would have to be\n*     to bring about this combination of XI and DEC.\n*\n*  3  Also near the poles, cases can arise where there are two useful\n*     solutions.  The argument N indicates whether the second of the\n*     two solutions returned is useful.  N=1 indicates only one useful\n*     solution, the usual case;  under these circumstances, the second\n*     solution corresponds to the \"over-the-pole\" case, and this is\n*     reflected in the values of RAZ2 and DECZ2 which are returned.\n*\n*  4  The DECZ1 and DECZ2 values are returned in the range +/-pi, but\n*     in the usual, non-pole-crossing, case, the range is +/-pi/2.\n*\n*  5  This routine is the spherical equivalent of the routine sla_DTPV2C.\n*\n*  Called:  sla_RANORM\n*\n*  P.T.Wallace   Starlink   5 June 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\tps2c.f\n\"\"\"", "sla_tpv2c": "\"\"\"\n*     - - - - - -\n*      T P V 2 C\n*     - - - - - -\n*\n*  Given the tangent-plane coordinates of a star and its direction\n*  cosines, determine the direction cosines of the tangent-point.\n*\n*  (single precision)\n*\n*  Given:\n*     XI,ETA    r       tangent plane coordinates of star\n*     V         r(3)    direction cosines of star\n*\n*  Returned:\n*     V01       r(3)    direction cosines of tangent point, solution 1\n*     V02       r(3)    direction cosines of tangent point, solution 2\n*     N         i       number of solutions:\n*                         0 = no solutions returned (note 2)\n*                         1 = only the first solution is useful (note 3)\n*                         2 = both solutions are useful (note 3)\n*\n*  Notes:\n*\n*  1  The vector V must be of unit length or the result will be wrong.\n*\n*  2  Cases where there is no solution can only arise near the poles.\n*     For example, it is clearly impossible for a star at the pole\n*     itself to have a non-zero XI value, and hence it is meaningless\n*     to ask where the tangent point would have to be.\n*\n*  3  Also near the poles, cases can arise where there are two useful\n*     solutions.  The argument N indicates whether the second of the\n*     two solutions returned is useful.  N=1 indicates only one useful\n*     solution, the usual case;  under these circumstances, the second\n*     solution can be regarded as valid if the vector V02 is interpreted\n*     as the \"over-the-pole\" case.\n*\n*  4  This routine is the Cartesian equivalent of the routine sla_TPS2C.\n*\n*  P.T.Wallace   Starlink   5 June 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\tpv2c.f\n\"\"\"", "sla_ue2el": "\"\"\"\n*     - - - - - -\n*      U E 2 E L\n*     - - - - - -\n*\n*  Transform universal elements into conventional heliocentric\n*  osculating elements.\n*\n*  Given:\n*     U         d(13)  universal orbital elements (Note 1)\n*\n*                 (1)  combined mass (M+m)\n*                 (2)  total energy of the orbit (alpha)\n*                 (3)  reference (osculating) epoch (t0)\n*               (4-6)  position at reference epoch (r0)\n*               (7-9)  velocity at reference epoch (v0)\n*                (10)  heliocentric distance at reference epoch\n*                (11)  r0.v0\n*                (12)  date (t)\n*                (13)  universal eccentric anomaly (psi) of date, approx\n*\n*     JFORMR    i      requested element set (1-3; Note 3)\n*\n*  Returned:\n*     JFORM     d      element set actually returned (1-3; Note 4)\n*     EPOCH     d      epoch of elements (TT MJD)\n*     ORBINC    d      inclination (radians)\n*     ANODE     d      longitude of the ascending node (radians)\n*     PERIH     d      longitude or argument of perihelion (radians)\n*     AORQ      d      mean distance or perihelion distance (AU)\n*     E         d      eccentricity\n*     AORL      d      mean anomaly or longitude (radians, JFORM=1,2 only)\n*     DM        d      daily motion (radians, JFORM=1 only)\n*     JSTAT     i      status:  0 = OK\n*                              -1 = illegal combined mass\n*                              -2 = illegal JFORMR\n*                              -3 = position/velocity out of range\n*\n*  Notes\n*\n*  1  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference 2).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  2  The universal elements are with respect to the mean equator and\n*     equinox of epoch J2000.  The orbital elements produced are with\n*     respect to the J2000 ecliptic and mean equinox.\n*\n*  3  Three different element-format options are supported:\n*\n*     Option JFORM=1, suitable for the major planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = longitude of perihelion, curly pi (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e\n*     AORL   = mean longitude L (radians)\n*     DM     = daily motion (radians)\n*\n*     Option JFORM=2, suitable for minor planets:\n*\n*     EPOCH  = epoch of elements (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = mean distance, a (AU)\n*     E      = eccentricity, e\n*     AORL   = mean anomaly M (radians)\n*\n*     Option JFORM=3, suitable for comets:\n*\n*     EPOCH  = epoch of perihelion (TT MJD)\n*     ORBINC = inclination i (radians)\n*     ANODE  = longitude of the ascending node, big omega (radians)\n*     PERIH  = argument of perihelion, little omega (radians)\n*     AORQ   = perihelion distance, q (AU)\n*     E      = eccentricity, e\n*\n*  4  It may not be possible to generate elements in the form\n*     requested through JFORMR.  The caller is notified of the form\n*     of elements actually returned by means of the JFORM argument:\n*\n*      JFORMR   JFORM     meaning\n*\n*        1        1       OK - elements are in the requested format\n*        1        2       never happens\n*        1        3       orbit not elliptical\n*\n*        2        1       never happens\n*        2        2       OK - elements are in the requested format\n*        2        3       orbit not elliptical\n*\n*        3        1       never happens\n*        3        2       never happens\n*        3        3       OK - elements are in the requested format\n*\n*  5  The arguments returned for each value of JFORM (cf Note 6: JFORM\n*     may not be the same as JFORMR) are as follows:\n*\n*         JFORM         1              2              3\n*         EPOCH         t0             t0             T\n*         ORBINC        i              i              i\n*         ANODE         Omega          Omega          Omega\n*         PERIH         curly pi       omega          omega\n*         AORQ          a              a              q\n*         E             e              e              e\n*         AORL          L              M              -\n*         DM            n              -              -\n*\n*     where:\n*\n*         t0           is the epoch of the elements (MJD, TT)\n*         T              \"    epoch of perihelion (MJD, TT)\n*         i              \"    inclination (radians)\n*         Omega          \"    longitude of the ascending node (radians)\n*         curly pi       \"    longitude of perihelion (radians)\n*         omega          \"    argument of perihelion (radians)\n*         a              \"    mean distance (AU)\n*         q              \"    perihelion distance (AU)\n*         e              \"    eccentricity\n*         L              \"    longitude (radians, 0-2pi)\n*         M              \"    mean anomaly (radians, 0-2pi)\n*         n              \"    daily motion (radians)\n*         -             means no value is set\n*\n*  6  At very small inclinations, the longitude of the ascending node\n*     ANODE becomes indeterminate and under some circumstances may be\n*     set arbitrarily to zero.  Similarly, if the orbit is close to\n*     circular, the true anomaly becomes indeterminate and under some\n*     circumstances may be set arbitrarily to zero.  In such cases,\n*     the other elements are automatically adjusted to compensate,\n*     and so the elements remain a valid description of the orbit.\n*\n*  References:\n*\n*     1  Sterne, Theodore E., \"An Introduction to Celestial Mechanics\",\n*        Interscience Publishers Inc., 1960.  Section 6.7, p199.\n*\n*     2  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  Called:  sla_PV2EL\n*\n*  P.T.Wallace   Starlink   18 March 1999\n*\n*  Copyright (C) 1999 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ue2el.f\n\"\"\"", "sla_ue2pv": "\"\"\"\n*     - - - - - -\n*      U E 2 P V\n*     - - - - - -\n*\n*  Heliocentric position and velocity of a planet, asteroid or comet,\n*  starting from orbital elements in the \"universal variables\" form.\n*\n*  Given:\n*     DATE     d       date, Modified Julian Date (JD-2400000.5)\n*\n*  Given and returned:\n*     U        d(13)   universal orbital elements (updated; Note 1)\n*\n*       given    (1)   combined mass (M+m)\n*         \"      (2)   total energy of the orbit (alpha)\n*         \"      (3)   reference (osculating) epoch (t0)\n*         \"    (4-6)   position at reference epoch (r0)\n*         \"    (7-9)   velocity at reference epoch (v0)\n*         \"     (10)   heliocentric distance at reference epoch\n*         \"     (11)   r0.v0\n*     returned  (12)   date (t)\n*         \"     (13)   universal eccentric anomaly (psi) of date\n*\n*  Returned:\n*     PV       d(6)    position (AU) and velocity (AU/s)\n*     JSTAT    i       status:  0 = OK\n*                              -1 = radius vector zero\n*                              -2 = failed to converge\n*\n*  Notes\n*\n*  1  The \"universal\" elements are those which define the orbit for the\n*     purposes of the method of universal variables (see reference).\n*     They consist of the combined mass of the two bodies, an epoch,\n*     and the position and velocity vectors (arbitrary reference frame)\n*     at that epoch.  The parameter set used here includes also various\n*     quantities that can, in fact, be derived from the other\n*     information.  This approach is taken to avoiding unnecessary\n*     computation and loss of accuracy.  The supplementary quantities\n*     are (i) alpha, which is proportional to the total energy of the\n*     orbit, (ii) the heliocentric distance at epoch, (iii) the\n*     outwards component of the velocity at the given epoch, (iv) an\n*     estimate of psi, the \"universal eccentric anomaly\" at a given\n*     date and (v) that date.\n*\n*  2  The companion routine is sla_EL2UE.  This takes the conventional\n*     orbital elements and transforms them into the set of numbers\n*     needed by the present routine.  A single prediction requires one\n*     one call to sla_EL2UE followed by one call to the present routine;\n*     for convenience, the two calls are packaged as the routine\n*     sla_PLANEL.  Multiple predictions may be made by again\n*     calling sla_EL2UE once, but then calling the present routine\n*     multiple times, which is faster than multiple calls to sla_PLANEL.\n*\n*     It is not obligatory to use sla_EL2UE to obtain the parameters.\n*     However, it should be noted that because sla_EL2UE performs its\n*     own validation, no checks on the contents of the array U are made\n*     by the present routine.\n*\n*  3  DATE is the instant for which the prediction is required.  It is\n*     in the TT timescale (formerly Ephemeris Time, ET) and is a\n*     Modified Julian Date (JD-2400000.5).\n*\n*  4  The universal elements supplied in the array U are in canonical\n*     units (solar masses, AU and canonical days).  The position and\n*     velocity are not sensitive to the choice of reference frame.  The\n*     sla_EL2UE routine in fact produces coordinates with respect to the\n*     J2000 equator and equinox.\n*\n*  5  The algorithm was originally adapted from the EPHSLA program of\n*     D.H.P.Jones (private communication, 1996).  The method is based\n*     on Stumpff's Universal Variables.\n*\n*  Reference:  Everhart, E. & Pitkin, E.T., Am.J.Phys. 51, 712, 1983.\n*\n*  P.T.Wallace   Starlink   22 October 2005\n*\n*  Copyright (C) 2005 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\ue2pv.f\n\"\"\"", "sla_unpcd": "\"\"\"\n*     - - - - - -\n*      U N P C D\n*     - - - - - -\n*\n*  Remove pincushion/barrel distortion from a distorted [x,y] to give\n*  tangent-plane [x,y].\n*\n*  Given:\n*     DISCO    d      pincushion/barrel distortion coefficient\n*     X,Y      d      distorted coordinates\n*\n*  Returned:\n*     X,Y      d      tangent-plane coordinates\n*\n*  Notes:\n*\n*  1)  The distortion is of the form RP = R*(1+C*R^2), where R is\n*      the radial distance from the tangent point, C is the DISCO\n*      argument, and RP is the radial distance in the presence of\n*      the distortion.\n*\n*  2)  For pincushion distortion, C is +ve;  for barrel distortion,\n*      C is -ve.\n*\n*  3)  For X,Y in \"radians\" - units of one projection radius,\n*      which in the case of a photograph is the focal length of\n*      the camera - the following DISCO values apply:\n*\n*          Geometry          DISCO\n*\n*          astrograph         0.0\n*          Schmidt           -0.3333\n*          AAT PF doublet  +147.069\n*          AAT PF triplet  +178.585\n*          AAT f/8          +21.20\n*          JKT f/8          +13.32\n*\n*  4)  The present routine is a rigorous inverse of the companion\n*      routine sla_PCD.  The expression for RP in Note 1 is rewritten\n*      in the form x^3+a*x+b=0 and solved by standard techniques.\n*\n*  5)  Cases where the cubic has multiple real roots can sometimes\n*      occur, corresponding to extreme instances of barrel distortion\n*      where up to three different undistorted [X,Y]s all produce the\n*      same distorted [X,Y].  However, only one solution is returned,\n*      the one that produces the smallest change in [X,Y].\n*\n*  P.T.Wallace   Starlink   3 September 2000\n*\n*  Copyright (C) 2000 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\unpcd.f\n\"\"\"", "sla_v2tp": "\"\"\"\n*     - - - - -\n*      V 2 T P\n*     - - - - -\n*\n*  Given the direction cosines of a star and of the tangent point,\n*  determine the star's tangent-plane coordinates.\n*\n*  (single precision)\n*\n*  Given:\n*     V         r(3)    direction cosines of star\n*     V0        r(3)    direction cosines of tangent point\n*\n*  Returned:\n*     XI,ETA    r       tangent plane coordinates of star\n*     J         i       status:   0 = OK\n*                                 1 = error, star too far from axis\n*                                 2 = error, antistar on tangent plane\n*                                 3 = error, antistar too far from axis\n*\n*  Notes:\n*\n*  1  If vector V0 is not of unit length, or if vector V is of zero\n*     length, the results will be wrong.\n*\n*  2  If V0 points at a pole, the returned XI,ETA will be based on the\n*     arbitrary assumption that the RA of the tangent point is zero.\n*\n*  3  This routine is the Cartesian equivalent of the routine sla_S2TP.\n*\n*  P.T.Wallace   Starlink   27 November 1996\n*\n*  Copyright (C) 1996 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\v2tp.f\n\"\"\"", "sla_vdv": "\"\"\"\n*     - - - -\n*      V D V\n*     - - - -\n*\n*  Scalar product of two 3-vectors  (single precision)\n*\n*  Given:\n*      VA      real(3)     first vector\n*      VB      real(3)     second vector\n*\n*  The result is the scalar product VA.VB (single precision)\n*\n*  P.T.Wallace   Starlink   November 1984\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\vdv.f\n\"\"\"", "sla_veri": "\"\"\"\n*     - - - - -\n*      V E R I\n*     - - - - -\n*\n*  Report the SLALIB version number as an integer.\n*\n*  Given:\n*    None\n*\n*  The result is the SLALIB version number as an integer m*1e6+n*1e3+r,\n*  where m is the major version, n the minor version and r the release\n*  number.\n*\n*  Notes:\n*\n*    To obtain the version number in a printable form, see\n*    subroutine sla_vers(version).\n*\n*    The sla_veri subroutine was introduced in SLALIB version 2.5-1, so\n*    if this function is absent, one can only tell that the release\n*    predates that one.\n*\n*  Norman Gray   Starlink   8 April 2005\n*\n*  Copyright (C) 2005 Council for the Central Laboratory of the\n*  Research Councils\n*\n*  Licence:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\veri.f\n\"\"\"", "sla_vers": "\"\"\"\n*     - - - - -\n*      V E R S\n*     - - - - -\n*\n*  Report the SLALIB version number.\n*\n*  Given:\n*    None\n*\n*  Returned:\n*    VERSION   c*(*)   Version number, in the form 'm.n-r'.\n*                      The major version is m, the minor version n, and\n*                      release r.  The string passed in should be at least\n*                      8 characters in length, to account for the (remote)\n*                      possibility that these numbers will ever go to\n*                      two digits.\n*\n*  Notes:\n*\n*    To obtain the version number in a more easily processed form, see\n*    function sla_veri().\n*\n*    The sla_vers subroutine was introduced in SLALIB version 2.5-1, so\n*    if this function is absent, one can only tell that the release\n*    predates that one.\n*\n*  Norman Gray   Starlink   8 April 2005\n*\n*  Copyright (C) 2005 Council for the Central Laboratory of the\n*  Research Councils\n*\n*  Licence:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\vers.f\n\"\"\"", "sla_vn": "\"\"\"\n*     - - -\n*      V N\n*     - - -\n*\n*  Normalizes a 3-vector also giving the modulus (single precision)\n*\n*  Given:\n*     V       real(3)      vector\n*\n*  Returned:\n*     UV      real(3)      unit vector in direction of V\n*     VM      real         modulus of V\n*\n*  If the modulus of V is zero, UV is set to zero as well\n*\n*  P.T.Wallace   Starlink   23 November 1995\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\vn.f\n\"\"\"", "sla_vxv": "\"\"\"\n*     - - - -\n*      V X V\n*     - - - -\n*\n*  Vector product of two 3-vectors (single precision)\n*\n*  Given:\n*      VA      real(3)     first vector\n*      VB      real(3)     second vector\n*\n*  Returned:\n*      VC      real(3)     vector result\n*\n*  P.T.Wallace   Starlink   March 1986\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\vxv.f\n\"\"\"", "sla_wait": "\"\"\"\n*     - - - - -\n*      W A I T\n*     - - - - -\n*\n*  Interval wait\n*\n*  !!! Version for: SPARC/SunOS4, \n*                   SPARC/Solaris2, \n*                   DEC Mips/Ultrix\n*                   DEC AXP/Digital Unix\n*                   Intel/Linux\n*                   Convex\n*\n*  Given:\n*     DELAY     real      delay in seconds\n*\n*  Called:  SLEEP (a Fortran Intrinsic on all obove platforms)\n*\n*  P.T.Wallace   Starlink   22 January 1998\n*\n*  Copyright (C) 1998 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\wait.f\n\"\"\"", "sla_xy2xy": "\"\"\"\n*     - - - - - -\n*      X Y 2 X Y\n*     - - - - - -\n*\n*  Transform one [X,Y] into another using a linear model of the type\n*  produced by the sla_FITXY routine.\n*\n*  Given:\n*     X1       d        x-coordinate\n*     Y1       d        y-coordinate\n*     COEFFS  d(6)      transformation coefficients (see note)\n*\n*  Returned:\n*     X2       d        x-coordinate\n*     Y2       d        y-coordinate\n*\n*  The model relates two sets of [X,Y] coordinates as follows.\n*  Naming the elements of COEFFS:\n*\n*     COEFFS(1) = A\n*     COEFFS(2) = B\n*     COEFFS(3) = C\n*     COEFFS(4) = D\n*     COEFFS(5) = E\n*     COEFFS(6) = F\n*\n*  the present routine performs the transformation:\n*\n*     X2 = A + B*X1 + C*Y1\n*     Y2 = D + E*X1 + F*Y1\n*\n*  See also sla_FITXY, sla_PXY, sla_INVF, sla_DCMPF\n*\n*  P.T.Wallace   Starlink   5 December 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\xy2xy.f\n\"\"\"", "sla_zd": "\"\"\"\n*     - - -\n*      Z D\n*     - - -\n*\n*  HA, Dec to Zenith Distance (double precision)\n*\n*  Given:\n*     HA     d     Hour Angle in radians\n*     DEC    d     declination in radians\n*     PHI    d     observatory latitude in radians\n*\n*  The result is in the range 0 to pi.\n*\n*  Notes:\n*\n*  1)  The latitude must be geodetic.  In critical applications,\n*      corrections for polar motion should be applied.\n*\n*  2)  In some applications it will be important to specify the\n*      correct type of hour angle and declination in order to\n*      produce the required type of zenith distance.  In particular,\n*      it may be important to distinguish between the zenith distance\n*      as affected by refraction, which would require the \"observed\"\n*      HA,Dec, and the zenith distance in vacuo, which would require\n*      the \"topocentric\" HA,Dec.  If the effects of diurnal aberration\n*      can be neglected, the \"apparent\" HA,Dec may be used instead of\n*      the topocentric HA,Dec.\n*\n*  3)  No range checking of arguments is done.\n*\n*  4)  In applications which involve many zenith distance calculations,\n*      rather than calling the present routine it will be more efficient\n*      to use inline code, having previously computed fixed terms such\n*      as sine and cosine of latitude, and perhaps sine and cosine of\n*      declination.\n*\n*  P.T.Wallace   Starlink   3 April 1994\n*\n*  Copyright (C) 1995 Rutherford Appleton Laboratory\n*\n*  License:\n*    This program is free software; you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation; either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    This program is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with this program (see SLA_CONDITIONS); if not, write to the \n*    Free Software Foundation, Inc., 59 Temple Place, Suite 330, \n*    Boston, MA  02111-1307  USA\n*\nFile: src\\zd.f\n\"\"\""}